int64_t main()
{
    void var_58;
    int64_t rax_1 = __security_cookie ^ &var_58;
    char var_38[0x10];
    __builtin_memset(&var_38, 0, 0x28);
    int64_t entry_rdx;
    sub_1400010f0("Enter flag: ", entry_rdx);
    sub_140001170("%32s", &var_38);
    void* rax_2;
    int64_t rdx_1;
    rax_2 = strlen(&var_38);
    int64_t rcx_3;
    
    if (rax_2 != 0x20)
    {
        puts("No");
        rcx_3 = rax_1 ^ &var_58;
        
        if (rcx_3 != __security_cookie)
        {
            __security_check_cookie(rcx_3);
            breakpoint();
        }
    }
    else
    {
        char zmm0_1[0x10] = data_14001e030;
        char zmm1_1[0x10] = var_38 ^ zmm0_1;
        var_38 = zmm1_1;
        int128_t var_28;
        zmm0_1 ^= var_28;
        char var_28_1[0x10] = zmm0_1;
        char temp0_1[0x10] = __pcmpeqb_xmmdq_memdq(zmm0_1, data_140029010);
        void* const rcx_1;
        
        if (_mm_movemask_epi8(__pcmpeqb_xmmdq_memdq(zmm1_1, data_140029000) & temp0_1) == 0xffff)
            rcx_1 = &data_140023e7c;
        else
            rcx_1 = &data_140023e85;
        
        sub_1400010f0(rcx_1, rdx_1);
        rcx_3 = rax_1 ^ &var_58;
        
        if (rcx_3 != __security_cookie)
        {
            __security_check_cookie(rcx_3);
            breakpoint();
        }
    }
    return 0;
}

uint64_t sub_1400010f0(int64_t arg1, int64_t arg2)
{
    int64_t arg_10 = arg2;
    int64_t r8;
    int64_t arg_18 = r8;
    int64_t r9;
    int64_t arg_20 = r9;
    void var_58;
    int64_t rax_1 = __security_cookie ^ &var_58;
    int64_t* var_28 = &arg_10;
    void* rax_2 = sub_140002468(1);
    int64_t* var_38 = &arg_10;
    uint64_t result = __stdio_common_vfprintf(data_140029b40, rax_2, arg1, nullptr);
    int64_t rcx_2 = rax_1 ^ &var_58;
    
    if (rcx_2 == __security_cookie)
        return result;
    
    __security_check_cookie(rcx_2);
    breakpoint();
}

uint64_t sub_140001170(int64_t arg1, int64_t arg2)
{
    int64_t arg_10 = arg2;
    int64_t r8;
    int64_t arg_18 = r8;
    int64_t r9;
    int64_t arg_20 = r9;
    void var_58;
    int64_t rax_1 = __security_cookie ^ &var_58;
    int64_t* var_28 = &arg_10;
    void* rax_2 = sub_140002468(0);
    uint64_t result = __stdio_common_vfwscanf(data_140029b48, rax_2, arg1, 0, &arg_10);
    int64_t rcx_2 = rax_1 ^ &var_58;
    
    if (rcx_2 == __security_cookie)
        return result;
    
    __security_check_cookie(rcx_2);
    breakpoint();
}

int64_t sub_1400011f0() __pure
{
    return &data_140029b40;
}

int64_t sub_140001200() __pure
{
    return &data_140029b48;
}

BOOL sub_140001210()
{
    BOOL result = IsDebuggerPresent();
    
    if (result != 1)
        __builtin_memcpy(&data_140029000, 
            "\x9a\xcb\xcf\x9e\x98\xc9\xc8\x9d\xc9\x98\x99\x9b\x9c\xcf\x9f\x93\xcf\xcf\xcf\x9d\xcf\x98\x"
        "9a\x99\x9b\x9a\x98\xcb\x9d\x9d\x9d\x9f", 
            0x20);
    
    return result;
}

int64_t __security_check_cookie(int64_t arg1)
{
    if (arg1 == __security_cookie)
    {
        int64_t rcx = ROLQ(arg1, 0x10);
        
        if (!(rcx & 0xffff))
            return;
        
        arg1 = RORQ(rcx, 0x10);
    }
    
    /* tailcall */
    return __report_gsfailure(arg1);
}

void __report_gsfailure(uint64_t stack_cookie) __noreturn
{
    uint64_t stack_cookie_1 = stack_cookie;
    
    if (IsProcessorFeaturePresent(PF_FASTFAIL_AVAILABLE))
        trap(0xd);
    
    capture_previous_context(&data_140029bf0);
    data_140029ce8 = __return_addr;
    data_140029c88 = &stack_cookie_1;
    data_140029b60 = data_140029ce8;
    data_140029c70 = stack_cookie_1;
    data_140029b50 = 0xc0000409;
    data_140029b54 = 1;
    data_140029b68 = 1;
    data_140029b70 = 2;
    uint64_t __security_cookie_1 = __security_cookie;
    int64_t var_10 = data_140029080;
    __raise_securityfailure(&data_14001e040);
    /* no return */
}

int64_t sub_14000133e() __pure
{
    return;
}

IMAGE_RUNTIME_FUNCTION_ENTRY* capture_previous_context(CONTEXT* arg1)
{
    RtlCaptureContext(arg1);
    uint64_t Rip = arg1->Rip;
    IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry;
    
    for (int32_t i = 0; i < 2; i += 1)
    {
        uint64_t ImageBase;
        FunctionEntry = RtlLookupFunctionEntry(Rip, &ImageBase, nullptr);
        
        if (!FunctionEntry)
            break;
        
        uint64_t EstablisherFrame;
        void HandlerData;
        FunctionEntry = RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, Rip, FunctionEntry, arg1, 
            &HandlerData, &EstablisherFrame, nullptr);
    }
    
    return FunctionEntry;
}

void __raise_securityfailure(EXCEPTION_POINTERS* arg1) __noreturn
{
    SetUnhandledExceptionFilter(0);
    UnhandledExceptionFilter(arg1);
    /* tailcall */
    return TerminateProcess(GetCurrentProcess(), 0xc0000409);
}

int64_t pre_c_initialization()
{
    sub_14000aefc(1);
    _set_fmode(0x4000);
    data_14002a198 = 0;
    
    if (__scrt_initialize_onexit_tables(1))
    {
        _RTC_Initialize();
        atexit(_RTC_Terminate);
        
        if (!sub_14000a1b4(1))
        {
            sub_140001964();
            
            if (sub_140001998())
                sub_140002650(sub_140001950);
            
            _configthreadlocale(0);
            
            if (sub_140001974())
                j_sub_14000aa30();
            
            j_sub_140001950();
            return 0;
        }
    }
    
    __scrt_fastfail(7);
    breakpoint();
}

int64_t post_pgo_initialization()
{
    __scrt_initialize_default_local_stdio_options();
    return 0;
}

int64_t pre_cpp_initialization()
{
    sub_140001a1c();
    /* tailcall */
    return _set_new_mode(0);
}

int64_t sub_1400014d0(int64_t arg1 @ rbx)
{
    int64_t arg_8 = arg1;
    
    if (!__scrt_initialize_crt(1))
    {
        __scrt_fastfail(7);
        __scrt_fastfail(7);
    }
    else
    {
        int64_t rsi;
        rsi = 0;
        char var_18_1 = 0;
        arg1 = __scrt_acquire_startup_lock();
        int32_t rcx_1 = data_14002a0c0;
        
        if (rcx_1 == 1)
            __scrt_fastfail(7);
        else
        {
            if (rcx_1)
            {
                rsi = 1;
                char var_18_2 = 1;
            }
            else
            {
                data_14002a0c0 = 1;
                
                if (sub_14000ad4c(&data_140026928, &data_140026960))
                    return 0xff;
                
                sub_14000ad14(&data_140026908, &data_140026920);
                data_14002a0c0 = 2;
            }
            
            rcx_1 = arg1;
            __scrt_release_startup_lock(rcx_1);
            
            if (data_14002a128 && __scrt_is_nonwritable_in_current_image(&data_14002a128))
                data_14002a128(0, 2, 0);
            
            if (data_14002a130 && __scrt_is_nonwritable_in_current_image(&data_14002a130))
                sub_140009de8(data_14002a130);
            
            _get_initial_narrow_environment();
            data_14002a178;
            data_14002a170;
            main();
            arg1 = 0;
            
            if (sub_1400019c0())
            {
                if (!rsi)
                    _cexit();
                
                __scrt_uninitialize_crt(1, 0);
                return 0;
            }
        }
    }
    
    exit(arg1);
    sub_140009dbc(arg1);
    /* tailcall */
    return _start();
}

int64_t _start()
{
    sub_1400018a0();
    int64_t rbx;
    /* tailcall */
    return sub_1400014d0(rbx);
}

uint64_t atexit(int64_t arg1)
{
    int64_t rax = _onexit(arg1);
    int32_t rax_1 = -(rax);
    return -((rax_1 - rax_1)) - 1;
}

int64_t _onexit(int64_t arg1)
{
    int32_t rax;
    
    if (*data_14002a0d8 != -1)
        rax = _register_onexit_function(&data_14002a0d8, arg1);
    else
        rax = sub_14000a608(arg1);
    
    if (!rax)
        return arg1;
    
    return 0;
}

uint64_t __scrt_is_nonwritable_in_current_image(int64_t arg1)
{
    struct Section_Header* const rdx_1 = &__section_headers;
    
    while (true)
    {
        struct Section_Header* const var_18_1 = rdx_1;
        
        if (rdx_1 == &data_1400002e8)
        {
            rdx_1 = nullptr;
            break;
        }
        
        uint64_t virtualAddress = rdx_1->virtualAddress;
        
        if (arg1 - &__dos_header >= virtualAddress
                && arg1 - &__dos_header < rdx_1->virtualSize + virtualAddress)
            break;
        
        rdx_1 = &rdx_1[1];
    }
    
    uint64_t result;
    
    if (!rdx_1)
        result = 0;
    else if (rdx_1->characteristics >= 0)
        result = 1;
    else
        result = 0;
    
    return result;
}

int64_t __scrt_acquire_startup_lock()
{
    int64_t result;
    
    if (!sub_140001eec())
    {
    label_14000177a:
        result = 0;
    }
    else
    {
        TEB* gsbase;
        void* StackBase = gsbase->NtTib.Self->NtTib.StackBase;
        
        do
        {
            result = 0;
            bool z_1;
            
            if (0 == data_14002a0c8)
            {
                data_14002a0c8 = StackBase;
                z_1 = true;
            }
            else
            {
                result = data_14002a0c8;
                z_1 = false;
            }
            
            if (z_1)
                goto label_14000177a;
        } while (StackBase != result);
        
        result = 1;
    }
    
    return result;
}

int64_t __scrt_release_startup_lock(char arg1)
{
    int64_t rbx;
    rbx = arg1;
    int32_t result = sub_140001eec();
    
    if (result && !rbx)
    {
        data_14002a0c8;
        data_14002a0c8 = 0;
    }
    
    return result;
}

int64_t __scrt_initialize_crt(int32_t arg1)
{
    if (!arg1)
        data_14002a0d0 = 1;
    
    int64_t xcr0;
    sub_140001c54(xcr0);
    
    if (__scrt_dllmain_crt_thread_attach())
    {
        if (sub_14000241c())
            return 1;
        
        __vcrt_uninitialize(0);
    }
    
    return 0;
}

int64_t __scrt_uninitialize_crt(char arg1, char arg2)
{
    int64_t rbx;
    rbx = arg1;
    
    if (!data_14002a0d0 || !arg2)
    {
        __acrt_uninitialize(arg1);
        __vcrt_uninitialize(rbx);
    }
    
    int64_t result;
    result = 1;
    return result;
}

int64_t __scrt_initialize_onexit_tables(int32_t arg1)
{
    int32_t result;
    
    if (data_14002a0d1)
        result = 1;
    else
    {
        if (arg1 > 1)
        {
            __scrt_fastfail(5);
            breakpoint();
        }
        
        if (!sub_140001eec() || arg1)
        {
            __builtin_memset(&data_14002a0d8, 0xff, 0x30);
            data_14002a0d1 = 1;
            result = 1;
        }
        else if (_initialize_onexit_table(&data_14002a0d8))
            result = 0;
        else if (!_initialize_onexit_table(&data_14002a0f0))
        {
            data_14002a0d1 = 1;
            result = 1;
        }
        else
            result = 0;
    }
    
    return result;
}

uint64_t sub_1400018a0()
{
    uint64_t __security_cookie_1 = __security_cookie;
    
    if (__security_cookie_1 == 0x2b992ddfa232)
    {
        FILETIME systemTimeAsFileTime;
        __builtin_memset(&systemTimeAsFileTime, 0, 8);
        GetSystemTimeAsFileTime(&systemTimeAsFileTime);
        int64_t rax;
        rax = systemTimeAsFileTime.dwLowDateTime;
        *rax[4] = systemTimeAsFileTime.dwHighDateTime;
        int64_t var_18 = rax;
        uint64_t rax_2 = GetCurrentThreadId();
        var_18 ^= rax_2;
        uint64_t rax_4 = GetCurrentProcessId();
        var_18 ^= rax_4;
        int64_t performanceCount;
        QueryPerformanceCounter(&performanceCount);
        __security_cookie_1 =
            (performanceCount << 0x20 ^ performanceCount ^ var_18 ^ &var_18) & 0xffffffffffff;
        
        if (__security_cookie_1 == 0x2b992ddfa232)
            __security_cookie_1 = 0x2b992ddfa233;
        
        __security_cookie = __security_cookie_1;
    }
    
    uint64_t result = ~__security_cookie_1;
    data_140029080 = result;
    return result;
}

int64_t sub_140001950() __pure
{
    return 0;
}

int64_t sub_140001954() __pure
{
    return 1;
}

int64_t sub_14000195c() __pure
{
    return 0x4000;
}

int64_t sub_140001964()
{
    /* tailcall */
    return InitializeSListHead(&data_14002a110);
}

int64_t sub_140001974() __pure
{
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_140001978() __pure
{
    return;
}

int64_t __scrt_initialize_default_local_stdio_options()
{
    data_140029b40 |= 0x24;
    data_140029b48 |= 2;
    return &data_140029b48;
}

int64_t sub_140001998()
{
    int64_t result;
    result = !data_14002908c;
    return result;
}

int64_t sub_1400019a4() __pure
{
    return &data_14002a128;
}

int64_t sub_1400019ac() __pure
{
    return &data_14002a130;
}

int64_t sub_1400019b4()
{
    data_14002a138 = 0;
}

HMODULE sub_1400019c0()
{
    HMODULE result = GetModuleHandleW(nullptr);
    int64_t result_1;
    
    if (result && result->unused == 0x5a4d)
        result_1 = result;
    
    if (!result || result->unused != 0x5a4d || *(result_1 + result) != 0x4550
            || *(result_1 + result + 0x18) != 0x20b || *(result_1 + result + 0x84) <= 0xe)
        result = 0;
    else
        result = *(result_1 + result + 0xf8);
    
    return result;
}

int64_t j_sub_140001950()
{
    /* tailcall */
    return sub_140001950();
}

int64_t sub_140001a1c()
{
    /* tailcall */
    return SetUnhandledExceptionFilter(sub_140001b78);
}

int32_t __scrt_fastfail(int32_t arg1)
{
    if (IsProcessorFeaturePresent(PF_FASTFAIL_AVAILABLE))
        trap(0xd);
    
    sub_1400019b4();
    void ContextRecord;
    sub_14001c640(&ContextRecord, 0, 0x4d0);
    RtlCaptureContext(&ContextRecord);
    uint64_t ControlPc;
    uint64_t ImageBase;
    IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry =
        RtlLookupFunctionEntry(ControlPc, &ImageBase, nullptr);
    uint64_t EstablisherFrame;
    void HandlerData;
    
    if (FunctionEntry)
        RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, ControlPc, FunctionEntry, &ContextRecord, 
            &HandlerData, &EstablisherFrame, nullptr);
    void* const __return_addr_2 = __return_addr;
    int64_t __saved_rbx;
    int64_t* var_440 = &__saved_rbx;
    int32_t var_578;
    sub_14001c640(&var_578, 0, 0x98);
    void* const __return_addr_1 = __return_addr;
    var_578 = 0x40000015;
    int32_t var_574 = 1;
    BOOL rax_3 = IsDebuggerPresent();
    EXCEPTION_POINTERS ExceptionInfo;
    ExceptionInfo.ExceptionRecord = &var_578;
    ExceptionInfo.ContextRecord = &ContextRecord;
    SetUnhandledExceptionFilter(nullptr);
    int32_t result = UnhandledExceptionFilter(&ExceptionInfo);
    
    if (!result && rax_3 != 1)
        sub_1400019b4();
    
    return result;
}

int64_t sub_140001b78(int64_t* arg1)
{
    int32_t* rbx = *arg1;
    
    if (*rbx == 0xe06d7363 && rbx[6] == 4)
    {
        int32_t rdx_1 = rbx[8];
        
        if (rdx_1 == 0x19930520 || rdx_1 - 0x19930521 <= 1 || rdx_1 == 0x1994000)
        {
            *__current_exception() = rbx;
            *__current_exception_context() = arg1[1];
            sub_14000b220();
            /* no return */
        }
    }
    
    return 0;
}

void _RTC_Initialize()
{
    for (void* const i = &data_140027470; i < &data_140027470; i += 8)
    {
        int64_t rax = *i;
        
        if (rax)
            rax();
    }
}

void _RTC_Terminate()
{
    for (void* const i = &data_140027480; i < &data_140027480; i += 8)
    {
        int64_t rax = *i;
        
        if (rax)
            rax();
    }
}

int64_t sub_140001c54(int64_t arg1 @ xcr0)
{
    int32_t temp0;
    int32_t temp1;
    int32_t temp2;
    int32_t temp3;
    temp0 = __cpuid(0, 0);
    int32_t temp0_1;
    int32_t temp1_1;
    int32_t temp2_1;
    int32_t temp3_1;
    temp0_1 = __cpuid(1, 0);
    int32_t rax_2;
    uint64_t rax_3;
    
    if (!((temp3 ^ 0x49656e69) | (temp2 ^ 0x6c65746e) | (temp1 ^ 0x756e6547)))
    {
        rax_2 = temp0_1 & 0xfff3ff0;
        data_1400290a0 = 0x8000;
        data_1400290a8 = -1;
        
        if (rax_2 != 0x106c0 && rax_2 != 0x20660 && rax_2 != 0x20670)
            rax_3 = rax_2 - 0x30650;
    }
    
    int32_t r8_1;
    
    if ((temp3 ^ 0x49656e69) | (temp2 ^ 0x6c65746e) | (temp1 ^ 0x756e6547) || (rax_2 != 0x106c0
            && rax_2 != 0x20660 && rax_2 != 0x20670
            && (rax_3 > 0x20 || !TEST_BITQ(0x100010001, rax_3))))
        r8_1 = data_14002a140;
    else
    {
        r8_1 = data_14002a140 | 1;
        data_14002a140 = r8_1;
    }
    
    int32_t r9 = 0;
    int32_t rsi = 0;
    int32_t r10 = 0;
    int32_t r11 = 0;
    
    if (temp0 >= 7)
    {
        int32_t temp0_2;
        int32_t temp1_2;
        int32_t temp2_2;
        int32_t temp3_2;
        temp0_2 = __cpuid(7, 0);
        rsi = temp3_2;
        r9 = temp1_2;
        
        if (TEST_BITD(temp1_2, 9))
            data_14002a140 = r8_1 | 2;
        
        if (temp0_2 >= 1)
        {
            int32_t temp0_3;
            int32_t temp1_3;
            int32_t temp2_3;
            int32_t temp3_3;
            temp0_3 = __cpuid(7, 1);
            r10 = temp3_3;
        }
        
        if (temp0 >= 0x24)
        {
            int32_t temp0_4;
            int32_t temp1_4;
            int32_t temp2_4;
            int32_t temp3_4;
            temp0_4 = __cpuid(0x24, 0);
            r11 = temp1_4;
        }
    }
    
    int64_t rax_8 = data_140029090 & 0xfffffffffffffffe;
    data_140029098 = 1;
    data_14002909c = 2;
    data_140029090 = rax_8;
    
    if (TEST_BITD(temp2_1, 0x14))
    {
        data_140029098 = 2;
        data_140029090 = rax_8 & 0xffffffffffffffef;
        data_14002909c = 6;
    }
    
    if (TEST_BITD(temp2_1, 0x1b))
    {
        int32_t temp0_5;
        int32_t temp1_5;
        temp0_5 = _xgetbv(0, arg1);
        uint64_t rdx_10 = temp0_5 << 0x20 | temp1_5;
        
        if (TEST_BITD(temp2_1, 0x1c) && (rdx_10 & 6) == 6)
        {
            int32_t rax_13 = data_14002909c | 8;
            data_140029098 = 3;
            data_14002909c = rax_13;
            int64_t rax_16;
            
            if (!(r9 & 0x20))
                rax_16 = data_140029090;
            else
            {
                data_140029098 = 5;
                data_14002909c = rax_13 | 0x20;
                rax_16 = data_140029090 & 0xfffffffffffffffd;
                data_140029090 = rax_16;
                
                if ((r9 & 0xd0030000) == 0xd0030000)
                {
                    if ((rdx_10 & 0xe0) != 0xe0)
                        rax_16 = data_140029090;
                    else
                    {
                        int64_t rax_18 = data_140029090;
                        data_14002909c |= 0x40;
                        rax_16 = rax_18 & 0xffffffffffffffdb;
                        data_140029098 = 6;
                        data_140029090 = rax_16;
                    }
                }
            }
            
            if (TEST_BITD(rsi, 0x17))
                data_140029090 = rax_16 & 0xfffffffffeffffff;
            
            if (TEST_BITD(r10, 0x13) && (rdx_10 & 0xe0) == 0xe0)
            {
                int32_t rax_22 = r11 & 0x400ff;
                data_14002a13c = rax_22;
                int64_t rcx_11 = ~((r11 >> 0x10 & 6) | 0x1000029) & data_140029090;
                data_140029090 = rcx_11;
                
                if (rax_22 > 1)
                    data_140029090 = rcx_11 & 0xffffffffffffffbf;
            }
        }
        
        if (TEST_BITD(r10, 0x15) && TEST_BITQ(rdx_10, 0x13))
            data_140029090 &= 0xffffffffffffff7f;
    }
    
    return 0;
}

int64_t sub_140001eec()
{
    int64_t result;
    result = data_14002a144;
    return result;
}

void _guard_check_icall(void (* arg1)()) __pure
{
    return;
}

int64_t __InternalCxxFrameHandler(int32_t* arg1, int64_t arg2, void* arg3, int64_t* arg4)
{
    __except_validate_context_record(arg3);
    int64_t r12 = arg4[1];
    int32_t* rbx = arg4[7];
    int64_t r14_1 = *arg4 - r12;
    int32_t i = arg4[9];
    
    if (arg1[1] & 0x66)
    {
        int64_t rbp_2 = arg4[4] - r12;
        
        while (true)
        {
            int32_t r8_4 = *rbx;
            
            if (i >= r8_4)
                break;
            
            uint64_t r9_2 = i * 2;
            
            if (r14_1 >= rbx[r9_2 * 2 + 1] && r14_1 < rbx[r9_2 * 2 + 2])
            {
                if (arg1[1] & 0x20)
                {
                    int32_t rdx_4 = 0;
                    
                    if (r8_4)
                    {
                        do
                        {
                            uint64_t rcx_9 = rdx_4 * 2;
                            
                            if (rbp_2 >= rbx[rcx_9 * 2 + 1] && rbp_2 < rbx[rcx_9 * 2 + 2]
                                    && rbx[rcx_9 * 2 + 4] == rbx[r9_2 * 2 + 4]
                                    && rbx[rcx_9 * 2 + 3] == rbx[r9_2 * 2 + 3])
                                break;
                            
                            rdx_4 += 1;
                        } while (rdx_4 < r8_4);
                    }
                    
                    if (rdx_4 != *rbx)
                        break;
                }
                
                int64_t rax_22 = (i + 1) * 2;
                
                if (!rbx[rax_22 * 2])
                {
                    arg4[9] = i + 1;
                    uint64_t rcx_11;
                    rcx_11 = 1;
                    (rbx[i * 4 + 3] + r12)(rcx_11, arg2);
                }
                else if (rbp_2 == rbx[rax_22 * 2] && arg1[1] & 0x20)
                    break;
            }
            
            i += 1;
        }
    }
    else
    {
        int32_t* var_38 = arg1;
        void* var_30_1 = arg3;
        
        for (; i < *rbx; i += 1)
        {
            uint64_t rcx_2 = i * 2;
            uint64_t i_1 = i;
            
            if (r14_1 >= rbx[rcx_2 * 2 + 1] && r14_1 < rbx[rcx_2 * 2 + 2] && rbx[rcx_2 * 2 + 4])
            {
                if (rbx[rcx_2 * 2 + 3] == 1)
                {
                label_140001fbf:
                    
                    if (*arg1 == 0xe06d7363 && sub_14000b2c0(&data_14001e1a0))
                        sub_140002128(arg1);
                    
                    rbx[(i_1 + 1) * 4];
                    sub_14000b340();
                    RtlUnwindEx(arg2, rbx[(i_1 + 1) * 4] + r12, arg1, *arg1, arg4[5], arg4[8]);
                }
                else
                {
                    int32_t rax_5 = (rbx[rcx_2 * 2 + 3] + r12)(&var_38, arg2);
                    
                    if (rax_5 < 0)
                        return 0;
                    
                    if (rax_5 > 0)
                        goto label_140001fbf;
                }
            }
        }
    }
    
    return 1;
}

void sub_140002128(int32_t* arg1)
{
    if (!arg1)
        return;
    
    char rdx;
    char arg_10 = rdx;
    
    if (*arg1 != 0xe06d7363 || arg1[6] != 4)
        return;
    
    int32_t rax_1 = arg1[8];
    
    if (rax_1 != 0x19930520 && rax_1 - 0x19930521 > 1)
        return;
    
    uint64_t rax = *(arg1 + 0x30);
    
    if (!rax)
        return;
    
    int64_t rdx_1 = *(rax + 4);
    
    if (rdx_1)
        sub_1400021a8(*(arg1 + 0x28), rdx_1 + *(arg1 + 0x38));
    else if (*rax & 0x10)
    {
        int64_t* rcx_1 = **(arg1 + 0x28);
        
        if (rcx_1)
            (*(*rcx_1 + 0x10))();
    }
}

void sub_14000219c() __noreturn
{
    sub_14000b220();
    /* no return */
}

int64_t sub_1400021a8(int64_t, int64_t arg2)
{
    /* jump -> arg2 */
}

uint64_t _IsExceptionObjectToBeDestroyed(int64_t arg1)
{
    int64_t* rdx = *(__vcrt_getptd() + 0x58);
    
    while (true)
    {
        if (!rdx)
            return rdx + 1;
        
        if (*rdx == arg1)
            break;
        
        rdx = rdx[1];
    }
    
    return 0;
}

void* __current_exception()
{
    return __vcrt_getptd() + 0x20;
}

void* __current_exception_context()
{
    return __vcrt_getptd() + 0x28;
}

int64_t __AdjustPointer(int64_t arg1, int32_t* arg2)
{
    int64_t result = *arg2 + arg1;
    
    if (arg2[1] < 0)
        return result;
    
    int64_t r9_1 = arg2[1];
    return result + *(arg2[2] + *(r9_1 + arg1)) + r9_1;
}

int64_t sub_140002228(int64_t* arg1)
{
    int32_t* rdi = *arg1;
    
    if (*rdi == 0xe0434352 || *rdi == 0xe0434f4d)
    {
        if (*(__vcrt_getptd() + 0x30) > 0)
        {
            void* rax_2 = __vcrt_getptd();
            *(rax_2 + 0x30) -= 1;
        }
    }
    else if (*rdi == 0xe06d7363)
    {
        *(__vcrt_getptd() + 0x20) = rdi;
        *(__vcrt_getptd() + 0x28) = arg1[1];
        sub_14000b220();
        /* no return */
    }
    
    return 0;
}

int64_t sub_140002290(void* arg1, int64_t arg2)
{
    if (arg1 != arg2)
        /* tailcall */
        return strcmp(arg1 + 9, arg2 + 9);
    
    return 0;
}

int64_t __scrt_dllmain_crt_thread_attach()
{
    if (__vcrt_initialize_locks())
    {
        if (__vcrt_initialize_ptd())
            return 1;
        
        __vcrt_uninitialize_locks();
    }
    
    return 0;
}

int64_t __vcrt_uninitialize(char arg1)
{
    if (!arg1)
    {
        sub_14000b44c();
        __vcrt_uninitialize_locks();
    }
    
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_1400022f0()
{
    data_14002ab58 = &data_140029770;
    wchar16 const (** rax)[0x21];
    rax = 1;
    return &data_140029701;
}

int64_t initialize_c()
{
    _initialize_onexit_table(&data_14002a2c8);
    _initialize_onexit_table(&data_14002a2e0);
    int64_t result;
    result = 1;
    return result;
}

int64_t uninitialize_environment()
{
    __dcrt_uninitialize_environments_nolock();
    int64_t result;
    result = 1;
    return result;
}

int64_t initialize_pointers()
{
    uint64_t __security_cookie_1 = __security_cookie;
    sub_14000d43c(__security_cookie_1);
    sub_14000d690(__security_cookie_1);
    _initp_misc_winsig(__security_cookie_1);
    sub_140002680(__security_cookie_1);
    sub_140009e24(__security_cookie_1);
    int64_t result;
    result = 1;
    return result;
}

int64_t uninitialize_vcruntime()
{
    /* tailcall */
    return __vcrt_uninitialize(0);
}

int64_t uninitialize_allocated_memory()
{
    int32_t* rcx = data_14002ab18;
    int32_t result = *rcx;
    *rcx -= 1;
    
    if (result == 1)
    {
        int64_t rcx_1 = data_14002ab18;
        
        if (rcx_1 != &data_140029230)
        {
            _free_base(rcx_1);
            data_14002ab18 = &data_140029230;
        }
    }
    
    result = 1;
    return result;
}

int64_t uninitialize_allocated_io_buffers()
{
    _free_base(data_14002ab60);
    int64_t rcx_1 = data_14002ab68;
    data_14002ab60 = 0;
    _free_base(rcx_1);
    int64_t rcx_2 = data_14002a178;
    data_14002ab68 = 0;
    _free_base(rcx_2);
    int64_t rcx_3 = data_14002a180;
    data_14002a178 = 0;
    _free_base(rcx_3);
    data_14002a180 = 0;
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_14000241c()
{
    /* tailcall */
    return sub_14000d1a8(&data_14001e1b0, &data_14001e2b0);
}

int64_t __acrt_uninitialize(char arg1)
{
    if (!arg1)
        /* tailcall */
        return sub_14000d228(&data_14001e1b0, &data_14001e2b0);
    
    if (data_14002a158)
        _flushall();
    
    int64_t result;
    result = 1;
    return result;
}

void* sub_140002468(int32_t arg1) __pure
{
    return arg1 * 0x58 + &data_1400290b0;
}

int64_t sub_14000247c(void* arg1)
{
    /* tailcall */
    return EnterCriticalSection(arg1 + 0x30);
}

int64_t sub_140002488(void* arg1)
{
    /* tailcall */
    return LeaveCriticalSection(arg1 + 0x30);
}

int64_t __acrt_initialize_stdio()
{
    int32_t rax = data_14002a150;
    void** rbx = nullptr;
    int64_t i_1 = 3;
    
    if (!rax)
    {
        rax = 0x200;
        data_14002a150 = rax;
    }
    else if (rax < 3)
    {
        rax = 3;
        data_14002a150 = rax;
    }
    
    data_14002a158 = _calloc_base(rax, 8);
    _free_base(0);
    
    if (!data_14002a158)
    {
        data_14002a150 = 3;
        data_14002a158 = _calloc_base(3, 8);
        _free_base(0);
        
        if (!data_14002a158)
            return 0xffffffff;
    }
    
    int64_t rbp_1 = 0;
    void* rsi_1 = &data_1400290c8;
    void* r14_1 = &data_1400290b0;
    int64_t i;
    
    do
    {
        InitializeCriticalSectionEx(r14_1 + 0x30, 0xfa0, 0);
        *(rbx + data_14002a158) = r14_1;
        
        if (*((&data_14002a700)[rbp_1 >> 6] + (rbp_1 & 0x3f) * 0x48 + 0x28) + 2 <= 2)
            *rsi_1 = 0xfffffffe;
        
        rbp_1 += 1;
        r14_1 += 0x58;
        rbx = &rbx[1];
        rsi_1 += 0x58;
        i = i_1;
        i_1 -= 1;
    } while (i != 1);
    return 0;
}

int64_t __acrt_uninitialize_stdio()
{
    _flushall();
    sub_14000e0b8();
    
    for (int64_t* i = nullptr; i != 0x18; i = &i[1])
    {
        __acrt_stdio_free_buffer_nolock(*(i + data_14002a158));
        DeleteCriticalSection(*(i + data_14002a158) + 0x30);
    }
    
    int64_t result = _free_base(data_14002a158);
    data_14002a158 = 0;
    return result;
}

int64_t sub_140002610() __pure
{
    return &data_14002a170;
}

int64_t sub_140002618() __pure
{
    return &data_14002a178;
}

PWSTR __acrt_initialize_command_line()
{
    data_14002a188 = GetCommandLineA();
    data_14002a190 = GetCommandLineW();
    PWSTR result;
    result = 1;
    return result;
}

int64_t sub_140002648() __pure
{
    return &data_14002a198;
}

int64_t sub_140002650(int64_t arg1)
{
    uint64_t __security_cookie_1 = __security_cookie;
    char result = __security_cookie_1 & 0x3f;
    data_14002a1a0 = RORQ(arg1, 0x40 - result) ^ __security_cookie_1;
    return result;
}

int64_t sub_140002680(int64_t arg1)
{
    data_14002a1a0 = arg1;
}

uint64_t __acrt_has_user_matherr()
{
    uint64_t __security_cookie_1 = __security_cookie;
    __security_cookie_1 = RORQ(data_14002a1a0 ^ __security_cookie_1, __security_cookie_1 & 0x3f);
    return __security_cookie_1;
}

int64_t sub_1400026b0()
{
    uint64_t __security_cookie_1 = __security_cookie;
    
    if (RORQ(data_14002a1a0 ^ __security_cookie_1, __security_cookie_1 & 0x3f))
        /* tailcall */
        return sub_14001c600();
    
    return 0;
}

uint64_t __stdio_common_vfprintf(int64_t arg1, int64_t arg2, int64_t arg3, int128_t* arg4)
{
    void* var_98 = nullptr;
    char var_88 = 0;
    char var_70 = 0;
    char var_68 = 0;
    char var_60 = 0;
    int128_t var_80_1;
    
    if (arg4)
    {
        var_70 = 1;
        var_80_1 = *arg4;
    }
    else if (!data_14002a1b8)
    {
        var_70 = 1;
        var_80_1 = *data_1400298c8;
    }
    int64_t arg_28;
    int64_t arg_20 = arg_28;
    int64_t arg_18 = arg3;
    int64_t arg_8 = arg2;
    int64_t arg_10 = arg1;
    int32_t var_6c;
    int32_t rdi;
    
    if (arg2 && arg3)
    {
        int64_t var_58 = arg2;
        int64_t* var_48 = &arg_8;
        int64_t var_50 = arg2;
        void** var_40_1 = &var_98;
        int64_t* var_38_1 = &arg_10;
        int64_t* var_30_1 = &arg_18;
        int64_t* var_28_1 = &arg_20;
        rdi = __crt_seh_guarded_call<class <lambda_8e8668af99809de511100fe94da1a6bd>,class <lambda_5ea5c948f63ef1db566fd27aadf3ca11>& __ptr64,class <lambda_ab2921ee12094a5a5396e2d3d37ffb58>,int32_t>::operator()<class <lambda_8e8668af99809de511100fe94da1a6bd>,class <lambda_5ea5c948f63ef1db566fd27aadf3ca11>& __ptr64,class <lambda_ab2921ee12094a5a5396e2d3d37ffb58> >(
            &arg_28, &var_50, &var_48, &var_58);
    }
    else
    {
        var_68 = 1;
        var_6c = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, 0, &var_98);
        rdi = -1;
    }
    
    if (var_70 == 2)
    {
        void* rcx_1 = var_98;
        *(rcx_1 + 0x3a8) &= 0xfffffffd;
    }
    
    if (var_68)
        *(sub_1400028a0(&var_98) + 0x20) = var_6c;
    
    int32_t var_64;
    
    if (var_60)
        *(sub_1400028a0(&var_98) + 0x24) = var_64;
    return rdi;
}

uint64_t __acrt_stdio_char_traits<char>::validate_stream_is_ansi_if_required(void* arg1)
{
    void* rdx_3;
    int64_t r10_1;
    
    if (!((*(arg1 + 0x14) >> 0xc) & 1))
    {
        int64_t r9_1 = _fileno(arg1);
        r10_1 = &data_1400291e0;
        
        if (r9_1 + 2 <= 1)
            rdx_3 = &data_1400291e0;
        else
            rdx_3 = (&data_14002a700)[r9_1 >> 6] + (r9_1 & 0x3f) * 0x48;
        
        if (!*(rdx_3 + 0x39) && r9_1 + 2 > 1)
            r10_1 = (&data_14002a700)[r9_1 >> 6] + (r9_1 & 0x3f) * 0x48;
    }
    
    uint64_t result;
    
    if ((*(arg1 + 0x14) >> 0xc) & 1 || (!*(rdx_3 + 0x39) && !(*(r10_1 + 0x3d) & 1)))
        result = 1;
    else
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        result = 0;
    }
    
    return result;
}

int64_t sub_1400028a0(int64_t* arg1)
{
    if (!*arg1)
    {
        enum WIN32_ERROR dwErrCode_2 = GetLastError();
        bool cond:1_1 = arg1[2];
        enum WIN32_ERROR dwErrCode_1 = dwErrCode_2;
        int64_t rdx_1;
        
        if (cond:1_1)
            rdx_1 = arg1[1];
        else
        {
            rdx_1 = 0;
            arg1[2] = 1;
            arg1[1] = 0;
        }
        
        void* rax_1 = sub_14000bef0(&dwErrCode_1, rdx_1);
        enum WIN32_ERROR dwErrCode = dwErrCode_1;
        *arg1 = rax_1;
        SetLastError(dwErrCode);
        
        if (!rax_1)
        {
            abort();
            /* no return */
        }
    }
    
    return *arg1;
}

int64_t __crt_cached_ptd_host::update_locale_slow(int64_t* arg1)
{
    void* rax = sub_1400028a0(arg1);
    arg1[3] = *(rax + 0x90);
    arg1[4] = *(rax + 0x88);
    __acrt_update_locale_info_explicit(rax, &arg1[3], arg1[1]);
    __acrt_update_multibyte_info_explicit(rax, &arg1[4], arg1[1]);
    int32_t result = *(rax + 0x3a8);
    
    if (!(result & 2))
    {
        result |= 2;
        *(rax + 0x3a8) = result;
        arg1[5] = 2;
    }
    
    return result;
}

char* __crt_stdio_output::crop_zeroes(char* arg1, int64_t* arg2)
{
    char r9 = ***(*arg2 + 0xf8);
    char* result;
    result = *arg1;
    
    if (result)
    {
        int64_t* rdx;
        rdx = result;
        
        do
        {
            result = rdx;
            
            if (rdx == r9)
                break;
            
            arg1 = &arg1[1];
            result = *arg1;
            rdx = result;
        } while (result);
    }
    
    void* rcx = &arg1[1];
    
    if (result)
    {
        while (true)
        {
            result = *rcx;
            
            if (!result)
                break;
            
            result -= 0x45;
            
            if (!(result & 0xdf))
                break;
            
            rcx += 1;
        }
        
        void* r8_1 = rcx;
        
        do
        {
            rcx -= 1;
            result = *rcx;
        } while (result == 0x30);
        
        void* rdx_1 = rcx - 1;
        
        if (result != r9)
            rdx_1 = rcx;
        
        char* r8_2 = r8_1 - rdx_1;
        
        do
        {
            result = *(r8_2 + rdx_1);
            rdx_1 += 1;
            *rdx_1 = result;
        } while (result);
    }
    
    return result;
}

void sub_1400029f4(uint64_t* arg1, char* arg2, int32_t arg3, int32_t* arg4, int64_t* arg5)
{
    char* r14 = arg2;
    void* rbp_1 = &arg2[arg3];
    int64_t rbx = *(arg5 + 0x2c);
    
    if (arg2 != rbp_1)
    {
        do
        {
            if (!(*(*arg1 + 0x14) >> 0xc & 1) || *(*arg1 + 8))
            {
                if (_fputc_nolock_internal(*r14, *arg1, arg5) != 0xffffffff)
                    *arg4 += 1;
                else
                {
                    if (!arg5[6] || *(arg5 + 0x2c) != 0x2a)
                    {
                        *arg4 = 0xffffffff;
                        break;
                    }
                    
                    if (!(*(*arg1 + 0x14) >> 0xc & 1) || *(*arg1 + 8))
                    {
                        if (_fputc_nolock_internal(0x3f, *arg1, arg5) == 0xffffffff)
                            *arg4 = 0xffffffff;
                        else
                            *arg4 += 1;
                    }
                    else
                        *arg4 += 1;
                }
            }
            else
                *arg4 += 1;
            
            r14 = &r14[1];
        } while (r14 != rbp_1);
    }
    
    *(arg5 + 0x2c) = rbx;
}

uint64_t sub_140002ac4(int64_t* arg1)
{
    int64_t* rax = arg1[1];
    void* rcx = arg1[0x8c];
    
    if (rcx)
    {
        char rax_1;
        int64_t r8_1;
        rax_1 = __acrt_stdio_char_traits<char>::validate_stream_is_ansi_if_required(rcx);
        
        if (rax_1)
        {
            void* rcx_1 = arg1[2];
            
            if (rcx_1)
            {
                int32_t rax_3 = arg1[0x8d] + 1;
                arg1[0x8d] = rax_3;
                
                if (rax_3 == 2)
                    return arg1[4];
                
                while (true)
                {
                    arg1[9] = 0;
                    *(arg1 + 0x24) = 0;
                    r8_1 = *rcx_1;
                    rcx_1 += 1;
                    
                    while (true)
                    {
                        arg1[2] = rcx_1;
                        *(arg1 + 0x39) = r8_1;
                        
                        if (!r8_1 || arg1[4] < 0)
                        {
                            arg1[0x8d] += 1;
                            
                            if (arg1[0x8d] != 2)
                                break;
                            
                            return arg1[4];
                        }
                        
                        if (r8_1 - 0x20 > 0x5a)
                            rcx_1 = 0;
                        else
                            rcx_1 = *((((r8_1 - 0x20) & 0x7f) << 1) + 0x14001e2b1);
                        
                        uint32_t rax_9 =
                            *(&data_14001e2b0 + (((*(arg1 + 0x24) + (rcx_1 << 3)) & 0x7f) << 1));
                        *(arg1 + 0x24) = rax_9;
                        
                        if (rax_9 < 8)
                        {
                            if (rax_9)
                            {
                                if (rax_9 == 1)
                                {
                                    arg1[5] = 0;
                                    arg1[7] = 0;
                                    arg1[6] = 0xffffffff;
                                    *(arg1 + 0x34) = 0;
                                    *(arg1 + 0x4c) = 0;
                                }
                                else if (rax_9 == 2)
                                {
                                    if (r8_1 == 0x20)
                                        arg1[5] |= 2;
                                    else if (r8_1 == 0x23)
                                        arg1[5] |= 0x20;
                                    else if (r8_1 == 0x2b)
                                        arg1[5] |= 1;
                                    else if (r8_1 == 0x2d)
                                        arg1[5] |= 4;
                                    else if (r8_1 == 0x30)
                                        arg1[5] |= 8;
                                }
                                else
                                {
                                    int32_t rax_10;
                                    void* rdx_3;
                                    
                                    if (rax_9 == 3)
                                    {
                                        if (r8_1 == 0x2a)
                                        {
                                            int32_t* rcx_16 = arg1[3];
                                            arg1[3] = &rcx_16[2];
                                            rax_10 = *rcx_16;
                                            *(arg1 + 0x2c) = rax_10;
                                            
                                            if (rax_10 < 0)
                                            {
                                                arg1[5] |= 4;
                                                *(arg1 + 0x2c) = -(rax_10);
                                            }
                                            
                                        label_140002c55:
                                            rax_10 = 1;
                                            goto label_140002c57;
                                        }
                                        
                                        rdx_3 = arg1 + 0x2c;
                                    label_140002c02:
                                        rax_10 = sub_140002e48(arg1, rdx_3);
                                    label_140002c57:
                                        
                                        if (!rax_10)
                                            return 0xffffffff;
                                    }
                                    else
                                    {
                                        if (rax_9 != 4)
                                        {
                                            if (rax_9 != 5)
                                            {
                                                if (rax_9 == 6)
                                                    rax_10 = sub_140002ed8(arg1);
                                                else
                                                {
                                                    if (rax_9 != 7)
                                                        return 0xffffffff;
                                                    
                                                    rax_10 = sub_140003060(arg1);
                                                }
                                                
                                                goto label_140002c57;
                                            }
                                            
                                            if (r8_1 != 0x2a)
                                            {
                                                rdx_3 = &arg1[6];
                                                goto label_140002c02;
                                            }
                                            
                                            int32_t* rcx_15 = arg1[3];
                                            arg1[3] = &rcx_15[2];
                                            rax_10 = *rcx_15;
                                            arg1[6] = rax_10;
                                            
                                            if (rax_10 < 0)
                                                arg1[6] = 0xffffffff;
                                            
                                            goto label_140002c55;
                                        }
                                        
                                        arg1[6] = 0;
                                    }
                                }
                                
                                goto label_140002db1;
                            }
                            
                            int64_t* rdi_1 = arg1[1];
                            *(arg1 + 0x4c) = 0;
                            
                            if (!rdi_1[5])
                                __crt_cached_ptd_host::update_locale_slow(rdi_1);
                            
                            r8_1 = *(arg1 + 0x39);
                            
                            if (r8_1 < 0xffffffff || !(*(*rdi_1[3] + (r8_1 << 1)) & 0x8000))
                            {
                            label_140002d90:
                                int32_t rax_22;
                                
                                if (!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                    rax_22 = _fputc_nolock_internal(r8_1, arg1[0x8c], arg1[1]);
                                
                                if ((*(arg1[0x8c] + 0x14) >> 0xc & 1 && !*(arg1[0x8c] + 8))
                                    || rax_22 != 0xffffffff)
                                {
                                    arg1[4] += 1;
                                    goto label_140002db1;
                                }
                                
                                arg1[4] = 0xffffffff;
                            label_140002db1:
                                char* rax_23 = arg1[2];
                                r8_1 = *rax_23;
                                rcx_1 = &rax_23[1];
                                continue;
                            }
                            else
                            {
                                int32_t rax_17;
                                
                                if (!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                    rax_17 = _fputc_nolock_internal(r8_1, arg1[0x8c], arg1[1]);
                                
                                if ((!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                        && rax_17 == 0xffffffff)
                                    arg1[4] = 0xffffffff;
                                else
                                    arg1[4] += 1;
                                
                                char* rax_18 = arg1[2];
                                r8_1 = *rax_18;
                                arg1[2] = &rax_18[1];
                                *(arg1 + 0x39) = r8_1;
                                
                                if (r8_1)
                                    goto label_140002d90;
                            }
                            
                            void* rax_24 = arg1[1];
                            *(rax_24 + 0x30) = 1;
                            *(rax_24 + 0x2c) = 0x16;
                            _invalid_parameter_internal(0, 0, 0, 0, 0, arg1[1]);
                        }
                        
                        void* rax_26 = arg1[1];
                        *(rax_26 + 0x30) = 1;
                        *(rax_26 + 0x2c) = 0x16;
                        rax = arg1[1];
                        goto label_140002e27;
                    }
                }
            }
            else
            {
                void* rcx_2 = arg1[1];
                *(rcx_2 + 0x30) = 1;
                *(rcx_2 + 0x2c) = 0x16;
            }
            
            _invalid_parameter_internal(0, 0, 0, 0, 0, arg1[1]);
        }
    }
    else
    {
        rax[6] = 1;
        *(rax + 0x2c) = 0x16;
    label_140002e27:
        _invalid_parameter_internal(0, 0, 0, 0, 0, rax);
    }
    
    return 0xffffffff;
}

void* sub_140002e48(void* arg1, int32_t* arg2)
{
    int64_t* rbp = *(arg1 + 8);
    void* result_2 = *(arg1 + 0x10) - 1;
    void* result_1;
    int64_t* var_10 = &result_1;
    int64_t rbx = *(rbp + 0x2c);
    result_1 = result_2;
    void* result_3 = result_2;
    *arg2 = sub_1400042a8(rbp, &result_3, 0xa, 1);
    char rcx_1 = 0;
    void* result = *(arg1 + 8);
    
    if (!*(result + 0x30) || *(result + 0x2c) != 0x22)
    {
        result = result_1;
        
        if (result >= *(arg1 + 0x10))
        {
            *(arg1 + 0x10) = result;
            rcx_1 = 1;
        }
    }
    
    result = rcx_1;
    *(rbp + 0x2c) = rbx;
    return result;
}

void* sub_140002ed8(char* arg1)
{
    void* result;
    result = arg1[0x39];
    
    if (result == 0x46)
    {
        if (!(*arg1 & 8))
        {
            arg1[0x24] = 7;
            /* tailcall */
            return sub_140003060(arg1);
        }
        
        result = 1;
    }
    else if (result != 0x4e)
    {
        if (*(arg1 + 0x34))
            goto label_140002f0a;
        
        switch (result)
        {
            case 0x49:
            {
                char* r8_2 = *(arg1 + 0x10);
                result = *r8_2;
                
                if (result == 0x33 && r8_2[1] == 0x32)
                {
                    *(arg1 + 0x34) = 0xa;
                    *(arg1 + 0x10) = &r8_2[2];
                }
                else if (result != 0x36)
                {
                    result -= 0x58;
                    
                    if (result <= 0x20 && TEST_BITQ(0x120821001, result))
                        *(arg1 + 0x34) = 9;
                }
                else if (r8_2[1] == 0x34)
                {
                    *(arg1 + 0x34) = 0xb;
                    *(arg1 + 0x10) = &r8_2[2];
                }
                break;
            }
            case 0x4c:
            {
                *(arg1 + 0x34) = 8;
                break;
            }
            case 0x54:
            {
                *(arg1 + 0x34) = 0xd;
                break;
            }
            case 0x68:
            {
                char* rax_5 = *(arg1 + 0x10);
                
                if (*rax_5 != 0x68)
                    result = 2;
                else
                {
                    *(arg1 + 0x10) = &rax_5[1];
                    result = 1;
                }
                
                *(arg1 + 0x34) = result;
                break;
            }
            case 0x6a:
            {
                *(arg1 + 0x34) = 5;
                break;
            }
            case 0x6c:
            {
                char* rax_3 = *(arg1 + 0x10);
                
                if (*rax_3 != 0x6c)
                    result = 3;
                else
                {
                    *(arg1 + 0x10) = &rax_3[1];
                    result = 4;
                }
                
                *(arg1 + 0x34) = result;
                break;
            }
            case 0x74:
            {
                *(arg1 + 0x34) = 7;
                break;
            }
            case 0x77:
            {
                *(arg1 + 0x34) = 0xc;
                break;
            }
            case 0x7a:
            {
                *(arg1 + 0x34) = 6;
                break;
            }
        }
        
        result = 1;
    }
    else if (*arg1 & 8)
        result = 1;
    else
    {
        arg1[0x24] = 8;
    label_140002f0a:
        void* rax_1 = *(arg1 + 8);
        *(rax_1 + 0x30) = 1;
        *(rax_1 + 0x2c) = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, 0, *(arg1 + 8));
        result = 0;
    }
    
    return result;
}

uint64_t sub_140003060(int64_t* arg1)
{
    int64_t var_48 = -2;
    void var_88;
    uint64_t var_38 = __security_cookie ^ &var_88;
    int32_t rcx = *(arg1 + 0x39);
    char rsi = 0x78;
    uint64_t result;
    int64_t* rcx_6;
    
    if (rcx > 0x64)
    {
        if (rcx > 0x6f)
        {
            char rdx;
            
            if (rcx == 0x70)
            {
                arg1[6] = 0x10;
                *(arg1 + 0x34) = 0xb;
            label_1400031a1:
                rdx = 1;
            label_1400031a6:
                result = sub_140003c5c(arg1, rdx);
                goto label_1400031ae;
            }
            
            if (rcx == 0x73)
            {
            label_14000318c:
                result = sub_1400036e8(arg1);
                goto label_1400031ae;
            }
            
            if (rcx == 0x75)
                goto label_14000314c;
            
            if (rcx == 0x78)
            {
                rdx = 0;
                goto label_1400031a6;
            }
            
            result = 0;
        }
        else
        {
            if (rcx == 0x6f)
            {
                int32_t rcx_14 = arg1[5];
                
                if (rcx_14 >> 5 & 1)
                    arg1[5] = rcx_14 | 0x80;
                
                result = sub_140003e60(arg1, 0);
                goto label_1400031ae;
            }
            
            if (rcx == 0x65 || rcx == 0x66 || rcx == 0x67)
            {
            label_1400030d7:
                result = sub_140003784(arg1);
                goto label_1400031ae;
            }
            
            if (rcx == 0x69)
                goto label_140003143;
            
            if (rcx == 0x6e)
            {
                result = sub_1400039e0(arg1);
                goto label_1400031ae;
            }
            
            result = 0;
        }
    }
    else if (rcx == 0x64)
    {
    label_140003143:
        arg1[5] |= 0x10;
    label_14000314c:
        result = sub_140004064(arg1, 0);
    label_1400031ae:
        
        if (result)
        {
            if (!arg1[7])
            {
                int16_t var_50 = 0;
                char var_4e_1 = 0;
                int64_t rdi_1 = 0;
                int32_t rdx_2 = arg1[5];
                
                if (rdx_2 >> 4 & 1)
                {
                    if (rdx_2 >> 6 & 1)
                    {
                        var_50 = 0x2d;
                        rdi_1 = 1;
                    }
                    else if (arg1[5] & 1)
                    {
                        var_50 = 0x2b;
                        rdi_1 = 1;
                    }
                    else if (rdx_2 >> 1 & 1)
                    {
                        var_50 = 0x20;
                        rdi_1 = 1;
                    }
                }
                
                rcx_6 = *(arg1 + 0x39);
                char r8_1;
                
                if (!(&rcx_6[-0xb] & 0xdf))
                    r8_1 = 1;
                
                if (&rcx_6[-0xb] & 0xdf || !(rdx_2 >> 5 & 1))
                    r8_1 = 0;
                
                if (r8_1 || !((rcx_6 - 0x41) & 0xdf))
                {
                    *(&var_50 + rdi_1) = 0x30;
                    
                    if (rcx_6 == 0x58 || rcx_6 == 0x41)
                        rsi = 0x58;
                    
                    *(&*var_50[1] + rdi_1) = rsi;
                    rdi_1 += 2;
                }
                
                int32_t r15_3 = *(arg1 + 0x2c) - arg1[9] - rdi_1;
                
                if (!(rdx_2 & 0xc))
                {
                    int64_t* r14_1 = arg1[1];
                    int32_t rsi_1 = 0;
                    
                    if (r15_3 > 0)
                    {
                        do
                        {
                            if ((!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                && _fputc_nolock_internal(0x20, arg1[0x8c], r14_1) == 0xffffffff)
                            {
                                arg1[4] = 0xffffffff;
                                break;
                            }
                            
                            int32_t rcx_21 = arg1[4];
                            arg1[4] = rcx_21 + 1;
                            
                            if (rcx_21 == 0xfffffffe)
                                break;
                            
                            rsi_1 += 1;
                        } while (rsi_1 < r15_3);
                    }
                }
                
                if (!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                    sub_1400029f4(&arg1[0x8c], &var_50, rdi_1, &arg1[4], arg1[1]);
                else
                    arg1[4] += rdi_1;
                
                int32_t rcx_25 = arg1[5];
                
                if (rcx_25 >> 3 & 1 && !(rcx_25 >> 2 & 1))
                {
                    int64_t* r12_1 = arg1[1];
                    int32_t rdi_2 = 0;
                    
                    if (r15_3 > 0)
                    {
                        do
                        {
                            if ((!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                && _fputc_nolock_internal(0x30, arg1[0x8c], r12_1) == 0xffffffff)
                            {
                                arg1[4] = 0xffffffff;
                                break;
                            }
                            
                            int32_t rcx_29 = arg1[4];
                            arg1[4] = rcx_29 + 1;
                            
                            if (rcx_29 == 0xfffffffe)
                                break;
                            
                            rdi_2 += 1;
                        } while (rdi_2 < r15_3);
                    }
                }
                
                if (!*(arg1 + 0x4c) || arg1[9] <= 0)
                {
                    int32_t r8_8 = arg1[9];
                    
                    if (!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                        sub_1400029f4(&arg1[0x8c], arg1[8], r8_8, &arg1[4], arg1[1]);
                    else
                        arg1[4] += r8_8;
                }
                else
                {
                    int64_t* rdi_3 = arg1[1];
                    
                    if (!rdi_3[5])
                        __crt_cached_ptd_host::update_locale_slow(rdi_3);
                    
                    wchar16* r12_2 = arg1[8];
                    int32_t rcx_31 = arg1[9];
                    char var_40;
                    
                    if (*(rdi_3[3] + 0xc) != 0xfde9)
                    {
                        int32_t rdi_5 = 0;
                        
                        if (rcx_31)
                        {
                            while (true)
                            {
                                var_50 = 0;
                                wchar16 r9_4 = *r12_2;
                                r12_2 = &r12_2[1];
                                
                                if (!_wctomb_internal(&var_50, &var_40, 6, r9_4, arg1[1]))
                                {
                                    int32_t r8_7 = var_50;
                                    
                                    if (r8_7)
                                    {
                                        if (!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                            sub_1400029f4(&arg1[0x8c], &var_40, r8_7, &arg1[4], 
                                                arg1[1]);
                                        else
                                            arg1[4] += r8_7;
                                        
                                        rdi_5 += 1;
                                        
                                        if (rdi_5 == arg1[9])
                                            break;
                                        
                                        continue;
                                    }
                                }
                                
                                arg1[4] = 0xffffffff;
                                break;
                            }
                        }
                    }
                    else
                    {
                        var_50 = 0;
                        int32_t i = 0;
                        
                        if (rcx_31)
                        {
                            do
                            {
                                wchar16 rdx_7 = *r12_2;
                                r12_2 = &r12_2[1];
                                result = __crt_mbstring::__c16rtomb_utf8(&var_40, rdx_7, &var_50, 
                                    arg1[1]);
                                int32_t r8_6 = result;
                                
                                if (result == -1)
                                {
                                    arg1[4] = 0xffffffff;
                                    break;
                                }
                                
                                if (!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                    sub_1400029f4(&arg1[0x8c], &var_40, r8_6, &arg1[4], arg1[1]);
                                else
                                    arg1[4] += r8_6;
                                
                                i += 1;
                            } while (i != arg1[9]);
                        }
                    }
                }
                
                if (arg1[4] >= 0 && (arg1[5] >> 2) & 1)
                {
                    int64_t* rsi_3 = arg1[1];
                    int32_t rdi_6 = 0;
                    
                    if (r15_3 > 0)
                    {
                        do
                        {
                            if ((!(*(arg1[0x8c] + 0x14) >> 0xc & 1) || *(arg1[0x8c] + 8))
                                && _fputc_nolock_internal(0x20, arg1[0x8c], rsi_3) == 0xffffffff)
                            {
                                arg1[4] = 0xffffffff;
                                break;
                            }
                            
                            int32_t rcx_45 = arg1[4];
                            arg1[4] = rcx_45 + 1;
                            
                            if (rcx_45 == 0xfffffffe)
                                break;
                            
                            rdi_6 += 1;
                        } while (rdi_6 < r15_3);
                    }
                }
            }
            
            result = 1;
        }
        else
            result = 0;
    }
    else if (rcx > 0x53)
    {
        if (rcx == 0x58)
            goto label_1400031a1;
        
        if (rcx == 0x5a)
        {
            result = sub_14000366c(arg1);
            goto label_1400031ae;
        }
        
        if (rcx == 0x61)
            goto label_1400030d7;
        
        if (rcx == 0x63)
            goto label_140003102;
        
        result = 0;
    }
    else
    {
        if (rcx == 0x53)
            goto label_14000318c;
        
        if (rcx == 0x41)
            goto label_1400030d7;
        
        if (rcx == 0x43)
        {
        label_140003102:
            result = sub_140003598(arg1);
            goto label_1400031ae;
        }
        
        if (rcx == 0x45 || rcx == 0x46 || rcx == 0x47)
            goto label_1400030d7;
        
        result = 0;
    }
    __security_check_cookie(var_38 ^ &var_88);
    return result;
}

uint64_t sub_140003598(void* arg1)
{
    int32_t rcx = *(arg1 + 0x34);
    uint64_t result;
    char* rdi;
    
    if (rcx == 2 ||
        (rcx != 3 && rcx != 0xc && (*(arg1 + 0x34) == 0xd || !((*(arg1 + 0x39) - 0x63) & 0xef))))
    {
        char* rcx_5 = *(arg1 + 0x18);
        rdi = arg1 + 0x50;
        char* rdx_2 = *(rdi + 0x408);
        
        if (!rdx_2)
            rdx_2 = rdi;
        
        *(arg1 + 0x18) = &rcx_5[8];
        result = *rcx_5;
        *rdx_2 = result;
        *(arg1 + 0x48) = 1;
    }
    else
    {
        wchar16* rcx_3 = *(arg1 + 0x18);
        *(arg1 + 0x18) = &rcx_3[4];
        char* rdx_1 = *(arg1 + 0x458);
        uint64_t r8_1;
        
        if (rdx_1)
        {
            rdi = arg1 + 0x50;
            r8_1 = *(arg1 + 0x450) >> 1;
        }
        else
        {
            rdx_1 = arg1 + 0x50;
            r8_1 = 0x200;
            rdi = rdx_1;
        }
        
        if (_wctomb_internal(arg1 + 0x48, rdx_1, r8_1, *rcx_3, *(arg1 + 8)))
            *(arg1 + 0x38) = 1;
    }
    
    char* rcx_6 = *(rdi + 0x408);
    result = 1;
    
    if (!rcx_6)
        rcx_6 = rdi;
    
    *(arg1 + 0x40) = rcx_6;
    return result;
}

uint32_t sub_14000366c(void* arg1)
{
    int64_t* rdx_4 = *(arg1 + 0x18);
    *(arg1 + 0x18) = &rdx_4[1];
    int16_t* r9 = *rdx_4;
    int64_t r10_1;
    
    if (r9)
        r10_1 = *(r9 + 8);
    
    uint32_t result;
    
    if (!r9 || !r10_1)
    {
        result = 6;
        *(arg1 + 0x40) = "(null)";
        *(arg1 + 0x4c) = 0;
    }
    else
    {
        int32_t rdx = *(arg1 + 0x34);
        void* rax;
        
        if (rdx == 2)
            rax = 0;
        else if (rdx == 3 || rdx == 0xc)
            rax = 1;
        else if (*(arg1 + 0x34) == 0xd)
            rax = 0;
        else
            rax = (*(arg1 + 0x39) - 0x63) & 0xef;
        
        *(arg1 + 0x40) = r10_1;
        result = *r9;
        
        if (!rax)
            *(arg1 + 0x4c) = 0;
        else
        {
            *(arg1 + 0x4c) = 1;
            result u>>= 1;
        }
    }
    
    *(arg1 + 0x48) = result;
    result = 1;
    return result;
}

int64_t sub_1400036e8(void* arg1)
{
    int64_t* rdx = *(arg1 + 0x18);
    *(arg1 + 0x18) = &rdx[1];
    wchar16 const* const rcx = *rdx;
    int32_t r8 = *(arg1 + 0x30);
    int32_t rdx_1 = *(arg1 + 0x34);
    char r9 = *(arg1 + 0x39);
    
    if (r8 == 0xffffffff)
        r8 = 0x7fffffff;
    
    *(arg1 + 0x40) = rcx;
    int32_t result;
    
    if (rdx_1 == 2)
    {
    label_140003761:
        
        if (!rcx)
        {
            rcx = "(null)";
            *(arg1 + 0x40) = "(null)";
        }
        
        result = sub_14000e420(rcx, r8);
    }
    else
    {
        if (rdx_1 != 3 && rdx_1 != 0xc)
        {
            if (*(arg1 + 0x34) == 0xd)
                goto label_140003761;
            
            if (!((r9 - 0x63) & 0xef))
                goto label_140003761;
        }
        
        if (!rcx)
        {
            rcx = u"(null)";
            *(arg1 + 0x40) = u"(null)";
        }
        
        *(arg1 + 0x4c) = 1;
        result = sub_14000e210(rcx, r8);
    }
    
    *(arg1 + 0x48) = result;
    result = 1;
    return result;
}

uint64_t sub_140003784(int64_t* arg1)
{
    arg1[5] |= 0x10;
    int32_t rax = arg1[6];
    
    if (rax < 0)
    {
        rax = *(arg1 + 0x39);
        rax -= 0x41;
        rax &= 0xdf;
        char temp1_1 = rax;
        rax = -(rax);
        rax = ((rax - rax) & 0xfffffff9) + 0xd;
        arg1[6] = rax;
    }
    else if (!rax && (*(arg1 + 0x39) == 0x67 || *(arg1 + 0x39) == 0x47))
    {
        arg1[6] = 1;
        rax = 1;
    }
    
    void* r10 = 0x200;
    int32_t r8_1;
    void* r9;
    
    if (__crt_stdio_output::formatting_buffer::ensure_buffer_is_big_enough<char>(&arg1[0xa], 
        rax + 0x15d, arg1[1]))
    {
        r8_1 = arg1[6];
        r9 = &arg1[0xa];
    }
    else
    {
        uint32_t rax_5;
        
        if (arg1[0x8b])
            rax_5 = arg1[0x8a] >> 1;
        else
            rax_5 = 0x200;
        
        r8_1 = rax_5 - 0x15d;
        arg1[6] = r8_1;
        r9 = &arg1[0xa];
    }
    
    void* rax_7 = arg1[0x8b];
    
    if (!rax_7)
        rax_7 = &arg1[0xa];
    
    arg1[8] = rax_7;
    int64_t* rcx_1 = arg1[3];
    int64_t arg_8 = 0;
    arg1[3] = &rcx_1[1];
    void* rdx_2 = arg1[0x8b];
    int64_t* r11 = arg1[1];
    int64_t rdi_1 = *arg1;
    int32_t rsi = *(arg1 + 0x39);
    arg_8 = *rcx_1;
    uint64_t rcx_2;
    char* r9_1;
    
    if (rdx_2)
    {
        r9_1 = (*(r9 + 0x400) >> 1) + rdx_2;
        rcx_2 = arg1[0x8a] >> 1;
        r10 = arg1[0x8a] >> 1;
    }
    else
    {
        r9_1 = r9 + 0x200;
        rdx_2 = &arg1[0xa];
        rcx_2 = 0x200;
    }
    
    sub_14000e67c(&arg_8, rdx_2, r10, r9_1, rcx_2, rsi, r8_1, rdi_1, 1, r11);
    uint64_t result;
    
    if ((arg1[5] >> 5) & 1 && !arg1[6])
    {
        int64_t* rdi_2 = arg1[1];
        
        if (!rdi_2[5])
            __crt_cached_ptd_host::update_locale_slow(rdi_2);
        
        char* r9_4 = arg1[8];
        int64_t* r10_2 = rdi_2[3];
        uint64_t r8_3 = *r9_4;
        
        if (*(r8_3 + r10_2[0x22]) != 0x65)
        {
            do
            {
                r9_4 = &r9_4[1];
                r8_3 = *r9_4;
            } while (*(*r10_2 + (r8_3 << 1)) & 4);
        }
        
        char temp2_1 = *(r8_3 + r10_2[0x22]);
        
        if (temp2_1 == 0x78)
            r8_3 = r9_4[2];
        
        char* rdx_3 = &r9_4[2];
        
        if (temp2_1 != 0x78)
            rdx_3 = r9_4;
        
        result = **r10_2[0x1f];
        *rdx_3 = result;
        char* rdx_4 = &rdx_3[1];
        char* rcx_7;
        
        do
        {
            result = *rdx_4;
            rcx_7 = r8_3;
            *rdx_4 = r8_3;
            rdx_4 = &rdx_4[1];
            r8_3 = result;
        } while (rcx_7);
    }
    
    result = *(arg1 + 0x39);
    result -= 0x47;
    
    if (!(result & 0xdf) && !((arg1[5] >> 5) & 1))
    {
        int64_t* rdi_3 = arg1[1];
        
        if (!rdi_3[5])
            __crt_cached_ptd_host::update_locale_slow(rdi_3);
        
        __crt_stdio_output::crop_zeroes(arg1[8], &rdi_3[3]);
    }
    
    char* rcx_10 = arg1[8];
    result = *rcx_10;
    
    if (result == 0x2d)
    {
        arg1[5] |= 0x40;
        rcx_10 = &rcx_10[1];
        arg1[8] = rcx_10;
        result = *rcx_10;
    }
    
    result -= 0x49;
    
    if (result <= 0x25 && TEST_BITQ(0x2100000021, result))
    {
        arg1[5] &= 0xfffffff7;
        *(arg1 + 0x39) = 0x73;
    }
    
    int64_t rdx_6 = -1;
    
    do
        rdx_6 += 1;
     while (rcx_10[rdx_6]);
    
    result = 1;
    arg1[9] = rdx_6;
    return result;
}

uint64_t sub_1400039e0(void* arg1)
{
    int16_t** rdx = *(arg1 + 0x18);
    *(arg1 + 0x18) = &rdx[1];
    int16_t* rdi = *rdx;
    uint64_t result;
    
    if (_get_printf_count_output())
    {
        int32_t rcx = *(arg1 + 0x34);
        int32_t rcx_2;
        
        if (rcx > 5)
        {
            if (rcx != 6 && rcx != 7)
            {
                rcx_2 = rcx - 9;
                
                if (rcx == 9)
                    goto label_140003a7b;
                
            label_140003a6d:
                
                if (rcx_2 == 1)
                    goto label_140003a92;
                
                if (rcx_2 != 2)
                    goto label_140003a05;
                
                goto label_140003a7b;
            }
            
        label_140003a7b:
            *rdi = *(arg1 + 0x20);
            *(arg1 + 0x38) = 1;
            result = 1;
        }
        else
        {
            if (rcx == 5)
                goto label_140003a7b;
            
            if (!rcx)
            {
            label_140003a92:
                *rdi = *(arg1 + 0x20);
                *(arg1 + 0x38) = 1;
                result = 1;
            }
            else if (rcx == 1)
            {
                result = *(arg1 + 0x20);
                *rdi = result;
                *(arg1 + 0x38) = 1;
                result = 1;
            }
            else
            {
                rcx_2 = rcx - 2;
                
                if (rcx != 2)
                    goto label_140003a6d;
                
                *rdi = *(arg1 + 0x20);
                *(arg1 + 0x38) = 1;
                result = 1;
            }
        }
    }
    else
    {
    label_140003a05:
        void* rax_1 = *(arg1 + 8);
        *(rax_1 + 0x30) = 1;
        *(rax_1 + 0x2c) = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, 0, *(arg1 + 8));
        result = 0;
    }
    
    return result;
}

uint64_t <lambda_5ea5c948f63ef1db566fd27aadf3ca11>::operator()(int64_t* arg1)
{
    void var_4b8;
    int64_t rax_1 = __security_cookie ^ &var_4b8;
    int64_t* r14 = arg1[1];
    void** r15 = **arg1;
    int64_t rsi;
    rsi = __acrt_stdio_begin_temporary_buffering_nolock(r15);
    int64_t rdi = *arg1[4];
    int64_t r11 = *arg1[3];
    int32_t var_478 = 0;
    int32_t var_470 = 0;
    int32_t var_46c = 0;
    int32_t var_468 = 0;
    int16_t var_460 = 0;
    int32_t var_450 = 0;
    int32_t var_30 = 0;
    int64_t var_490 = arg1[1];
    char var_474 = 0;
    char var_44c = 0;
    int128_t var_48 = {0};
    int64_t var_38 = **arg1;
    int64_t var_498 = *arg1[2];
    int64_t var_488 = r11;
    int64_t var_480 = rdi;
    int32_t rax_4 = sub_140002ac4(&var_498);
    _free_base(*var_48[8]);
    *var_48[8] = 0;
    __acrt_stdio_end_temporary_buffering_nolock(rsi, r15, r14);
    __security_check_cookie(rax_1 ^ &var_4b8);
    return rax_4;
}

int64_t __crt_stdio_output::formatting_buffer::ensure_buffer_is_big_enough<char>(void* arg1, int64_t arg2, void* arg3)
{
    int64_t result;
    
    if (arg2 <= 0x7fffffffffffffff)
    {
        char rdi_1 = 0;
        uint64_t rsi_1 = arg2 * 2;
        
        if (*(arg1 + 0x408))
        {
            if (rsi_1 > *(arg1 + 0x400))
                goto label_140003c13;
            
            result = 1;
        }
        else if (rsi_1 <= 0x400 || rsi_1 <= *(arg1 + 0x400))
            result = 1;
        else
        {
        label_140003c13:
            int64_t rax = _malloc_base(rsi_1);
            
            if (rax)
            {
                _free_base(*(arg1 + 0x408));
                *(arg1 + 0x408) = rax;
                rdi_1 = 1;
                *(arg1 + 0x400) = rsi_1;
            }
            
            _free_base(0);
            result = rdi_1;
        }
    }
    else
    {
        *(arg3 + 0x30) = 1;
        result = 0;
        *(arg3 + 0x2c) = 0xc;
    }
    
    return result;
}

uint64_t sub_140003c5c(void* arg1, char arg2)
{
    int32_t r8 = *(arg1 + 0x34);
    int64_t rbp;
    rbp = arg2;
    int32_t rdx;
    uint64_t rsi_1;
    int64_t rdi_1;
    
    if (r8 <= 5)
    {
        if (r8 == 5)
            goto label_140003cbe;
        
        if (!r8)
        {
        label_140003daf:
            rdx = *(arg1 + 0x28);
            rdi_1 = 4;
            int32_t* rcx_3 = *(arg1 + 0x18);
            *(arg1 + 0x18) = &rcx_3[2];
            
            if (!(rdx >> 4 & 1))
                rsi_1 = *rcx_3;
            else
                rsi_1 = *rcx_3;
            
            goto label_140003ce6;
        }
        
        if (r8 == 1)
        {
            rdx = *(arg1 + 0x28);
            rdi_1 = 1;
            char* rcx_2 = *(arg1 + 0x18);
            *(arg1 + 0x18) = &rcx_2[8];
            
            if (!(1 & rdx >> 4))
                rsi_1 = *rcx_2;
            else
                rsi_1 = *rcx_2;
            
            goto label_140003ce6;
        }
        
        int32_t temp4_1 = r8 - 1;
        r8 -= 2;
        
        if (temp4_1 != 1)
            goto label_140003caa;
        
        rdx = *(arg1 + 0x28);
        rdi_1 = 2;
        int16_t* rcx_1 = *(arg1 + 0x18);
        *(arg1 + 0x18) = &rcx_1[4];
        
        if (!(rdx >> 4 & 1))
            rsi_1 = *rcx_1;
        else
            rsi_1 = *rcx_1;
        
        goto label_140003ce6;
    }
    
    uint64_t result;
    
    if (r8 == 6)
    {
    label_140003cbe:
        rdx = *(arg1 + 0x28);
        rdi_1 = 8;
        uint64_t* rcx = *(arg1 + 0x18);
        *(arg1 + 0x18) = &rcx[1];
        rsi_1 = *rcx;
    label_140003ce6:
        
        if (rdx >> 4 & 1 && rsi_1 < 0)
        {
            rsi_1 = -(rsi_1);
            rdx |= 0x40;
            *(arg1 + 0x28) = rdx;
        }
        
        if (*(arg1 + 0x30) >= 0)
        {
            void* r8_1 = *(arg1 + 8);
            *(arg1 + 0x28) = rdx & 0xfffffff7;
            __crt_stdio_output::formatting_buffer::ensure_buffer_is_big_enough<char>(arg1 + 0x50, 
                *(arg1 + 0x30), r8_1);
        }
        else
            *(arg1 + 0x30) = 1;
        
        if (!rsi_1)
            *(arg1 + 0x28) &= 0xffffffdf;
        
        *(arg1 + 0x4c) = 0;
        r8 = rbp;
        
        if (rdi_1 != 8)
            __crt_stdio_output::output_processor<uint32_t,16,char,class __crt_stdio_output::console_output_adapter<char>,class __crt_stdio_output::format_validation_base<char,class __crt_stdio_output::console_output_adapter<char> > >::type_case_integer_parse_into_buffer<uint32_t,16>(
                arg1, rsi_1, r8);
        else
            __crt_stdio_output::output_processor<uint64_t,16,char,class __crt_stdio_output::console_output_adapter<char>,class __crt_stdio_output::format_validation_base<char,class __crt_stdio_output::console_output_adapter<char> > >::type_case_integer_parse_into_buffer<uint64_t,16>(
                arg1, rsi_1, r8);
        
        if ((*(arg1 + 0x28) >> 7) & 1 && (!*(arg1 + 0x48) || **(arg1 + 0x40) != 0x30))
        {
            *(arg1 + 0x40) -= 1;
            **(arg1 + 0x40) = 0x30;
            *(arg1 + 0x48) += 1;
        }
        
        result = 1;
    }
    else
    {
        if (r8 == 7)
            goto label_140003cbe;
        
        int32_t temp2_1 = r8 - 7;
        r8 -= 9;
        
        if (temp2_1 == 2)
            goto label_140003cbe;
        
    label_140003caa:
        
        if (r8 == 1)
            goto label_140003daf;
        
        if (r8 == 2)
            goto label_140003cbe;
        
        void* rax_9 = *(arg1 + 8);
        *(rax_9 + 0x30) = 1;
        *(rax_9 + 0x2c) = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, 0, *(arg1 + 8));
        result = 0;
    }
    
    return result;
}

uint64_t sub_140003e60(void* arg1, char arg2)
{
    int32_t r8 = *(arg1 + 0x34);
    int64_t rbp;
    rbp = arg2;
    int32_t rdx;
    uint64_t rsi_1;
    int64_t rdi_1;
    
    if (r8 <= 5)
    {
        if (r8 == 5)
            goto label_140003ec2;
        
        if (!r8)
        {
        label_140003fb3:
            rdx = *(arg1 + 0x28);
            rdi_1 = 4;
            int32_t* rcx_3 = *(arg1 + 0x18);
            *(arg1 + 0x18) = &rcx_3[2];
            
            if (!(rdx >> 4 & 1))
                rsi_1 = *rcx_3;
            else
                rsi_1 = *rcx_3;
            
            goto label_140003eea;
        }
        
        if (r8 == 1)
        {
            rdx = *(arg1 + 0x28);
            rdi_1 = 1;
            char* rcx_2 = *(arg1 + 0x18);
            *(arg1 + 0x18) = &rcx_2[8];
            
            if (!(1 & rdx >> 4))
                rsi_1 = *rcx_2;
            else
                rsi_1 = *rcx_2;
            
            goto label_140003eea;
        }
        
        int32_t temp4_1 = r8 - 1;
        r8 -= 2;
        
        if (temp4_1 != 1)
            goto label_140003eae;
        
        rdx = *(arg1 + 0x28);
        rdi_1 = 2;
        int16_t* rcx_1 = *(arg1 + 0x18);
        *(arg1 + 0x18) = &rcx_1[4];
        
        if (!(rdx >> 4 & 1))
            rsi_1 = *rcx_1;
        else
            rsi_1 = *rcx_1;
        
        goto label_140003eea;
    }
    
    uint64_t result;
    
    if (r8 == 6)
    {
    label_140003ec2:
        rdx = *(arg1 + 0x28);
        rdi_1 = 8;
        uint64_t* rcx = *(arg1 + 0x18);
        *(arg1 + 0x18) = &rcx[1];
        rsi_1 = *rcx;
    label_140003eea:
        
        if (rdx >> 4 & 1 && rsi_1 < 0)
        {
            rsi_1 = -(rsi_1);
            rdx |= 0x40;
            *(arg1 + 0x28) = rdx;
        }
        
        if (*(arg1 + 0x30) >= 0)
        {
            void* r8_1 = *(arg1 + 8);
            *(arg1 + 0x28) = rdx & 0xfffffff7;
            __crt_stdio_output::formatting_buffer::ensure_buffer_is_big_enough<char>(arg1 + 0x50, 
                *(arg1 + 0x30), r8_1);
        }
        else
            *(arg1 + 0x30) = 1;
        
        if (!rsi_1)
            *(arg1 + 0x28) &= 0xffffffdf;
        
        *(arg1 + 0x4c) = 0;
        r8 = rbp;
        
        if (rdi_1 != 8)
            sub_1400046d4(arg1, rsi_1);
        else
            sub_140004664(arg1, rsi_1);
        
        if ((*(arg1 + 0x28) >> 7) & 1 && (!*(arg1 + 0x48) || **(arg1 + 0x40) != 0x30))
        {
            *(arg1 + 0x40) -= 1;
            **(arg1 + 0x40) = 0x30;
            *(arg1 + 0x48) += 1;
        }
        
        result = 1;
    }
    else
    {
        if (r8 == 7)
            goto label_140003ec2;
        
        int32_t temp2_1 = r8 - 7;
        r8 -= 9;
        
        if (temp2_1 == 2)
            goto label_140003ec2;
        
    label_140003eae:
        
        if (r8 == 1)
            goto label_140003fb3;
        
        if (r8 == 2)
            goto label_140003ec2;
        
        void* rax_9 = *(arg1 + 8);
        *(rax_9 + 0x30) = 1;
        *(rax_9 + 0x2c) = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, 0, *(arg1 + 8));
        result = 0;
    }
    
    return result;
}

uint64_t sub_140004064(void* arg1, char arg2)
{
    int32_t r8 = *(arg1 + 0x34);
    int64_t rbp;
    rbp = arg2;
    int32_t rdx;
    uint64_t rsi_1;
    int64_t rdi_1;
    
    if (r8 <= 5)
    {
        if (r8 == 5)
            goto label_1400040c6;
        
        if (!r8)
        {
        label_1400041b7:
            rdx = *(arg1 + 0x28);
            rdi_1 = 4;
            int32_t* rcx_3 = *(arg1 + 0x18);
            *(arg1 + 0x18) = &rcx_3[2];
            
            if (!(rdx >> 4 & 1))
                rsi_1 = *rcx_3;
            else
                rsi_1 = *rcx_3;
            
            goto label_1400040ee;
        }
        
        if (r8 == 1)
        {
            rdx = *(arg1 + 0x28);
            rdi_1 = 1;
            char* rcx_2 = *(arg1 + 0x18);
            *(arg1 + 0x18) = &rcx_2[8];
            
            if (!(1 & rdx >> 4))
                rsi_1 = *rcx_2;
            else
                rsi_1 = *rcx_2;
            
            goto label_1400040ee;
        }
        
        int32_t temp4_1 = r8 - 1;
        r8 -= 2;
        
        if (temp4_1 != 1)
            goto label_1400040b2;
        
        rdx = *(arg1 + 0x28);
        rdi_1 = 2;
        int16_t* rcx_1 = *(arg1 + 0x18);
        *(arg1 + 0x18) = &rcx_1[4];
        
        if (!(rdx >> 4 & 1))
            rsi_1 = *rcx_1;
        else
            rsi_1 = *rcx_1;
        
        goto label_1400040ee;
    }
    
    uint64_t result;
    
    if (r8 == 6)
    {
    label_1400040c6:
        rdx = *(arg1 + 0x28);
        rdi_1 = 8;
        uint64_t* rcx = *(arg1 + 0x18);
        *(arg1 + 0x18) = &rcx[1];
        rsi_1 = *rcx;
    label_1400040ee:
        
        if (rdx >> 4 & 1 && rsi_1 < 0)
        {
            rsi_1 = -(rsi_1);
            rdx |= 0x40;
            *(arg1 + 0x28) = rdx;
        }
        
        if (*(arg1 + 0x30) >= 0)
        {
            void* r8_1 = *(arg1 + 8);
            *(arg1 + 0x28) = rdx & 0xfffffff7;
            __crt_stdio_output::formatting_buffer::ensure_buffer_is_big_enough<char>(arg1 + 0x50, 
                *(arg1 + 0x30), r8_1);
        }
        else
            *(arg1 + 0x30) = 1;
        
        if (!rsi_1)
            *(arg1 + 0x28) &= 0xffffffdf;
        
        *(arg1 + 0x4c) = 0;
        r8 = rbp;
        
        if (rdi_1 != 8)
            sub_1400047f4(arg1, rsi_1, r8);
        else
            sub_140004744(arg1, rsi_1, r8);
        
        if ((*(arg1 + 0x28) >> 7) & 1 && (!*(arg1 + 0x48) || **(arg1 + 0x40) != 0x30))
        {
            *(arg1 + 0x40) -= 1;
            **(arg1 + 0x40) = 0x30;
            *(arg1 + 0x48) += 1;
        }
        
        result = 1;
    }
    else
    {
        if (r8 == 7)
            goto label_1400040c6;
        
        int32_t temp2_1 = r8 - 7;
        r8 -= 9;
        
        if (temp2_1 == 2)
            goto label_1400040c6;
        
    label_1400040b2:
        
        if (r8 == 1)
            goto label_1400041b7;
        
        if (r8 == 2)
            goto label_1400040c6;
        
        void* rax_9 = *(arg1 + 8);
        *(rax_9 + 0x30) = 1;
        *(rax_9 + 0x2c) = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, 0, *(arg1 + 8));
        result = 0;
    }
    
    return result;
}

uint64_t __crt_seh_guarded_call<class <lambda_8e8668af99809de511100fe94da1a6bd>,class <lambda_5ea5c948f63ef1db566fd27aadf3ca11>& __ptr64,class <lambda_ab2921ee12094a5a5396e2d3d37ffb58>,int32_t>::operator()<class <lambda_8e8668af99809de511100fe94da1a6bd>,class <lambda_5ea5c948f63ef1db566fd27aadf3ca11>& __ptr64,class <lambda_ab2921ee12094a5a5396e2d3d37ffb58> >(int64_t arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4)
{
    int64_t* arg_20 = arg4;
    sub_14000247c(*arg2);
    int32_t rax = <lambda_5ea5c948f63ef1db566fd27aadf3ca11>::operator()(arg3);
    sub_140002488(*arg4);
    return rax;
}

uint64_t sub_1400042a8(int64_t* arg1, int64_t* arg2, int32_t arg3, char arg4)
{
    char* r12 = *arg2;
    int32_t rbp = arg3;
    int64_t* rbx = arg2;
    
    if (r12)
    {
        if (rbp && arg3 - 2 > 0x22)
        {
            arg1[6] = 1;
            *(arg1 + 0x2c) = 0x16;
            _invalid_parameter_internal(0, 0, 0, 0, 0, arg1);
            goto label_140004319;
        }
        
        int64_t rsi;
        rsi = *r12;
        char* rcx_1 = &r12[1];
        int32_t r14_1 = 0;
        uint32_t rax_4 = arg4;
        *arg2 = rcx_1;
        uint32_t rdi_2 = rax_4 | 2;
        
        if (rsi != 0x2d)
            rdi_2 = rax_4;
        
        if (rsi == 0x2d || rsi == 0x2b)
        {
            rsi = *rcx_1;
            rcx_1 = &rcx_1[1];
            *arg2 = rcx_1;
        }
        
        if (!(rbp & 0xffffffef))
        {
            int32_t rax_7;
            int32_t rax_16;
            
            if (rsi - 0x30 > 9)
            {
                if (rsi - 0x61 <= 0x19)
                {
                    rax_7 = rsi - 0x57;
                    goto label_14000439f;
                }
                
                if (rsi - 0x41 <= 0x19)
                {
                    rax_7 = rsi - 0x37;
                    goto label_14000439f;
                }
                
            label_1400043ed:
                rax_16 = 0xa;
            label_1400043f4:
                
                if (rbp)
                    rax_16 = rbp;
                
                rbp = rax_16;
            }
            else
            {
                rax_7 = rsi - 0x30;
            label_14000439f:
                
                if (rax_7)
                    goto label_1400043ed;
                
                arg2 = *rcx_1;
                *rbx = &rcx_1[1];
                
                if (!(&arg2[-0xb] & 0xdf))
                {
                    rsi = rcx_1[1];
                    *rbx = &rcx_1[2];
                    rax_16 = 0x10;
                    goto label_1400043f4;
                }
                
                *rbx = rcx_1;
                int32_t rax_13 = 8;
                
                if (rbp)
                    rax_13 = rbp;
                
                rbp = rax_13;
                
                if (arg2 && *rcx_1 != arg2)
                {
                    *sub_14000dedc() = 0x16;
                    _invalid_parameter_noinfo();
                }
            }
        }
        
        char* r8_1 = *rbx;
        
        while (true)
        {
            int32_t rcx_4;
            
            if (rsi - 0x30 <= 9)
                rcx_4 = rsi - 0x30;
            else if (rsi - 0x61 <= 0x19)
                rcx_4 = rsi - 0x57;
            else if (rsi - 0x41 > 0x19)
                rcx_4 = -1;
            else
                rcx_4 = rsi - 0x37;
            
            if (rcx_4 >= rbp)
                break;
            
            rsi = *r8_1;
            int32_t rax_21 = r14_1 * rbp;
            int32_t rdx_1 = rax_21 + rcx_4;
            int32_t rcx_7;
            rcx_7 = rdx_1 < rax_21;
            bool cond:1_1 = r14_1 > COMBINE(0, 0xffffffff) / rbp;
            r14_1 = rdx_1;
            int32_t rax_22;
            rax_22 = cond:1_1;
            rdi_2 |= (rcx_7 | rax_22) << 2 | 8;
            r8_1 = &r8_1[1];
            *rbx = r8_1;
        }
        
        *rbx = &r8_1[-1];
        
        if (rsi && r8_1[-1] != rsi)
        {
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        }
        
        if (rdi_2 & 8)
        {
            uint32_t rax_26;
            uint32_t rcx_11;
            
            if (rdi_2 & 4)
            {
                rax_26 = 1;
                rcx_11 = rdi_2;
            label_1400044e5:
                arg1[6] = 1;
                *(arg1 + 0x2c) = 0x22;
                
                if (rax_26 & rcx_11)
                {
                    int64_t* rdx_2 = rbx[1];
                    
                    if (!(2 & rdi_2))
                    {
                        if (rdx_2)
                            *rdx_2 = *rbx;
                        
                        return 0x7fffffff;
                    }
                    
                    if (rdx_2)
                        *rdx_2 = *rbx;
                    
                    return 0x80000000;
                }
                
                r14_1 = -1;
            }
            else if (!(rdi_2 & 1))
            {
                if (2 & rdi_2)
                    r14_1 = -(r14_1);
            }
            else if (2 & rdi_2)
            {
                if (r14_1 > 0x80000000)
                    goto label_1400044db;
                
                r14_1 = -(r14_1);
            }
            else if (r14_1 > 0x7fffffff)
            {
            label_1400044db:
                rcx_11 = 1;
                rax_26 = rdi_2;
                goto label_1400044e5;
            }
            int64_t* rax_28 = rbx[1];
            
            if (rax_28)
                *rax_28 = *rbx;
            
            return r14_1;
        }
        
        void** rax_25 = rbx[1];
        *rbx = r12;
        
        if (rax_25)
            *rax_25 = r12;
    }
    else
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    label_140004319:
        int64_t* rcx = rbx[1];
        
        if (rcx)
            *rcx = *rbx;
    }
    
    return 0;
}

void* __crt_stdio_output::output_processor<uint64_t,16,char,class __crt_stdio_output::console_output_adapter<char>,class __crt_stdio_output::format_validation_base<char,class __crt_stdio_output::console_output_adapter<char> > >::type_case_integer_parse_into_buffer<uint64_t,16>(void* arg1, uint64_t arg2, char arg3)
{
    void* r9 = arg1 + 0x50;
    void* rax = *(r9 + 0x408);
    uint64_t r10 = arg2;
    uint64_t rax_1;
    
    if (rax)
    {
        r9 = rax;
        rax_1 = *(arg1 + 0x450) >> 1;
    }
    else
        rax_1 = 0x200;
    
    void* rdx_1 = r9 - 1 + rax_1;
    *(arg1 + 0x40) = rdx_1;
    void* r8 = rdx_1;
    
    while (true)
    {
        int32_t rax_3 = *(arg1 + 0x30);
        
        if (rax_3 <= 0 && !r10)
        {
            *(arg1 + 0x48) = rdx_1 - *(arg1 + 0x40);
            *(arg1 + 0x40) = r8 + 1;
            return r8 + 1;
        }
        
        *(arg1 + 0x30) = rax_3 - 1;
        int32_t rax_4;
        rax_4 = r10;
        rax_4 &= 0xf;
        r10 u>>= 4;
        rax_4 += 0x30;
        r9 = rax_4;
        
        if (rax_4 > 0x39)
        {
            rax_4 = arg3;
            rax_4 ^= 1;
            rax_4 <<= 5;
            rax_4 += 7;
            rax_4 += r9;
        }
        
        *r8 = rax_4;
        *(arg1 + 0x40) -= 1;
        r8 = *(arg1 + 0x40);
    }
}

void* __crt_stdio_output::output_processor<uint32_t,16,char,class __crt_stdio_output::console_output_adapter<char>,class __crt_stdio_output::format_validation_base<char,class __crt_stdio_output::console_output_adapter<char> > >::type_case_integer_parse_into_buffer<uint32_t,16>(void* arg1, uint32_t arg2, char arg3)
{
    void* r9 = arg1 + 0x50;
    void* rax = *(r9 + 0x408);
    uint32_t r10 = arg2;
    uint64_t rax_1;
    
    if (rax)
    {
        r9 = rax;
        rax_1 = *(arg1 + 0x450) >> 1;
    }
    else
        rax_1 = 0x200;
    
    void* rdx_1 = r9 - 1 + rax_1;
    *(arg1 + 0x40) = rdx_1;
    void* r8 = rdx_1;
    
    while (true)
    {
        int32_t rax_3 = *(arg1 + 0x30);
        
        if (rax_3 <= 0 && !r10)
        {
            *(arg1 + 0x48) = rdx_1 - *(arg1 + 0x40);
            *(arg1 + 0x40) = r8 + 1;
            return r8 + 1;
        }
        
        *(arg1 + 0x30) = rax_3 - 1;
        int32_t rax_4;
        rax_4 = r10;
        rax_4 &= 0xf;
        r10 u>>= 4;
        rax_4 += 0x30;
        r9 = rax_4;
        
        if (rax_4 > 0x39)
        {
            rax_4 = arg3;
            rax_4 ^= 1;
            rax_4 <<= 5;
            rax_4 += 7;
            rax_4 += r9;
        }
        
        *r8 = rax_4;
        *(arg1 + 0x40) -= 1;
        r8 = *(arg1 + 0x40);
    }
}

void* sub_140004664(void* arg1, uint64_t arg2)
{
    void* r8 = arg1 + 0x50;
    uint64_t r9 = arg2;
    void* rax = *(r8 + 0x408);
    uint64_t rax_1;
    
    if (rax)
    {
        r8 = rax;
        rax_1 = *(arg1 + 0x450) >> 1;
    }
    else
        rax_1 = 0x200;
    
    void* rdx_1 = r8 - 1 + rax_1;
    *(arg1 + 0x40) = rdx_1;
    void* r8_1 = rdx_1;
    
    while (true)
    {
        int32_t rax_3 = *(arg1 + 0x30);
        
        if (rax_3 <= 0 && !r9)
        {
            *(arg1 + 0x48) = rdx_1 - *(arg1 + 0x40);
            *(arg1 + 0x40) = r8_1 + 1;
            return r8_1 + 1;
        }
        
        *(arg1 + 0x30) = rax_3 - 1;
        int32_t rax_4;
        rax_4 = r9;
        rax_4 &= 7;
        r9 u>>= 3;
        rax_4 += 0x30;
        *r8_1 = rax_4;
        *(arg1 + 0x40) -= 1;
        r8_1 = *(arg1 + 0x40);
    }
}

void* sub_1400046d4(void* arg1, uint32_t arg2)
{
    void* r8 = arg1 + 0x50;
    uint32_t r9 = arg2;
    void* rax = *(r8 + 0x408);
    uint64_t rax_1;
    
    if (rax)
    {
        r8 = rax;
        rax_1 = *(arg1 + 0x450) >> 1;
    }
    else
        rax_1 = 0x200;
    
    void* rdx_1 = r8 - 1 + rax_1;
    *(arg1 + 0x40) = rdx_1;
    void* r8_1 = rdx_1;
    
    while (true)
    {
        int32_t rax_3 = *(arg1 + 0x30);
        
        if (rax_3 <= 0 && !r9)
        {
            *(arg1 + 0x48) = rdx_1 - *(arg1 + 0x40);
            *(arg1 + 0x40) = r8_1 + 1;
            return r8_1 + 1;
        }
        
        *(arg1 + 0x30) = rax_3 - 1;
        int32_t rax_4;
        rax_4 = r9;
        rax_4 &= 7;
        r9 u>>= 3;
        rax_4 += 0x30;
        *r8_1 = rax_4;
        *(arg1 + 0x40) -= 1;
        r8_1 = *(arg1 + 0x40);
    }
}

void* sub_140004744(void* arg1, uint64_t arg2, char arg3)
{
    void* rax = *(arg1 + 0x458);
    void* rcx = arg1 + 0x50;
    int64_t rbx;
    rbx = arg3;
    uint64_t r11 = arg2;
    uint64_t rax_1;
    
    if (rax)
    {
        rcx = rax;
        rax_1 = *(arg1 + 0x450) >> 1;
    }
    else
        rax_1 = 0x200;
    
    void* r8_1 = rcx - 1 + rax_1;
    *(arg1 + 0x40) = r8_1;
    void* r10 = r8_1;
    
    while (true)
    {
        int32_t rax_3 = *(arg1 + 0x30);
        
        if (rax_3 <= 0 && !r11)
        {
            *(arg1 + 0x48) = r8_1 - *(arg1 + 0x40);
            *(arg1 + 0x40) = r10 + 1;
            return r10 + 1;
        }
        
        *(arg1 + 0x30) = rax_3 - 1;
        uint64_t rdx_1 = r11 / 0xa;
        r11 -= rdx_1 * 0xa;
        r11 += 0x30;
        char rax_5 = r11;
        char rcx_1 = r11;
        r11 = rdx_1;
        
        if (rax_5 > 0x39)
            rax_5 = ((rbx ^ 1) << 5) + 7 + rcx_1;
        
        *r10 = rax_5;
        *(arg1 + 0x40) -= 1;
        r10 = *(arg1 + 0x40);
    }
}

void* sub_1400047f4(void* arg1, uint32_t arg2, char arg3)
{
    void* rax = *(arg1 + 0x458);
    void* rcx = arg1 + 0x50;
    int64_t rbx;
    rbx = arg3;
    uint32_t r11 = arg2;
    uint64_t rax_1;
    
    if (rax)
    {
        rcx = rax;
        rax_1 = *(arg1 + 0x450) >> 1;
    }
    else
        rax_1 = 0x200;
    
    void* r8_1 = rcx - 1 + rax_1;
    *(arg1 + 0x40) = r8_1;
    void* r10 = r8_1;
    
    while (true)
    {
        int32_t rax_3 = *(arg1 + 0x30);
        
        if (rax_3 <= 0 && !r11)
        {
            *(arg1 + 0x48) = r8_1 - *(arg1 + 0x40);
            *(arg1 + 0x40) = r10 + 1;
            return r10 + 1;
        }
        
        *(arg1 + 0x30) = rax_3 - 1;
        uint32_t rdx_1 = r11 / 0xa;
        r11 -= rdx_1 * 0xa;
        r11 += 0x30;
        char rax_5 = r11;
        char rcx_1 = r11;
        r11 = rdx_1;
        
        if (rax_5 > 0x39)
            rax_5 = ((rbx ^ 1) << 5) + 7 + rcx_1;
        
        *r10 = rax_5;
        *(arg1 + 0x40) -= 1;
        r10 = *(arg1 + 0x40);
    }
}

uint64_t _ischartype_l(int32_t arg1, int32_t arg2, int128_t* arg3)
{
    int64_t rdi = arg1;
    int32_t rbx = 0;
    int32_t rbp = rdi + 1;
    
    if (!arg3)
    {
        int64_t rax = __pctype_func();
        
        if (rbp <= 0x100)
            rbx = *(rax + (rdi << 1)) & arg2;
        
        return rbx;
    }
    
    int64_t* rax_2 = *arg3;
    
    if (rbp <= 0x100)
        return *(*rax_2 + (rdi << 1)) & arg2;
    
    if (rax_2[1] <= 1)
        return 0;
    
    return _isctype_l(rdi, arg2, arg3);
}

uint64_t memcpy_s(int128_t* arg1, void* arg2, int32_t* arg3, void* arg4)
{
    if (arg4)
    {
        void* rax;
        int32_t rbx_1;
        
        if (!arg1)
        {
        label_14000493e:
            rax = sub_14000dedc();
            rbx_1 = 0x16;
        label_140004948:
            *rax = rbx_1;
            _invalid_parameter_noinfo();
            return rbx_1;
        }
        
        if (!arg3 || arg2 < arg4)
        {
            sub_14001c640(arg1, 0, arg2);
            
            if (!arg3)
                goto label_14000493e;
            
            if (arg2 >= arg4)
                return 0x16;
            
            rax = sub_14000dedc();
            rbx_1 = 0x22;
            goto label_140004948;
        }
        
        sub_14001cb40(arg1, arg3, arg4);
    }
    
    return 0;
}

void** _LocaleUpdate::_LocaleUpdate(void** arg1, int128_t* arg2)
{
    arg1[3] = 0;
    
    if (arg2)
        *(arg1 + 8) = *arg2;
    else if (data_14002a1b8)
    {
        void** rax_1 = __vcrt_getptd();
        *arg1 = rax_1;
        arg1[1] = rax_1[0x12];
        arg1[2] = rax_1[0x11];
        __acrt_update_locale_info(rax_1, &arg1[1]);
        sub_14000e5d8(*arg1, &arg1[2]);
        void* rcx_4 = *arg1;
        int32_t rax_2 = *(rcx_4 + 0x3a8);
        
        if (!(rax_2 & 2))
        {
            *(rcx_4 + 0x3a8) = rax_2 | 2;
            arg1[3] = 1;
        }
    }
    else
        *(arg1 + 8) = *data_1400298c8;
    
    return arg1;
}

uint64_t __stdio_common_vfwscanf(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5)
{
    int64_t var_48 = arg5;
    int64_t arg_8 = arg4;
    int64_t arg_20 = arg3;
    int64_t arg_10 = arg2;
    int64_t arg_18 = arg1;
    
    if (!arg2 || !arg3)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        return 0xffffffff;
    }
    
    int64_t var_40 = arg2;
    int64_t* var_30 = &arg_8;
    int64_t var_38 = arg2;
    int64_t* var_28_1 = &arg_10;
    int64_t* var_20_1 = &arg_18;
    int64_t* var_18_1 = &arg_20;
    int64_t* var_10_1 = &var_48;
    return __crt_seh_guarded_call<class <lambda_082dd7c0feb7dbdaf245f261e54a6583>,class <lambda_f3caf1ecae5fe01a9a1a6239afa44510>& __ptr64,class <lambda_c640b76c0755ae85b317b35c67c61e6b>,int32_t>::operator()<class <lambda_082dd7c0feb7dbdaf245f261e54a6583>,class <lambda_f3caf1ecae5fe01a9a1a6239afa44510>& __ptr64,class <lambda_c640b76c0755ae85b317b35c67c61e6b> >(
        &arg5, &var_38, &var_30, &var_40);
}

uint64_t sub_140004ad0(int32_t* arg1, int32_t* arg2)
{
    int32_t r10 = *arg1;
    
    if (r10)
    {
        int32_t rdi_1 = *arg2;
        
        if (rdi_1)
        {
            uint64_t r10_1 = r10 - 1;
            uint64_t rbp_1 = rdi_1 - 1;
            
            if (!rbp_1)
            {
                uint64_t r12_1 = arg2[1];
                void var_214;
                
                if (r12_1 == 1)
                {
                    int32_t rbx_1 = arg1[1];
                    *arg1 = 0;
                    int32_t var_218_1 = 0;
                    memcpy_s(&arg1[1], 0x1cc, &var_214, nullptr);
                    return rbx_1;
                }
                
                uint64_t rax_1;
                int32_t rbp_2;
                
                if (r10_1)
                {
                    uint64_t rdi_2 = 0;
                    int64_t r14_1 = 0;
                    
                    while (r10_1 != 0xffffffff)
                    {
                        uint64_t rax_3 = arg1[r10_1 + 1];
                        int64_t rdx_1 = 0;
                        r10_1 = r10_1 - 1;
                        int64_t rax_4 = rax_3 | r14_1 << 0x20;
                        int32_t temp2_2 = r12_1;
                        r14_1 = COMBINE(rdx_1, rax_4) % temp2_2;
                        rdi_2 = (rdi_2 << 0x20) + COMBINE(rdx_1, rax_4) / temp2_2;
                    }
                    
                    int32_t var_218_3 = 0;
                    *arg1 = 0;
                    memcpy_s(&arg1[1], 0x1cc, &var_214, nullptr);
                    arg1[1] = r14_1;
                    uint32_t rcx_5 = r14_1 >> 0x20;
                    rax_1 = rdi_2;
                    arg1[2] = rcx_5;
                    rbp_2 = rcx_5;
                    *arg1 = rbp_2 + 1;
                }
                else
                {
                    int32_t rbx_2 = arg1[1];
                    *arg1 = 0;
                    int32_t var_218_2 = 0;
                    memcpy_s(&arg1[1], 0x1cc, &var_214, nullptr);
                    int32_t temp2_1 = r12_1;
                    uint32_t temp1_1 = COMBINE(0, rbx_2) % temp2_1;
                    rax_1 = COMBINE(0, rbx_2) / temp2_1;
                    arg1[1] = temp1_1;
                    rbp_2 = temp1_1;
                    *arg1 = rbp_2;
                }
                return rax_1;
            }
            
            if (rbp_1 <= r10_1)
            {
                int64_t rdx_3 = r10_1;
                int32_t r8_5 = r10_1 - rbp_1;
                int32_t r9_1 = r10_1;
                int64_t rbx_3 = r8_5;
                
                if (rdx_3 < rbx_3)
                {
                label_140004c58:
                    r8_5 += 1;
                }
                else
                {
                    void* rcx_7 = &arg1[1 + rdx_3];
                    
                    while (*(arg2 - (rbx_3 << 2) - arg1 + rcx_7) == *rcx_7)
                    {
                        r9_1 -= 1;
                        rdx_3 -= 1;
                        rcx_7 -= 4;
                        
                        if (rdx_3 < rbx_3)
                            goto label_140004c58_1;
                    }
                    
                    if (arg2[r9_1 - r8_5 + 1] < arg1[r9_1 + 1])
                    {
                    label_140004c58_1:
                        r8_5 += 1;
                    }
                }
                
                if (r8_5)
                {
                    int32_t r9_2 = arg2[rbp_1 + 1];
                    int32_t r11_4 = arg2[rdi_1 - 2 + 1];
                    uint64_t rflags_1;
                    int32_t temp0_3;
                    temp0_3 = _bit_scan_reverse(r9_2);
                    int32_t arg_18 = r11_4;
                    int32_t arg_8 = 0;
                    int32_t rbx_4 = 0x20;
                    arg_8 = 0;
                    int32_t r14_3 = 0;
                    char rcx_10 = rbx_4;
                    int32_t r11_5 = r11_4 << rcx_10;
                    arg_18 = r11_5;
                    
                    if (rdi_1 > 2)
                        arg_18 = r11_5 | arg2[rdi_1 - 3 + 1] >> r14_3;
                    
                    int32_t r12_2 = r8_5 - 1;
                    uint64_t var_228_1 = 0;
                    uint64_t r11_7 = 0;
                    
                    if (r12_2 >= 0)
                    {
                        char rax_19 = r14_3;
                        uint64_t rax_20 = r11_4 >> r14_3 | r9_2 << rcx_10;
                        uint64_t r13_1 = r12_2 + rdi_1;
                        int32_t temp7_1;
                        
                        do
                        {
                            int32_t rdx_7;
                            
                            if (r13_1 > r10_1)
                                rdx_7 = 0;
                            else
                                rdx_7 = arg1[r13_1 + 1];
                            
                            uint64_t r11_8 = arg1[r13_1 - 2 + 1];
                            uint64_t var_238_1 = arg1[r13_1 - 1 + 1];
                            *var_238_1[4] = rdx_7;
                            uint64_t r8_8;
                            
                            if (!rbx_4)
                                r8_8 = var_238_1;
                            else
                            {
                                char rcx_14 = rbx_4;
                                r8_8 = r11_8 >> rax_19 | var_238_1 << rcx_14;
                                r11_8 = r11_8 << rcx_14;
                                
                                if (r13_1 >= 3)
                                    r11_8 = r11_8 | arg1[r13_1 - 3 + 1] >> r14_3;
                            }
                            
                            int64_t r9_4 = COMBINE(0, r8_8) / rax_20;
                            uint64_t r8_9 = COMBINE(0, r8_8) % rax_20;
                            
                            if (r9_4 > 0xffffffff)
                            {
                                int64_t rax_32 = -0xffffffff + r9_4;
                                r9_4 = 0xffffffff;
                                r8_9 += rax_32 * rax_20;
                            }
                            
                            if (r8_9 <= 0xffffffff)
                            {
                                uint64_t rdx_11 = arg_18;
                                int64_t i = rdx_11 * r9_4;
                                
                                while (i > (r8_9 << 0x20 | r11_8))
                                {
                                    r9_4 -= 1;
                                    i -= rdx_11;
                                    r8_9 += rax_20;
                                    
                                    if (r8_9 > 0xffffffff)
                                        break;
                                }
                                
                                r14_3 = arg_8;
                            }
                            
                            if (r9_4)
                            {
                                uint64_t r10_2 = 0;
                                int32_t r11_9 = 0;
                                
                                if (rdi_1)
                                {
                                    int32_t* r14_6 = &arg2[1];
                                    
                                    do
                                    {
                                        uint64_t rax_35 = *r14_6;
                                        r14_6 = &r14_6[1];
                                        int64_t r10_3 = r10_2 + rax_35 * r9_4;
                                        uint64_t rax_37 = r11_9 + r12_2;
                                        int32_t r8_10 = r10_3;
                                        uint64_t r10_4 = r10_3 >> 0x20;
                                        int32_t rax_38 = arg1[rax_37 + 1];
                                        r10_2 = r10_4 + 1;
                                        
                                        if (rax_38 >= r8_10)
                                            r10_2 = r10_4;
                                        
                                        r11_9 += 1;
                                        arg1[rax_37 + 1] = rax_38 - r8_10;
                                    } while (r11_9 < rdi_1);
                                    
                                    r14_3 = arg_8;
                                }
                                
                                int32_t* r11_11 = &arg2[1];
                                
                                if (rdx_7 < r10_2)
                                {
                                    int32_t r10_5 = 0;
                                    
                                    if (rdi_1)
                                    {
                                        uint64_t r8_11 = 0;
                                        
                                        do
                                        {
                                            uint64_t rcx_21 = *r11_11;
                                            void* rdx_13 = &arg1[r10_5 + r12_2];
                                            r10_5 += 1;
                                            r11_11 = &r11_11[1];
                                            uint64_t r8_13 = r8_11 + *(rdx_13 + 4) + rcx_21;
                                            *(rdx_13 + 4) = r8_13;
                                            r8_11 = r8_13 >> 0x20;
                                        } while (r10_5 < rdi_1);
                                    }
                                    
                                    r9_4 -= 1;
                                }
                                
                                r10_1 = r13_1 - 1;
                            }
                            
                            r13_1 = r13_1 - 1;
                            r11_7 = (var_228_1 << 0x20) + r9_4;
                            temp7_1 = r12_2;
                            r12_2 -= 1;
                            var_228_1 = r11_7;
                        } while (temp7_1 - 1 >= 0);
                    }
                    
                    int32_t i_3 = r10_1 + 1;
                    int32_t i_1 = i_3;
                    
                    if (i_3 < *arg1)
                    {
                        do
                        {
                            uint64_t i_2 = i_1;
                            i_1 += 1;
                            arg1[i_2 + 1] = 0;
                        } while (i_1 < *arg1);
                    }
                    
                    *arg1 = i_3;
                    
                    if (i_3)
                    {
                        uint64_t rdx_14;
                        
                        do
                        {
                            rdx_14 = i_3 - 1;
                            i_3 = rdx_14;
                            
                            if (arg1[rdx_14 + 1])
                                break;
                            
                            *arg1 = rdx_14;
                        } while (rdx_14);
                    }
                    
                    return r11_7;
                }
            }
        }
    }
    
    return 0;
}

int64_t sub_140004f5c(int64_t* arg1)
{
    if (arg1[1])
        return *arg1;
    
    int64_t var_18 = 0;
    _invoke_watson();
    /* no return */
}

int64_t __crt_strtox::floating_point_value::as_float(int64_t* arg1)
{
    if (!arg1[1])
        return *arg1;
    
    int64_t var_18 = 0;
    _invoke_watson();
    /* no return */
}

int64_t sub_140004fd4(uint64_t arg1, int32_t arg2, int32_t arg3, char arg4, int64_t arg5 @ rbp, uint64_t** arg6)
{
    int32_t arg_10 = arg2;
    int64_t var_8 = arg5;
    int32_t arg_8 = 0;
    uint64_t rbx = arg1;
    uint64_t rflags;
    int32_t rcx;
    rcx = _bit_scan_reverse(arg1);
    uint64_t rsi = arg3;
    int32_t r15 = arg2;
    int32_t rcx_1 = 0;
    uint64_t** r9 = arg6;
    arg2 = r9[1];
    uint64_t rax;
    rax = arg2;
    char temp1 = rax;
    rax = -(rax);
    rax = arg2;
    int32_t rbp_3 = ((arg5 - arg5) & 0x1d) + 0x18 - rcx_1;
    int32_t rdi_1 = r15 - rbp_3;
    char temp2 = rax;
    rax = -(rax);
    uint64_t r8_2 = ((arg3 - arg3) & 0x380) + 0x7f;
    
    if (rdi_1 <= r8_2)
    {
        rax = arg2;
        char temp3_1 = rax;
        rax = -(rax);
        uint64_t rcx_4 = ((rcx_1 - rcx_1) & 0xfffffc80) - 0x7e;
        char rcx_11;
        
        if (rdi_1 < rcx_4)
        {
            int32_t r10_2 = r15 - 1 + r8_2;
            rdi_1 = -(r8_2);
            
            if (r10_2 >= 0)
            {
                rcx_11 = r10_2;
            label_1400052e9:
                rbx <<= rcx_11;
            label_1400052ec:
                uint64_t* r9_1 = *r9;
                rax = arg2;
                char temp5_1 = rax;
                rax = -(rax);
                int64_t r8_7 = (((r8_2 - r8_2) & 0xfffffff800000) + 0x7fffff) & rbx;
                
                if (!arg2)
                {
                    int32_t rcx_25 = rsi << 0x1f | (*r9_1 & 0x7fffffff);
                    int32_t rdx_4 = (((rdi_1 + 0x7f) << 0x17 ^ rcx_25) & 0x7f800000) ^ rcx_25;
                    *r9_1 = ((rdx_4 ^ r8_7) & 0x7fffff) ^ rdx_4;
                }
                else
                {
                    int64_t rcx_21 = (rdi_1 + 0x3ff) << 0x34;
                    *r9_1 = (((rsi << 0x3f ^ rcx_21) & 0x8000000000000000)
                        ^ (rcx_21 & 0xfff0000000000000)) | r8_7;
                }
                
                return 0;
            }
            
            int32_t r13_2 = -(r10_2);
            
            if (r13_2 < 0x40)
            {
                int64_t rax_3 = 1 << (r13_2 - 1);
                int64_t r12_2 = rax_3 & rbx;
                
                if (!arg4 || rbx & (rax_3 - 1))
                    r15 = 1;
                else
                    r15 = 0;
                
                if (r12_2 || r15)
                {
                    rax_3 = __scrt_wide_argv_policy::configure_argv();
                    
                    if (!rax_3)
                    {
                        if (!r12_2 || (!r15 && !(1 << r13_2 & rbx)))
                        {
                            r9 = arg6;
                            rax_3 = 0;
                        }
                        else
                        {
                            rax_3 = 1;
                            r9 = arg6;
                        }
                    }
                    else if (rax_3 == 0x100)
                    {
                        rax_3 = rsi;
                        r9 = arg6;
                    }
                    else
                    {
                        r9 = arg6;
                        
                        if (rax_3 != 0x200)
                            rax_3 = 0;
                        else
                        {
                            rax_3 = rsi;
                            rax_3 ^= 1;
                        }
                    }
                }
                else
                    rax_3 = 0;
                
                r15 = arg_10;
                rcx_4 = r13_2;
                rbx = (rbx >> rcx_4) + rax_3;
            }
            else
                rbx = 0;
            
            arg2 = r9[1];
            
            if (!rbx)
            {
                uint64_t* rcx_7 = *r9;
                
                if (!arg2)
                    *rcx_7 = rsi << 0x1f;
                else
                    *rcx_7 = rsi << 0x3f;
                
                return 2;
            }
            
            rax = arg2;
            char temp8_1 = rax;
            rax = -(rax);
            
            if (rbx > ((rcx_4 - rcx_4) & 0xfffffff800000) + 0x7fffff)
                rdi_1 = r15 - r10_2 - rbp_3 - 1;
            
            goto label_1400052ec;
        }
        
        if (rbp_3 >= 0)
        {
            if (rbp_3 <= 0)
                goto label_1400052ec;
            
            rcx_11 = rbp_3;
            goto label_1400052e9;
        }
        
        int32_t rbp_4 = -(rbp_3);
        
        if (rbp_4 < 0x40)
        {
            int64_t rax_8 = 1 << (rbp_4 - 1);
            int64_t r12_4 = rax_8 & rbx;
            
            if (!arg4 || rbx & (rax_8 - 1))
                r15 = 1;
            else
                r15 = 0;
            
            if (r12_4 || r15)
            {
                rax_8 = __scrt_wide_argv_policy::configure_argv();
                
                if (!rax_8)
                {
                    if (!r12_4 || (!r15 && !(1 << rbp_4 & rbx)))
                    {
                        r9 = arg6;
                        rax_8 = 0;
                    }
                    else
                    {
                        rax_8 = 1;
                        r9 = arg6;
                    }
                }
                else if (rax_8 == 0x100)
                {
                    rax_8 = rsi;
                    r9 = arg6;
                }
                else
                {
                    r9 = arg6;
                    
                    if (rax_8 != 0x200)
                        rax_8 = 0;
                    else
                    {
                        rax_8 = rsi;
                        rax_8 ^= 1;
                    }
                }
            }
            else
                rax_8 = 0;
            
            rcx_4 = rbp_4;
            rbx = (rbx >> rcx_4) + rax_8;
        }
        else
            rbx = 0;
        
        arg2 = r9[1];
        rax = arg2;
        int64_t rcx_16 = ((rcx_4 - rcx_4) & 0x1fffffff000000) + 0xffffff;
        
        if (rbx <= rcx_16)
            goto label_1400052ec;
        
        rbx u>>= 1;
        rax = arg2;
        rdi_1 += 1;
        char temp7_1 = rax;
        rax = -(rax);
        
        if (rdi_1 <= ((rcx_16 - rcx_16) & 0x380) + 0x7f)
            goto label_1400052ec;
    }
    
    uint64_t* r8_3 = *r9;
    
    if (!arg2)
        *r8_3 = rsi << 0x1f | 0x7f800000;
    else
        *r8_3 = rsi << 0x3f | 0x7ff0000000000000;
    
    return 3;
}

int64_t __crt_strtox::assemble_floating_point_value_from_big_integer(int32_t* arg1, int32_t arg2, uint64_t arg3, char arg4, int64_t arg5 @ rbp, uint64_t** arg6)
{
    int64_t r15;
    r15 = arg3;
    int32_t r10 = 0;
    int32_t rdx_2 = ((arg2 - arg2) & 0x1d) + 0x17;
    uint64_t rcx_2;
    
    if (arg2 > 0x40)
    {
        uint64_t rdi_1 = arg2 >> 5;
        uint64_t rsi_1 = rdi_1 - 2;
        uint64_t r12_1 = arg1[rsi_1 + 1];
        uint64_t rbx_1 = arg1[rdi_1 - 1 + 1];
        int32_t r14_2 = rsi_1 << 5;
        arg3 = arg2 & 0x1f;
        uint64_t rbx_3;
        
        if (arg3)
        {
            uint64_t rdi_2 = (1 << arg3) - 1;
            rbx_3 = (rbx_1 << (0x40 - arg3 - 0x20)) + ((arg1[rdi_1 + 1] & rdi_2) << (0x40 - arg3))
                + ((~((1 << arg3) - 1) & r12_1) >> arg3);
            uint32_t rax_5;
            
            if (!arg4)
                rax_5 = 1;
            
            if (arg4 || rdi_2 & r12_1)
                rax_5 = 0;
            
            int32_t i = 0;
            
            if (rsi_1)
            {
                do
                {
                    arg4 = 0;
                    
                    if (!arg1[i + 1])
                        arg4 = rax_5;
                    
                    i += 1;
                    rax_5 = arg4;
                } while (i != rsi_1);
            }
            
            arg4 = rax_5;
            rdx_2 += r14_2 + arg3;
        }
        else
        {
            rdx_2 += r14_2;
            rbx_3 = (rbx_1 << 0x20) + r12_1;
            arg4 ^= 1;
            int32_t i_1 = 0;
            
            if (rsi_1)
            {
                do
                {
                    arg3 = 0;
                    
                    if (!arg1[i_1 + 1])
                        arg3 = arg4;
                    
                    i_1 += 1;
                    arg4 = arg3;
                } while (i_1 != rsi_1);
            }
        }
        
        rcx_2 = rbx_3;
        arg3 = r15;
    }
    else
    {
        uint64_t rax_1;
        
        if (*arg1 <= 0)
            rax_1 = 0;
        else
        {
            rax_1 = arg1[1];
            
            if (*arg1 > 1)
                r10 = arg1[2];
        }
        
        arg4 ^= 1;
        rcx_2 = (r10 << 0x20) + rax_1;
    }
    
    /* tailcall */
    return sub_140004fd4(rcx_2, rdx_2, arg3, arg4, arg5, arg6);
}

int64_t sub_1400054ec(int32_t* arg1, uint64_t** arg2)
{
    void var_c78;
    void* rbp = &var_c78;
    void var_d78;
    int64_t var_48 = __security_cookie ^ &var_d78;
    int64_t rax_1;
    rax_1 = arg2[1];
    int32_t r11 = *arg1;
    char temp0 = rax_1;
    rax_1 = -(rax_1);
    uint64_t rdx = arg1[1];
    int32_t i_10 = 0;
    void* r10 = &arg1[2];
    int32_t i = 0;
    
    if (r11 < 0)
        r11 = 0;
    
    int32_t rax_5 = r11;
    uint64_t r15 = 0;
    int32_t r13 = 0;
    
    if (r11 >= rdx)
        rax_5 = rdx;
    
    int32_t r11_1 = r11 - rax_5;
    void* i_39 = &arg1[2] + rax_5;
    int32_t var_d44 = r11_1;
    void* i_30 = i_39;
    void* rax_7 = &arg1[2] + rdx;
    int32_t rax_8 = rax_7 - i_39;
    int32_t var_784;
    int32_t var_5b4[0x73];
    int32_t var_214;
    
    if (r10 != i_39)
    {
        do
        {
            if (r13 == 9)
            {
                if (i)
                {
                    uint32_t r8_1 = 0;
                    int32_t r9_1 = 0;
                    
                    do
                    {
                        uint64_t rdx_1 = r9_1;
                        r9_1 += 1;
                        int64_t rcx_2 = (&var_784)[rdx_1] * 0x3b9aca00 + r8_1;
                        (&var_784)[rdx_1] = rcx_2;
                        r8_1 = rcx_2 >> 0x20;
                    } while (r9_1 != i);
                    
                    i_39 = i_30;
                    
                    if (!r8_1)
                        i = i_10;
                    else if (i_10 >= 0x73)
                    {
                        i = 0;
                        i_10 = 0;
                    }
                    else
                    {
                        (&var_784)[i_10] = r8_1;
                        i = i_10 + 1;
                        i_10 = i;
                    }
                }
                
                if (r15)
                {
                    int32_t r8_3 = 0;
                    
                    if (!i)
                    {
                    label_14000566a:
                        
                        if (i >= 0x73)
                        {
                            i = 0;
                            i_10 = 0;
                        }
                        else
                        {
                            (&var_784)[i] = r15;
                            i = i_10 + 1;
                            i_10 = i;
                        }
                    }
                    else
                    {
                        do
                        {
                            uint64_t rdx_2 = r8_3;
                            r8_3 += 1;
                            uint64_t rcx_4 = (&var_784)[rdx_2] + r15;
                            (&var_784)[rdx_2] = rcx_4;
                            i = i_10;
                            r15 = rcx_4 >> 0x20;
                        } while (r8_3 != i);
                        
                        if (r15)
                            goto label_14000566a;
                    }
                }
                
                r15 = 0;
                r13 = 0;
            }
            
            uint32_t rax_15 = *r10;
            r13 += 1;
            r10 += 1;
            r15 = rax_15 + ((r15 * 5) << 1);
        } while (r10 != i_39);
        
        if (r13)
        {
            uint32_t r12_2 = r13 / 0xa;
            bool cond:4_1 = r12_2;
            
            while (true)
            {
                if (cond:4_1)
                {
                    uint32_t rax_17 = r12_2;
                    
                    if (r12_2 > 0x26)
                        rax_17 = 0x26;
                    
                    uint64_t rax_18 = rax_17 - 1;
                    uint64_t rcx_6 = *((rax_18 << 2) + 0x14001ecf2);
                    uint64_t rsi_1 = *((rax_18 << 2) + 0x14001ecf3);
                    sub_14001c640(&var_214, 0, rcx_6 << 2);
                    int128_t* rax_21;
                    rax_21 = sub_14001cb40(&(&var_214)[rcx_6], 
                        &data_14001e3e0 + (*((rax_18 << 2) + 0x14001ecf0) << 2), rsi_1 << 2);
                    uint64_t i_23 = rsi_1 + rcx_6;
                    uint32_t r8_6;
                    
                    if (i_23 <= 1)
                    {
                        rax_21 = var_214;
                        
                        if (!rax_21)
                        {
                        label_140005768:
                            i = 0;
                            i_10 = 0;
                            rax_21 = 1;
                        }
                        else if (rax_21 == 1 || !i)
                            rax_21 = 1;
                        else
                        {
                            r8_6 = 0;
                            i_39 = nullptr;
                            
                            do
                            {
                                uint64_t rdx_5 = i_39;
                                i_39 = i_39 + 1;
                                void* rcx_11 = (&var_784)[rdx_5] * rax_21 + r8_6;
                                (&var_784)[rdx_5] = rcx_11;
                                r8_6 = rcx_11 >> 0x20;
                            } while (i_39 != i);
                            
                        label_1400057bb:
                            
                            if (!r8_6)
                            {
                                i = i_10;
                                rax_21 = 1;
                            }
                            else if (i_10 >= 0x73)
                            {
                                i = 0;
                                i_10 = 0;
                                rax_21 = 0;
                            }
                            else
                            {
                                (&var_784)[i_10] = r8_6;
                                i = i_10 + 1;
                                i_10 = i;
                                rax_21 = 1;
                            }
                        }
                    }
                    else if (i > 1)
                    {
                        bool c_1 = i_23 < i;
                        int32_t i_1 = i;
                        int32_t* rcx_16 = &var_214;
                        
                        if (!c_1)
                            rcx_16 = &var_784;
                        
                        if (c_1)
                            i_1 = i_23;
                        
                        int32_t* var_d18_1 = rcx_16;
                        rax_21 = c_1;
                        int32_t* rdx_8 = &var_784;
                        
                        if (!c_1)
                            rdx_8 = &var_214;
                        
                        int32_t var_d38;
                        var_d38 = rdx_8;
                        int32_t i_11 = 0;
                        i_39 = nullptr;
                        
                        if (rax_21)
                            i_23 = i;
                        
                        i = 0;
                        
                        if (i_1)
                        {
                            do
                            {
                                rax_21 = i_39;
                                uint64_t rsi_3 = rcx_16[rax_21];
                                
                                if (rsi_3)
                                {
                                    uint32_t j_5 = 0;
                                    int32_t j = i_39;
                                    
                                    if (i_23)
                                    {
                                        int32_t rdi_3 = -(i_39);
                                        
                                        while (j != 0x73)
                                        {
                                            uint64_t j_6 = j;
                                            
                                            if (j == i)
                                            {
                                                var_5b4[j_6] = 0;
                                                i_11 = j + 1;
                                            }
                                            
                                            uint64_t rax_24 = rdi_3 + j;
                                            j += 1;
                                            int64_t rdx_12 =
                                                rdx_8[rax_24] * rsi_3 + j_5 + var_5b4[j_6];
                                            var_5b4[j_6] = rdx_12;
                                            i = i_11;
                                            j_5 = rdx_12 >> 0x20;
                                            
                                            if (rdi_3 + j == i_23)
                                                break;
                                            
                                            rdx_8 = var_d38;
                                        }
                                        
                                        if (j_5)
                                        {
                                            uint32_t j_1;
                                            
                                            do
                                            {
                                                if (j == 0x73)
                                                    goto label_140005b58;
                                                
                                                uint64_t j_3 = j;
                                                
                                                if (j == i)
                                                {
                                                    var_5b4[j_3] = 0;
                                                    i_11 = j + 1;
                                                }
                                                
                                                j += 1;
                                                void* rcx_18 = var_5b4[j_3] + j_5;
                                                var_5b4[j_3] = rcx_18;
                                                i = i_11;
                                                j_1 = rcx_18 >> 0x20;
                                                j_5 = j_1;
                                            } while (j_1);
                                        }
                                    }
                                    
                                    if (j == 0x73)
                                        goto label_140005b58;
                                    
                                    rcx_16 = var_d18_1;
                                    rdx_8 = var_d38;
                                }
                                else if (i_39 == i)
                                {
                                    i = i_39 + 1;
                                    var_5b4[rax_21] = 0;
                                    i_11 = i;
                                }
                                
                                i_39 = i_39 + 1;
                            } while (i_39 != i_1);
                        }
                        
                        void* r8_12 = i << 2;
                        i_10 = i;
                        
                        if (r8_12)
                        {
                            int128_t* rcx_19 = &var_784;
                            
                            if (r8_12 > 0x1cc)
                            {
                                sub_14001c640(rcx_19, 0, 0x1cc);
                                *sub_14000dedc() = 0x22;
                                rax_21 = _invalid_parameter_noinfo();
                            }
                            else
                                rax_21 = sub_14001cb40(rcx_19, &var_5b4, r8_12);
                            
                            i = i_10;
                        }
                        
                        rax_21 = 1;
                    }
                    else
                    {
                        uint64_t rbx_2 = var_784;
                        void* r8_9 = i_23 << 2;
                        i_10 = i_23;
                        i = i_23;
                        
                        if (r8_9)
                        {
                            int128_t* rcx_12 = &var_784;
                            
                            if (r8_9 > 0x1cc)
                            {
                                sub_14001c640(rcx_12, 0, 0x1cc);
                                *sub_14000dedc() = 0x22;
                                rax_21 = _invalid_parameter_noinfo();
                            }
                            else
                                rax_21 = sub_14001cb40(rcx_12, &var_214, r8_9);
                            
                            i = i_10;
                        }
                        
                        if (!rbx_2)
                            goto label_140005768;
                        
                        if (rbx_2 != 1 && i)
                        {
                            r8_6 = 0;
                            i_39 = nullptr;
                            
                            do
                            {
                                uint64_t rdx_7 = i_39;
                                i_39 = i_39 + 1;
                                void* rcx_15 = (&var_784)[rdx_7] * rbx_2 + r8_6;
                                (&var_784)[rdx_7] = rcx_15;
                                r8_6 = rcx_15 >> 0x20;
                            } while (i_39 != i);
                            
                            goto label_1400057bb;
                        }
                        
                        rax_21 = 1;
                    }
                    
                    if (rax_21)
                    {
                        uint32_t temp28_1 = r12_2;
                        r12_2 -= rax_17;
                        cond:4_1 = temp28_1 != rax_17;
                        continue;
                    }
                }
                else
                {
                    if (r13 == r13 / 0xa * 0xa)
                        break;
                    
                    int32_t rax_32 = *(((r13 % 0xa - 1) << 2) + 0x14001ed88);
                    
                    if (rax_32)
                    {
                        if (rax_32 == 1)
                            break;
                        
                        if (!i)
                            break;
                        
                        uint32_t r8_13 = 0;
                        i_39 = nullptr;
                        
                        do
                        {
                            uint64_t rdx_16 = i_39;
                            i_39 = i_39 + 1;
                            int64_t rcx_22 = (&var_784)[rdx_16] * rax_32 + r8_13;
                            (&var_784)[rdx_16] = rcx_22;
                            r8_13 = rcx_22 >> 0x20;
                        } while (i_39 != i);
                        
                        if (!r8_13)
                        {
                            i = i_10;
                            break;
                        }
                        
                        if (i_10 < 0x73)
                        {
                            (&var_784)[i_10] = r8_13;
                            i = i_10 + 1;
                            i_10 = i;
                            break;
                        }
                    }
                }
                
            label_140005b58:
                i = 0;
                i_10 = 0;
                break;
            }
            
            if (!r15)
                r11_1 = var_d44;
            else
            {
                int32_t r8_15 = 0;
                
                if (!i)
                {
                label_140005ba1:
                    r11_1 = var_d44;
                    
                    if (i >= 0x73)
                    {
                        i = 0;
                        i_10 = 0;
                    }
                    else
                    {
                        (&var_784)[i] = r15;
                        i = i_10 + 1;
                        i_10 = i;
                    }
                }
                else
                {
                    uint32_t rdx_19;
                    
                    do
                    {
                        uint64_t rcx_23 = r8_15;
                        r8_15 += 1;
                        uint64_t rdx_18 = (&var_784)[rcx_23] + r15;
                        (&var_784)[rcx_23] = rdx_18;
                        i = i_10;
                        rdx_19 = rdx_18 >> 0x20;
                        r15 = rdx_19;
                    } while (r8_15 != i);
                    
                    if (rdx_19)
                        goto label_140005ba1;
                    
                    r11_1 = var_d44;
                }
            }
        }
    }
    
    if (!r11_1)
        goto label_140006118;
    
    uint32_t r15_3 = r11_1 / 0xa;
    uint32_t var_d3c_2 = r15_3;
    int128_t* rax_42;
    uint64_t rcx_27;
    
    if (r15_3)
    {
        while (true)
        {
            uint32_t r13_2 = r15_3;
            
            if (r15_3 > 0x26)
                r13_2 = 0x26;
            
            uint64_t rax_39 = r13_2 - 1;
            uint64_t rcx_24 = *((rax_39 << 2) + 0x14001ecf2);
            uint64_t rsi_4 = *((rax_39 << 2) + 0x14001ecf3);
            sub_14001c640(&var_214, 0, rcx_24 << 2);
            rax_42 = sub_14001cb40(&(&var_214)[rcx_24], 
                &data_14001e3e0 + (*((rax_39 << 2) + 0x14001ecf0) << 2), rsi_4 << 2);
            uint64_t i_20 = rsi_4 + rcx_24;
            uint32_t r8_18;
            
            if (i_20 <= 1)
            {
                rax_42 = var_214;
                
                if (!rax_42)
                {
                label_140005ca7:
                    i = 0;
                    i_10 = 0;
                    rax_42 = 1;
                }
                else if (rax_42 == 1 || !i)
                    rax_42 = 1;
                else
                {
                    r8_18 = 0;
                    i_39 = nullptr;
                    
                    do
                    {
                        uint64_t rdx_22 = i_39;
                        i_39 = i_39 + 1;
                        rcx_27 = (&var_784)[rdx_22] * rax_42 + r8_18;
                        (&var_784)[rdx_22] = rcx_27;
                        r8_18 = rcx_27 >> 0x20;
                    } while (i_39 != i);
                    
                label_140005cfa:
                    
                    if (!r8_18)
                    {
                        i = i_10;
                        rax_42 = 1;
                    }
                    else if (i_10 >= 0x73)
                    {
                        i = 0;
                        i_10 = 0;
                        rax_42 = 0;
                    }
                    else
                    {
                        (&var_784)[i_10] = r8_18;
                        i = i_10 + 1;
                        i_10 = i;
                        rax_42 = 1;
                    }
                }
            }
            else if (i > 1)
            {
                bool c_2 = i_20 < i;
                int32_t i_2 = i;
                int32_t* r12_3 = &var_214;
                
                if (!c_2)
                    r12_3 = &var_784;
                
                int32_t* r13_3 = &var_784;
                
                if (c_2)
                    i_2 = i_20;
                
                rcx_27 = &var_214;
                
                if (!c_2)
                    r13_3 = &var_214;
                
                rax_42 = c_2;
                int32_t i_12 = 0;
                i_39 = nullptr;
                
                if (rax_42)
                    i_20 = i;
                
                i = 0;
                
                if (i_2)
                {
                    do
                    {
                        rax_42 = i_39;
                        uint64_t rsi_6 = r12_3[rax_42];
                        
                        if (rsi_6)
                        {
                            uint32_t rbx_6 = 0;
                            int32_t j_2 = i_39;
                            
                            if (i_20)
                            {
                                int32_t rdi_6 = -(i_39);
                                
                                while (j_2 != 0x73)
                                {
                                    uint64_t j_7 = j_2;
                                    
                                    if (j_2 == i)
                                    {
                                        var_5b4[j_7] = 0;
                                        i_12 = j_2 + 1;
                                    }
                                    
                                    uint64_t rax_45 = rdi_6 + j_2;
                                    j_2 += 1;
                                    int64_t rdx_28 = r13_3[rax_45] * rsi_6 + rbx_6 + var_5b4[j_7];
                                    var_5b4[j_7] = rdx_28;
                                    i = i_12;
                                    rbx_6 = rdx_28 >> 0x20;
                                    
                                    if (rdi_6 + j_2 == i_20)
                                        break;
                                }
                                
                                if (rbx_6)
                                {
                                    do
                                    {
                                        if (j_2 == 0x73)
                                            goto label_140006093;
                                        
                                        uint64_t j_4 = j_2;
                                        
                                        if (j_2 == i)
                                        {
                                            var_5b4[j_4] = 0;
                                            i_12 = j_2 + 1;
                                        }
                                        
                                        j_2 += 1;
                                        void* rcx_34 = rbx_6 + var_5b4[j_4];
                                        var_5b4[j_4] = rcx_34;
                                        i = i_12;
                                        rcx_27 = rcx_34 >> 0x20;
                                        rbx_6 = rcx_27;
                                    } while (rcx_27);
                                }
                            }
                            
                            if (j_2 == 0x73)
                                goto label_140006093;
                        }
                        else if (i_39 == i)
                        {
                            i = i_39 + 1;
                            var_5b4[rax_42] = 0;
                            i_12 = i;
                        }
                        
                        i_39 = i_39 + 1;
                    } while (i_39 != i_2);
                }
                
                void* r8_24 = i << 2;
                i_10 = i;
                
                if (r8_24)
                {
                    int128_t* rcx_35 = &var_784;
                    
                    if (r8_24 > 0x1cc)
                    {
                        sub_14001c640(rcx_35, 0, 0x1cc);
                        *sub_14000dedc() = 0x22;
                        rax_42 = _invalid_parameter_noinfo();
                    }
                    else
                        rax_42 = sub_14001cb40(rcx_35, &var_5b4, r8_24);
                    
                    i = i_10;
                }
                
                r15_3 = var_d3c_2;
                rax_42 = 1;
            }
            else
            {
                uint64_t rbx_5 = var_784;
                uint64_t r8_21 = i_20 << 2;
                i_10 = i_20;
                i = i_20;
                
                if (r8_21)
                {
                    int128_t* rcx_30 = &var_784;
                    
                    if (r8_21 > 0x1cc)
                    {
                        sub_14001c640(rcx_30, 0, 0x1cc);
                        *sub_14000dedc() = 0x22;
                        rax_42 = _invalid_parameter_noinfo();
                    }
                    else
                        rax_42 = sub_14001cb40(rcx_30, &var_214, r8_21);
                    
                    i = i_10;
                }
                
                if (!rbx_5)
                    goto label_140005ca7;
                
                if (rbx_5 != 1 && i)
                {
                    r8_18 = 0;
                    i_39 = nullptr;
                    
                    do
                    {
                        uint64_t rdx_24 = i_39;
                        i_39 = i_39 + 1;
                        rcx_27 = (&var_784)[rdx_24] * rbx_5 + r8_18;
                        (&var_784)[rdx_24] = rcx_27;
                        r8_18 = rcx_27 >> 0x20;
                    } while (i_39 != i);
                    
                    goto label_140005cfa;
                }
                
                rax_42 = 1;
            }
            
            if (!rax_42)
                goto label_140006093;
            
            uint32_t temp21_1 = r15_3;
            r15_3 -= r13_2;
            var_d3c_2 = r15_3;
            
            if (temp21_1 == r13_2)
            {
                r11_1 = var_d44;
                break;
            }
        }
    }
    
    if (r11_1 == r11_1 / 0xa * 0xa)
        goto label_140006118;
    
    uint64_t rax_52 = *(((r11_1 % 0xa - 1) << 2) + 0x14001ed88);
    int64_t result;
    
    if (rax_52)
    {
        if (rax_52 == 1)
            goto label_140006118;
        
        if (!i)
            goto label_14000611a;
        
        uint32_t r8_25 = 0;
        i_39 = nullptr;
        
        do
        {
            uint64_t rdx_32 = i_39;
            i_39 = i_39 + 1;
            rcx_27 = (&var_784)[rdx_32] * rax_52 + r8_25;
            (&var_784)[rdx_32] = rcx_27;
            r8_25 = rcx_27 >> 0x20;
        } while (i_39 != i);
        
        if (!r8_25)
        {
            i = i_10;
            goto label_140006118;
        }
        
        if (i_10 < 0x73)
        {
            (&var_784)[i_10] = r8_25;
            i = i_10 + 1;
            i_10 = i;
            goto label_140006118;
        }
        
    label_140006093:
        rax_42 = arg1[0xc2];
        uint64_t* rdx_33 = *arg2;
        
        if (!arg2[1])
            *rdx_33 = ((((rcx_27 - rcx_27) & 0x80000000) + 0x7f800000) | (*rdx_33 & 0x7f800000))
                & 0xff800000;
        else
            *rdx_33 = ((((rcx_27 - rcx_27) & 0x8000000000000000) + 0x7ff0000000000000)
                & 0xfff0000000000000) | (*rdx_33 & 0x7ff0000000000000);
        
        result = 3;
    }
    else
    {
        i = 0;
        i_10 = 0;
    label_140006118:
        int32_t rcx_51;
        
        if (i)
        {
            uint64_t rcx_49 = i - 1;
            int32_t var_d38_1 = 0;
            uint64_t rflags_1;
            char temp0_1;
            temp0_1 = __bsr_gprv_memv((&var_784)[rcx_49]);
            int32_t rax_59;
            
            rax_59 = !i ? 0 : temp0_1 + 1;
            
            rcx_51 = (rcx_49 << 5) + rax_59;
        }
        else
        {
        label_14000611a:
            rcx_51 = 0;
        }
        
        int32_t r8_48 = rax_8;
        uint64_t r8_78;
        bool cond:5_1;
        
        if (rcx_51 >= ((rax_1 - rax_1) & 0x1d) + 0x19)
        {
            cond:5_1 = r8_48;
        label_14000719a:
            i_39 = cond:5_1;
            r8_78 = *(arg1 + 0x308);
            result = __crt_strtox::assemble_floating_point_value_from_big_integer(&i_10, rcx_51, 
                r8_78, i_39, rbp, arg2);
        }
        else
        {
            cond:5_1 = r8_48;
            
            if (!r8_48)
                goto label_14000719a;
            
            void* i_17 = i_30;
            int32_t i_3 = 0;
            uint64_t r12_4 = 0;
            int32_t i_9 = 0;
            int32_t r13_4 = 0;
            void var_cf4;
            void var_b24;
            int128_t var_954[0x1c];
            
            if (i_17 != rax_7)
            {
                do
                {
                    if (r13_4 == 9)
                    {
                        if (i_3)
                        {
                            uint32_t r8_29 = 0;
                            i_39 = nullptr;
                            
                            do
                            {
                                uint64_t rdx_34 = i_39;
                                i_39 = i_39 + 1;
                                int64_t rcx_53 = *(&var_954 + (rdx_34 << 2)) * 0x3b9aca00 + r8_29;
                                *(&var_954 + (rdx_34 << 2)) = rcx_53;
                                r8_29 = rcx_53 >> 0x20;
                            } while (i_39 != i_3);
                            
                            if (!r8_29)
                                i_3 = i_9;
                            else if (i_9 >= 0x73)
                            {
                                int32_t var_218_3 = 0;
                                i_9 = 0;
                                memcpy_s(&var_954, 0x1cc, &var_214, nullptr);
                                i_3 = i_9;
                            }
                            else
                            {
                                *(&var_954 + (i_9 << 2)) = r8_29;
                                i_3 = i_9 + 1;
                                i_9 = i_3;
                            }
                        }
                        
                        if (r12_4)
                        {
                            int32_t r8_32 = 0;
                            
                            if (!i_3)
                            {
                            label_140006263:
                                
                                if (i_3 >= 0x73)
                                {
                                    int32_t var_218_4 = 0;
                                    i_9 = 0;
                                    memcpy_s(&var_954, 0x1cc, &var_214, nullptr);
                                    i_3 = i_9;
                                }
                                else
                                {
                                    *(&var_954 + (i_3 << 2)) = r12_4;
                                    i_3 = i_9 + 1;
                                    i_9 = i_3;
                                }
                            }
                            else
                            {
                                do
                                {
                                    uint64_t rdx_35 = r8_32;
                                    r8_32 += 1;
                                    uint64_t rcx_56 = *(&var_954 + (rdx_35 << 2)) + r12_4;
                                    *(&var_954 + (rdx_35 << 2)) = rcx_56;
                                    i_3 = i_9;
                                    r12_4 = rcx_56 >> 0x20;
                                } while (r8_32 != i_3);
                                
                                if (r12_4)
                                    goto label_140006263;
                            }
                        }
                        
                        r12_4 = 0;
                        r13_4 = 0;
                    }
                    
                    uint32_t rax_66 = *i_17;
                    r13_4 += 1;
                    i_17 += 1;
                    r12_4 = rax_66 + ((r12_4 * 5) << 1);
                } while (i_17 != rax_7);
                
                if (r13_4)
                {
                    uint32_t rax_68 = r13_4 / 0xa;
                    bool cond:18_1 = rax_68;
                    
                    while (true)
                    {
                        if (!cond:18_1)
                        {
                            if (r13_4 == r13_4 / 0xa * 0xa)
                                break;
                            
                            int32_t rax_83 = *(((r13_4 % 0xa - 1) << 2) + 0x14001ed88);
                            
                            if (!rax_83)
                            {
                            label_140006758:
                                int32_t var_cf8_1 = 0;
                                i_9 = 0;
                                memcpy_s(&var_954, 0x1cc, &var_cf4, nullptr);
                            }
                            else
                            {
                                if (rax_83 == 1)
                                    break;
                                
                                if (!i_3)
                                    break;
                                
                                uint32_t r8_42 = 0;
                                i_39 = nullptr;
                                
                                do
                                {
                                    uint64_t rdx_47 = i_39;
                                    i_39 = i_39 + 1;
                                    int64_t rcx_78 = *(&var_954 + (rdx_47 << 2)) * rax_83 + r8_42;
                                    *(&var_954 + (rdx_47 << 2)) = rcx_78;
                                    r8_42 = rcx_78 >> 0x20;
                                } while (i_39 != i_3);
                                
                                if (r8_42)
                                {
                                    if (i_9 >= 0x73)
                                        goto label_140006758;
                                    
                                    *(&var_954 + (i_9 << 2)) = r8_42;
                                    i_3 = i_9 + 1;
                                    i_9 = i_3;
                                    break;
                                }
                            }
                            
                            i_3 = i_9;
                            break;
                        }
                        
                        uint32_t rcx_59 = rax_68;
                        
                        if (rax_68 > 0x26)
                            rcx_59 = 0x26;
                        
                        uint64_t rdi_8 = rcx_59 - 1;
                        uint64_t rcx_60 = *((rdi_8 << 2) + 0x14001ecf2);
                        uint64_t rsi_7 = *((rdi_8 << 2) + 0x14001ecf3);
                        i_17 = rcx_60 << 2;
                        sub_14001c640(&var_214, 0, i_17);
                        sub_14001cb40(&var_214 + i_17, 
                            &data_14001e3e0 + (*((rdi_8 << 2) + 0x14001ecf0) << 2), rsi_7 << 2);
                        uint64_t i_21 = rsi_7 + rcx_60;
                        uint64_t rax_72;
                        int32_t* r8_36;
                        uint32_t r8_37;
                        void* r9_2;
                        
                        if (i_21 > 1)
                        {
                            if (i_3 <= 1)
                            {
                                i_17 = var_954[0];
                                i_9 = i_21;
                                rax_72 = memcpy_s(&var_954, 0x1cc, &var_214, i_21 << 2);
                                
                                if (!i_17)
                                    goto label_14000638b;
                                
                                i_3 = i_9;
                                
                                if (i_17 == 1 || !i_3)
                                    goto label_14000666b;
                                
                                r8_37 = 0;
                                i_39 = nullptr;
                                
                                do
                                {
                                    uint64_t rdx_39 = i_39;
                                    i_39 = i_39 + 1;
                                    int64_t rcx_70 = *(&var_954 + (rdx_39 << 2)) * i_17 + r8_37;
                                    *(&var_954 + (rdx_39 << 2)) = rcx_70;
                                    r8_37 = rcx_70 >> 0x20;
                                } while (i_39 != i_3);
                                
                                goto label_1400063eb;
                            }
                            
                            bool c_5 = i_21 < i_3;
                            int32_t* rdx_40 = &var_214;
                            int32_t i_24 = i_3;
                            
                            if (!c_5)
                                rdx_40 = &var_954;
                            
                            if (c_5)
                                i_24 = i_21;
                            
                            int32_t* var_d18_2 = rdx_40;
                            int128_t (* rcx_71)[0x1c] = &var_954;
                            int32_t i_28 = i_24;
                            
                            if (!c_5)
                                rcx_71 = &var_214;
                            
                            int32_t i_18 = 0;
                            int32_t i_31 = 0;
                            
                            if (c_5)
                                i_21 = i_3;
                            
                            int32_t i_37 = 0;
                            
                            if (!i_24)
                            {
                            label_140006642:
                                r8_36 = &var_5b4;
                                r9_2 = i_31 << 2;
                                i_9 = i_31;
                                goto label_14000665f;
                            }
                            
                            while (true)
                            {
                                uint64_t i_33 = i_18;
                                uint64_t rsi_9 = rdx_40[i_33];
                                
                                if (rsi_9)
                                {
                                    i_17 = nullptr;
                                    int32_t i_4 = i_18;
                                    
                                    if (i_21)
                                    {
                                        int32_t rdi_10 = -(i_18);
                                        
                                        while (i_4 != 0x73)
                                        {
                                            uint64_t i_25 = i_4;
                                            
                                            if (i_4 == i_31)
                                            {
                                                var_5b4[i_25] = 0;
                                                i_37 = i_4 + 1;
                                            }
                                            
                                            uint64_t rax_74 = rdi_10 + i_4;
                                            i_4 += 1;
                                            int64_t rdx_44 = *(rcx_71 + (rax_74 << 2)) * rsi_9
                                                + var_5b4[i_25] + i_17;
                                            var_5b4[i_25] = rdx_44;
                                            i_17 = rdx_44 >> 0x20;
                                            i_31 = i_37;
                                            
                                            if (rdi_10 + i_4 == i_21)
                                                break;
                                        }
                                        
                                        if (i_17)
                                        {
                                            uint32_t i_5;
                                            
                                            do
                                            {
                                                if (i_4 == 0x73)
                                                    goto label_140006731;
                                                
                                                uint64_t i_14 = i_4;
                                                
                                                if (i_4 == i_31)
                                                {
                                                    var_5b4[i_14] = 0;
                                                    i_37 = i_4 + 1;
                                                }
                                                
                                                i_4 += 1;
                                                uint64_t rcx_73 = var_5b4[i_14] + i_17;
                                                var_5b4[i_14] = rcx_73;
                                                i_31 = i_37;
                                                i_5 = rcx_73 >> 0x20;
                                                i_17 = i_5;
                                            } while (i_5);
                                        }
                                        
                                        i_24 = i_28;
                                    }
                                    
                                    if (i_4 == 0x73)
                                    {
                                    label_140006731:
                                        int32_t var_b28_1 = 0;
                                        i_9 = 0;
                                        memcpy_s(&var_954, 0x1cc, &var_b24, nullptr);
                                        break;
                                    }
                                    
                                    rdx_40 = var_d18_2;
                                }
                                else if (i_18 == i_31)
                                {
                                    i_31 = i_18 + 1;
                                    var_5b4[i_33] = 0;
                                    i_37 = i_31;
                                }
                                
                                i_18 += 1;
                                
                                if (i_18 == i_24)
                                    goto label_140006642;
                            }
                        }
                        else
                        {
                            rax_72 = var_214;
                            
                            if (rax_72)
                            {
                                if (rax_72 == 1 || !i_3)
                                    goto label_14000666b;
                                
                                r8_37 = 0;
                                i_39 = nullptr;
                                
                                do
                                {
                                    uint64_t rdx_38 = i_39;
                                    i_39 = i_39 + 1;
                                    int64_t rcx_65 = *(&var_954 + (rdx_38 << 2)) * rax_72 + r8_37;
                                    *(&var_954 + (rdx_38 << 2)) = rcx_65;
                                    r8_37 = rcx_65 >> 0x20;
                                } while (i_39 != i_3);
                                
                            label_1400063eb:
                                
                                if (!r8_37)
                                    goto label_140006664;
                                
                                if (i_9 < 0x73)
                                {
                                    *(&var_954 + (i_9 << 2)) = r8_37;
                                    i_3 = i_9 + 1;
                                    i_9 = i_3;
                                    goto label_14000666b;
                                }
                                
                                int32_t var_218_7 = 0;
                                i_9 = 0;
                                rax_72 = memcpy_s(&var_954, 0x1cc, &var_214, nullptr);
                                i_3 = i_9;
                                rax_72 = 0;
                                goto label_14000666d;
                            }
                            
                        label_14000638b:
                            int32_t var_218_6 = 0;
                            r8_36 = &var_214;
                            i_9 = 0;
                            r9_2 = nullptr;
                        label_14000665f:
                            rax_72 = memcpy_s(&var_954, 0x1cc, r8_36, r9_2);
                        label_140006664:
                            i_3 = i_9;
                        label_14000666b:
                            rax_72 = 1;
                        label_14000666d:
                            
                            if (rax_72)
                            {
                                uint32_t temp35_1 = rax_68;
                                rax_68 -= rcx_59;
                                cond:18_1 = temp35_1 != rcx_59;
                                continue;
                            }
                        }
                        goto label_140006758;
                    }
                    
                    if (r12_4)
                    {
                        int32_t r8_46 = 0;
                        
                        if (!i_3)
                        {
                        label_1400067c1:
                            
                            if (i_3 >= 0x73)
                            {
                                int32_t var_cf8_2 = 0;
                                i_9 = 0;
                                memcpy_s(&var_954, 0x1cc, &var_cf4, nullptr);
                                i_3 = i_9;
                            }
                            else
                            {
                                *(&var_954 + (i_3 << 2)) = r12_4;
                                i_3 = i_9 + 1;
                                i_9 = i_3;
                            }
                        }
                        else
                        {
                            uint32_t rdx_50;
                            
                            do
                            {
                                uint64_t rcx_81 = r8_46;
                                r8_46 += 1;
                                uint64_t rdx_49 = *(&var_954 + (rcx_81 << 2)) + r12_4;
                                *(&var_954 + (rcx_81 << 2)) = rdx_49;
                                i_3 = i_9;
                                rdx_50 = rdx_49 >> 0x20;
                                r12_4 = rdx_50;
                            } while (r8_46 != i_3);
                            
                            if (rdx_50)
                                goto label_1400067c1;
                        }
                    }
                }
                
                r8_48 = rax_8;
            }
            
            if (*arg1 < 0)
                r8_48 -= *arg1;
            
            int32_t i_8 = 1;
            int128_t var_3e4[0x1c];
            var_3e4[0] = 1;
            int32_t i_13 = 1;
            uint32_t r12_7 = r8_48 / 0xa;
            
            if (r12_7)
            {
                while (true)
                {
                    uint32_t rax_91 = r12_7;
                    
                    if (r12_7 > 0x26)
                        rax_91 = 0x26;
                    
                    uint64_t rdi_11 = rax_91 - 1;
                    uint64_t rcx_83 = *((rdi_11 << 2) + 0x14001ecf2);
                    uint64_t rsi_10 = *((rdi_11 << 2) + 0x14001ecf3);
                    i_17 = rcx_83 << 2;
                    sub_14001c640(&var_214, 0, i_17);
                    sub_14001cb40(&var_214 + i_17, 
                        &data_14001e3e0 + (*((rdi_11 << 2) + 0x14001ecf0) << 2), rsi_10 << 2);
                    uint64_t i_22 = rsi_10 + rcx_83;
                    uint64_t rax_95;
                    
                    if (i_22 > 1)
                    {
                        int32_t* r8_56;
                        void* r9_8;
                        
                        if (i_8 > 1)
                        {
                            bool c_6 = i_22 < i_8;
                            int32_t* rdx_55 = &var_214;
                            int32_t i_26 = i_8;
                            
                            if (!c_6)
                                rdx_55 = &var_3e4;
                            
                            if (c_6)
                                i_26 = i_22;
                            
                            int32_t* var_d18_3 = rdx_55;
                            int128_t (* rcx_96)[0x1c] = &var_3e4;
                            int32_t i_29 = i_26;
                            
                            if (!c_6)
                                rcx_96 = &var_214;
                            
                            int32_t i_19 = 0;
                            int32_t i_32 = 0;
                            
                            if (c_6)
                                i_22 = i_8;
                            
                            int32_t i_38 = 0;
                            
                            if (!i_26)
                            {
                            label_140006c20:
                                r8_56 = &var_5b4;
                                r9_8 = i_32 << 2;
                                i_13 = i_32;
                                goto label_140006c40;
                            }
                            
                            while (true)
                            {
                                uint64_t i_34 = i_19;
                                uint64_t rsi_12 = rdx_55[i_34];
                                
                                if (rsi_12)
                                {
                                    i_17 = nullptr;
                                    int32_t i_6 = i_19;
                                    
                                    if (i_22)
                                    {
                                        int32_t rdi_13 = -(i_19);
                                        
                                        while (i_6 != 0x73)
                                        {
                                            uint64_t i_27 = i_6;
                                            
                                            if (i_6 == i_32)
                                            {
                                                var_5b4[i_27] = 0;
                                                i_38 = i_6 + 1;
                                            }
                                            
                                            uint64_t rax_97 = rdi_13 + i_6;
                                            i_6 += 1;
                                            int64_t rdx_59 = *(rcx_96 + (rax_97 << 2)) * rsi_12
                                                + i_17 + var_5b4[i_27];
                                            var_5b4[i_27] = rdx_59;
                                            i_17 = rdx_59 >> 0x20;
                                            i_32 = i_38;
                                            
                                            if (rdi_13 + i_6 == i_22)
                                                break;
                                        }
                                        
                                        if (i_17)
                                        {
                                            uint32_t i_7;
                                            
                                            do
                                            {
                                                if (i_6 == 0x73)
                                                    goto label_140006cce;
                                                
                                                uint64_t i_15 = i_6;
                                                
                                                if (i_6 == i_32)
                                                {
                                                    var_5b4[i_15] = 0;
                                                    i_38 = i_6 + 1;
                                                }
                                                
                                                i_6 += 1;
                                                uint64_t rcx_98 = var_5b4[i_15] + i_17;
                                                var_5b4[i_15] = rcx_98;
                                                i_32 = i_38;
                                                i_7 = rcx_98 >> 0x20;
                                                i_17 = i_7;
                                            } while (i_7);
                                        }
                                        
                                        i_26 = i_29;
                                    }
                                    
                                    if (i_6 == 0x73)
                                    {
                                    label_140006cce:
                                        int32_t var_b28_2 = 0;
                                        i_13 = 0;
                                        memcpy_s(&var_3e4, 0x1cc, &var_b24, nullptr);
                                        break;
                                    }
                                    
                                    rdx_55 = var_d18_3;
                                }
                                else if (i_19 == i_32)
                                {
                                    i_32 = i_19 + 1;
                                    var_5b4[i_34] = 0;
                                    i_38 = i_32;
                                }
                                
                                i_19 += 1;
                                
                                if (i_19 == i_26)
                                    goto label_140006c20;
                            }
                            
                            break;
                        }
                        
                        i_17 = var_3e4[0];
                        i_13 = i_22;
                        rax_95 = memcpy_s(&var_3e4, 0x1cc, &var_214, i_22 << 2);
                        
                        if (i_17)
                        {
                            i_8 = i_13;
                            
                            if (i_17 == 1 || !i_8)
                                rax_95 = 1;
                            else
                            {
                                uint32_t r8_57 = 0;
                                i_39 = nullptr;
                                
                                do
                                {
                                    uint64_t rdx_54 = i_39;
                                    i_39 = i_39 + 1;
                                    int64_t rcx_94 = *(&var_3e4 + (rdx_54 << 2)) * i_17 + r8_57;
                                    *(&var_3e4 + (rdx_54 << 2)) = rcx_94;
                                    r8_57 = rcx_94 >> 0x20;
                                } while (i_39 != i_8);
                                
                                if (!r8_57)
                                {
                                    i_8 = i_13;
                                    rax_95 = 1;
                                }
                                else if (i_13 >= 0x73)
                                {
                                    int32_t var_cf8_6 = 0;
                                    i_13 = 0;
                                    rax_95 = memcpy_s(&var_3e4, 0x1cc, &var_cf4, nullptr);
                                    i_8 = i_13;
                                    rax_95 = 0;
                                }
                                else
                                {
                                    *(&var_3e4 + (i_13 << 2)) = r8_57;
                                    i_8 = i_13 + 1;
                                    i_13 = i_8;
                                    rax_95 = 1;
                                }
                            }
                        }
                        else
                        {
                            int32_t var_cf8_5 = 0;
                            r8_56 = &var_cf4;
                            i_13 = 0;
                            r9_8 = nullptr;
                        label_140006c40:
                            rax_95 = memcpy_s(&var_3e4, 0x1cc, r8_56, r9_8);
                            i_8 = i_13;
                            rax_95 = 1;
                        }
                    }
                    else
                    {
                        rax_95 = var_214;
                        
                        if (!rax_95)
                        {
                            int32_t var_cf8_3 = 0;
                            i_13 = 0;
                            rax_95 = memcpy_s(&var_3e4, 0x1cc, &var_cf4, nullptr);
                            i_8 = i_13;
                            rax_95 = 1;
                        }
                        else if (rax_95 == 1 || !i_8)
                            rax_95 = 1;
                        else
                        {
                            uint32_t r8_52 = 0;
                            i_39 = nullptr;
                            
                            do
                            {
                                uint64_t rdx_53 = i_39;
                                i_39 = i_39 + 1;
                                int64_t rcx_89 = *(&var_3e4 + (rdx_53 << 2)) * rax_95 + r8_52;
                                *(&var_3e4 + (rdx_53 << 2)) = rcx_89;
                                r8_52 = rcx_89 >> 0x20;
                            } while (i_39 != i_8);
                            
                            if (!r8_52)
                            {
                                i_8 = i_13;
                                rax_95 = 1;
                            }
                            else if (i_13 >= 0x73)
                            {
                                int32_t var_cf8_4 = 0;
                                i_13 = 0;
                                rax_95 = memcpy_s(&var_3e4, 0x1cc, &var_cf4, nullptr);
                                i_8 = i_13;
                                rax_95 = 0;
                            }
                            else
                            {
                                *(&var_3e4 + (i_13 << 2)) = r8_52;
                                i_8 = i_13 + 1;
                                i_13 = i_8;
                                rax_95 = 1;
                            }
                        }
                    }
                    
                    if (!rax_95)
                        break;
                    
                    uint32_t temp31_1 = r12_7;
                    r12_7 -= rax_91;
                    
                    if (temp31_1 == rax_91)
                        goto label_140006c6b;
                }
                
                goto label_140006d72;
            }
            
        label_140006c6b:
            
            if (r8_48 == r8_48 / 0xa * 0xa)
                goto label_140006cbc;
            
            uint64_t rax_105 = *(((r8_48 % 0xa - 1) << 2) + 0x14001ed88);
            
            if (rax_105)
            {
                if (rax_105 == 1 || !i_8)
                    goto label_140006cbc;
                
                uint32_t r8_63 = 0;
                i_39 = nullptr;
                
                do
                {
                    uint64_t rdx_63 = i_39;
                    i_39 = i_39 + 1;
                    int64_t rcx_105 = *(&var_3e4 + (rdx_63 << 2)) * rax_105 + r8_63;
                    *(&var_3e4 + (rdx_63 << 2)) = rcx_105;
                    r8_63 = rcx_105 >> 0x20;
                } while (i_39 != i_8);
                
                if (!r8_63)
                    goto label_140006cb2;
                
                if (i_13 < 0x73)
                {
                    *(&var_3e4 + (i_13 << 2)) = r8_63;
                    i_8 = i_13 + 1;
                    i_13 = i_8;
                    goto label_140006cbc;
                }
                
            label_140006d72:
                int32_t var_cf8_8 = 0;
                i_13 = 0;
                memcpy_s(&var_3e4, 0x1cc, &var_cf4, nullptr);
                i_17 = arg1[0xc2];
                
                if (!arg2[1])
                {
                    char temp33_1 = i_17;
                    i_17 = -(i_17);
                    *__crt_strtox::floating_point_value::as_float(arg2) =
                        (arg2 - arg2) & 0x80000000;
                }
                else
                {
                    char temp34_1 = i_17;
                    i_17 = -(i_17);
                    *sub_140004f5c(arg2) = (arg2 - arg2) & 0x8000000000000000;
                }
                
                result = 2;
            }
            else
            {
                int32_t var_cf8_7 = 0;
                i_13 = 0;
                memcpy_s(&var_3e4, 0x1cc, &var_cf4, nullptr);
            label_140006cb2:
                i_8 = i_13;
            label_140006cbc:
                int32_t rdx_62;
                
                if (i_3)
                {
                    uint64_t rdx_64 = i_3 - 1;
                    int32_t var_d38_4 = 0;
                    uint64_t rflags_2;
                    char temp0_2;
                    temp0_2 = __bsr_gprv_memv(*(&var_954 + (rdx_64 << 2)));
                    int32_t rax_112;
                    
                    rax_112 = !i_3 ? 0 : temp0_2 + 1;
                    
                    rdx_62 = (rdx_64 << 5) + rax_112;
                }
                else
                    rdx_62 = 0;
                
                int32_t rcx_112;
                
                if (i_8)
                {
                    uint64_t rcx_113 = i_8 - 1;
                    int32_t var_d38_5 = 0;
                    uint64_t rflags_3;
                    char temp0_3;
                    temp0_3 = __bsr_gprv_memv(*(&var_3e4 + (rcx_113 << 2)));
                    int32_t rax_114;
                    
                    rax_114 = !i_8 ? 0 : temp0_3 + 1;
                    
                    rcx_112 = (rcx_113 << 5) + rax_114;
                }
                else
                    rcx_112 = 0;
                
                int32_t rbx_11 = (i_17 - i_17) & (rcx_112 - rdx_62);
                
                if (rbx_11 > 0)
                {
                    int32_t var_d48_2 = 0;
                    int32_t rsi_14 = rbx_11 & 0x1f;
                    uint32_t r8_68 = rbx_11 >> 5;
                    int32_t rdi_14 = 1 << (0x20 - rsi_14);
                    uint64_t rflags_4;
                    char temp0_4;
                    temp0_4 = __bsr_gprv_memv(*(&var_954 + ((i_3 - 1) << 2)));
                    int32_t rcx_117;
                    
                    rcx_117 = rdi_14 == 1 ? 0 : temp0_4 + 1;
                    
                    int32_t i_16;
                    
                    if (r8_68 + i_3 <= 0x73)
                    {
                        int32_t rdx_66;
                        rdx_66 = rsi_14 > 0x20 - rcx_117;
                        i_16 = rdx_66 + r8_68 + i_3;
                    }
                    
                    if (r8_68 + i_3 > 0x73 || i_16 > 0x73)
                    {
                        int32_t var_cf8_9 = 0;
                        i_9 = 0;
                        rcx_112 = memcpy_s(&var_954, 0x1cc, &var_cf4, nullptr);
                        i_3 = i_9;
                    }
                    else
                    {
                        uint64_t r11_3 = i_16 - 1;
                        
                        if (r11_3 != r8_68 - 1)
                        {
                            while (true)
                            {
                                uint64_t rax_125 = r11_3 - r8_68;
                                uint64_t rcx_119 = rax_125 - 1;
                                int32_t r10_13;
                                
                                if (rax_125 >= i_3)
                                    r10_13 = 0;
                                else
                                    r10_13 = *(&var_954 + (rax_125 << 2));
                                
                                int32_t r9_10;
                                
                                if (rcx_119 >= i_3)
                                    r9_10 = 0;
                                else
                                    r9_10 = *(&var_954 + (rcx_119 << 2));
                                
                                *(&var_954 + (r11_3 << 2)) =
                                    (r9_10 & ~(rdi_14 - 1)) >> (0x20 - rsi_14)
                                    | (r10_13 & (rdi_14 - 1)) << rsi_14;
                                r11_3 = r11_3 - 1;
                                
                                if (r11_3 == r8_68 - 1)
                                    break;
                                
                                i_3 = i_9;
                            }
                        }
                        
                        rcx_112 = 0;
                        
                        if (r8_68)
                        {
                            do
                            {
                                uint64_t rax_126 = rcx_112;
                                rcx_112 += 1;
                                *(&var_954 + (rax_126 << 2)) = 0;
                            } while (rcx_112 != r8_68);
                        }
                        
                        i_3 = i_16;
                        i_9 = i_16;
                    }
                }
                
                int32_t rdi_16 = rcx_51;
                int32_t rax_128 = ((rax_1 - rax_1) & 0x1d) + 0x19 - rdi_16;
                int32_t r10_16 = rax_128;
                
                if (!rdi_16)
                    goto label_140006f99;
                
                if (rbx_11 <= rax_128)
                {
                    r10_16 -= rbx_11;
                label_140006f99:
                    
                    if (i_3 > i_8)
                    {
                    label_140006fbe:
                        rcx_112 = 0;
                    }
                    else if (i_3 >= i_8)
                    {
                        uint64_t rdx_70 = i_3 - 1;
                        
                        while (true)
                        {
                            if (rdx_70 == 0xffffffff)
                                goto label_140006fbe;
                            
                            int32_t rax_129 = *(&var_3e4 + (rdx_70 << 2));
                            int32_t temp38_1 = *(&var_954 + (rdx_70 << 2));
                            
                            if (temp38_1 != rax_129)
                            {
                                rcx_112 = temp38_1 <= rax_129;
                                break;
                            }
                            
                            rdx_70 = rdx_70 - 1;
                        }
                    }
                    else
                        rcx_112 = 1;
                    
                    if (rcx_112)
                        rbx_11 += 1;
                    
                    int32_t r10_17 = r10_16 & 0x1f;
                    uint32_t r9_14 = r10_16 >> 5;
                    int32_t rsi_15 = 1 << (0x20 - r10_17);
                    uint64_t rflags_5;
                    char temp0_5;
                    temp0_5 = __bsr_gprv_memv(*(&var_954 + ((i_3 - 1) << 2)));
                    int32_t rcx_124;
                    
                    rcx_124 = rsi_15 == 1 ? 0 : temp0_5 + 1;
                    
                    int32_t i_35;
                    
                    if (r9_14 + i_3 <= 0x73)
                    {
                        int32_t rdx_71;
                        rdx_71 = r10_17 > 0x20 - rcx_124;
                        i_35 = rdx_71 + r9_14 + i_3;
                    }
                    
                    if (r9_14 + i_3 > 0x73 || i_35 > 0x73)
                    {
                        int32_t var_cf8_10 = 0;
                        i_9 = 0;
                        memcpy_s(&var_954, 0x1cc, &var_cf4, nullptr);
                    }
                    else
                    {
                        uint64_t r11_4 = i_35 - 1;
                        
                        if (r11_4 != r9_14 - 1)
                        {
                            while (true)
                            {
                                uint64_t rax_136 = r11_4 - r9_14;
                                uint64_t rcx_126 = rax_136 - 1;
                                int32_t rdi_17;
                                
                                if (rax_136 >= i_3)
                                    rdi_17 = 0;
                                else
                                    rdi_17 = *(&var_954 + (rax_136 << 2));
                                
                                int32_t r8_71;
                                
                                if (rcx_126 >= i_3)
                                    r8_71 = 0;
                                else
                                    r8_71 = *(&var_954 + (rcx_126 << 2));
                                
                                *(&var_954 + (r11_4 << 2)) =
                                    (r8_71 & ~(rsi_15 - 1)) >> (0x20 - r10_17)
                                    | (rdi_17 & (rsi_15 - 1)) << r10_17;
                                r11_4 = r11_4 - 1;
                                
                                if (r11_4 == r9_14 - 1)
                                    break;
                                
                                i_3 = i_9;
                            }
                            
                            rdi_16 = rcx_51;
                        }
                        
                        int32_t rcx_129 = 0;
                        
                        if (r9_14)
                        {
                            do
                            {
                                uint64_t rax_137 = rcx_129;
                                rcx_129 += 1;
                                *(&var_954 + (rax_137 << 2)) = 0;
                            } while (rcx_129 != r9_14);
                        }
                        
                        i_9 = i_35;
                    }
                    
                    uint64_t rax_138 = sub_140004ad0(&i_9, &i_13);
                    int32_t i_36 = i_9;
                    uint64_t rdx_74 = rax_138;
                    bool r9_15 = !i_36;
                    uint64_t rflags_6;
                    int32_t rcx_131;
                    rcx_131 = _bit_scan_reverse(rax_138);
                    int32_t rcx_132;
                    
                    rcx_132 = !i_36 ? 0 : rcx_131 + 1;
                    
                    if (rcx_132 > rax_128)
                    {
                        char rcx_133 = rcx_132 - rax_128;
                        
                        if (!r9_15)
                            r9_15 = false;
                        else
                        {
                            r9_15 = true;
                            
                            if (rdx_74 & ((1 << rcx_133) - 1))
                                r9_15 = false;
                        }
                        
                        rdx_74 u>>= rcx_133;
                    }
                    
                    int32_t r11_5 = 0;
                    
                    if (i)
                        r11_5 = var_784;
                    
                    uint64_t r10_18 = 0;
                    int32_t rbx_14 = ~rbx_11;
                    int32_t var_780;
                    
                    if (i > 1)
                        r10_18 = var_780;
                    int32_t* r8_76;
                    r8_76 = arg1[0xc2];
                    
                    if (rdi_16)
                        rbx_14 = rdi_16 - 2;
                    
                    result = sub_140004fd4(rdx_74 + (((r10_18 << 0x20) + r11_5) << rax_128), 
                        rbx_14, r8_76, r9_15, rbp, arg2);
                }
                else
                {
                    i_39 = 1;
                    r8_78 = *(arg1 + 0x308);
                    result = __crt_strtox::assemble_floating_point_value_from_big_integer(&i_10, 
                        rdi_16, r8_78, i_39, rbp, arg2);
                }
            }
        }
    }
    
    __security_check_cookie(var_48 ^ &var_d78);
    return result;
}

int64_t __crt_strtox::convert_hexadecimal_string_to_floating_type_common(void* arg1, uint64_t** arg2, int32_t arg3 @ r10)
{
    char r9 = arg2[1];
    uint64_t i = 0;
    void* r8 = arg1 + 8;
    void* r11_1 = arg1 + 8 + *(arg1 + 4);
    int32_t r10_3 = ((arg3 - arg3) & 0x1d) + 0x17 + *arg1;
    uint64_t rax_1;
    
    if (r8 != r11_1)
    {
        while (i <= ((arg2 - arg2) & 0x1fffffff000000) + 0xffffff)
        {
            rax_1 = *r8;
            r10_3 -= 4;
            r8 += 1;
            i = (i << 4) + rax_1;
            
            if (r8 == r11_1)
                break;
        }
    }
    
    r9 = 1;
    
    while (r8 != r11_1)
    {
        if (!r9)
            break;
        
        rax_1 = *r8;
        r8 += 1;
        r9 = !rax_1;
    }
    
    r8 = *(arg1 + 0x308);
    int64_t rbp;
    return sub_140004fd4(i, r10_3, r8, r9, rbp, arg2);
}

uint64_t __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process(char* arg1)
{
    void* rcx = *(arg1 + 8);
    
    if (!rcx)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    else if (__acrt_stdio_char_traits<char>::validate_stream_is_ansi_if_required(rcx))
    {
        if (*(arg1 + 0x20))
        {
            char i;
            
            do
            {
                if (!sub_140007848(&arg1[0x18]))
                    break;
                
                i = __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_state(
                    arg1);
            } while (i);
            int32_t rdi_1 = *(arg1 + 0x80);
            int32_t rsi_1 = rdi_1;
            
            if (!*(arg1 + 0x80) && *(arg1 + 0x2c) != 1)
            {
                int32_t rax_5 = _getc_nolock(*(arg1 + 8));
                rdi_1 = -1;
                
                if (rax_5 != 0xffffffff)
                {
                    *(arg1 + 0x10) += 1;
                    *(arg1 + 0x10) -= 1;
                    _ungetc_nolock(rax_5, *(arg1 + 8));
                    rdi_1 = rsi_1;
                }
            }
            
            if (*arg1 & 1)
            {
                int32_t rbx_1 = *(arg1 + 0x28);
                
                if (rbx_1)
                {
                    *sub_14000dedc() = rbx_1;
                    _invalid_parameter_noinfo();
                }
            }
            
            return rdi_1;
        }
        
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    
    return -1;
}

int64_t __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_state(char* arg1)
{
    int32_t rcx = *(arg1 + 0x2c);
    int32_t result;
    
    if (rcx == 2)
    {
        result =
            __crt_stdio_input::skip_whitespace<class __crt_stdio_input::stream_input_adapter,char>(
            &arg1[8], *(arg1 + 0x70));
        
        if (result != 0xffffffff)
        {
            *(arg1 + 0x10) -= 1;
            _ungetc_nolock(result, *(arg1 + 8));
        }
        
        result = 1;
    }
    else if (rcx == 3)
    {
        result = _getc_nolock(*(arg1 + 8));
        
        if (result != 0xffffffff)
        {
            *(arg1 + 0x10) += 1;
            
            if (result == arg1[0x30])
                return __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_literal_character_tchar(
                    arg1, result);
            
            *(arg1 + 0x10) -= 1;
            _ungetc_nolock(result, *(arg1 + 8));
        }
        
        result = 0;
    }
    else if (rcx != 4)
        result = 0;
    else
    {
        char rcx_4 = __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_conversion_specifier(
            arg1);
        result = 0;
        
        if (rcx_4 && *(arg1 + 0x48) != 9 && !arg1[0x32])
            *(arg1 + 0x80) += 1;
        
        result = rcx_4;
    }
    
    return result;
}

uint64_t __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_literal_character_tchar(void* arg1, char arg2)
{
    int32_t rsi = arg2;
    uint64_t result = __pctype_func();
    int32_t rax;
    
    if (*(result + (rsi << 1)) < 0)
    {
        rax = _getc_nolock(*(arg1 + 8));
        
        if (rax != 0xffffffff)
            *(arg1 + 0x10) += 1;
    }
    
    if (*(result + (rsi << 1)) >= 0 || rax == *(arg1 + 0x31))
        result = 1;
    else
    {
        if (rax != 0xffffffff)
        {
            *(arg1 + 0x10) -= 1;
            _ungetc_nolock(rax, *(arg1 + 8));
        }
        
        if (rsi != 0xffffffff)
        {
            *(arg1 + 0x10) -= 1;
            _ungetc_nolock(rsi, *(arg1 + 8));
        }
        
        result = 0;
    }
    
    return result;
}

void* __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_conversion_specifier(char* arg1)
{
    int64_t rdi;
    int64_t var_8 = rdi;
    int32_t rdx = *(arg1 + 0x48);
    int32_t rdx_4;
    char r8_1;
    void* result;
    int32_t rdx_5;
    int32_t rdx_6;
    
    if (rdx > 5)
    {
        if (rdx != 6)
        {
            if (rdx == 7)
                return __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_floating_point_specifier(
                    arg1);
            
            if (rdx != 8)
            {
                if (rdx == 9)
                {
                    if (!arg1[0x32])
                        return __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::write_integer(
                            arg1, *(arg1 + 0x10));
                    
                    return 1;
                }
                
                result = 0;
                return result;
            }
            
            int64_t rax_1 = sub_140007a10(&arg1[0x18]);
            
            if (rax_1 == 1)
            {
                rdx_6 = 8;
                goto label_140007520;
            }
            
            if (rax_1 == 2)
            {
                rdx_5 = 8;
                goto label_140007511;
            }
            
            result = 0;
            return result;
        }
        
        rdx_4 = 0x10;
        r8_1 = 0;
    }
    else if (rdx == 5)
    {
        rdx_4 = 0xa;
        r8_1 = 0;
    }
    else
    {
        if (!rdx)
        {
            int64_t rax = sub_140007a10(&arg1[0x18]);
            
            if (rax == 1)
            {
                rdx_6 = 0;
            label_140007520:
                result = sub_140008340(arg1, rdx_6);
            }
            else
            {
                if (rax != 2)
                {
                    result = 0;
                    return result;
                }
                
                rdx_5 = 0;
            label_140007511:
                result = sub_1400084d0(arg1, rdx_5);
            }
            
            rdi = result;
            result = rdi;
            return result;
        }
        
        if (rdx == 1)
            return __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_string_specifier(
                arg1, 1);
        
        if (rdx == 2)
        {
            rdx_4 = 0;
            r8_1 = 1;
        }
        else if (rdx == 3)
        {
            rdx_4 = 0xa;
            r8_1 = 1;
        }
        else
        {
            if (rdx != 4)
            {
                result = 0;
                return result;
            }
            
            rdx_4 = 8;
            r8_1 = 0;
        }
    }
    return __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_integer_specifier(
        arg1, rdx_4, r8_1);
}

int64_t* __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_string_specifier(char* arg1, int32_t arg2)
{
    if (arg2 == 1)
    {
        int32_t rax_1 =
            __crt_stdio_input::skip_whitespace<class __crt_stdio_input::stream_input_adapter,char>(
            &arg1[8], *(arg1 + 0x70));
        
        if (rax_1 != 0xffffffff)
        {
            *(arg1 + 0x10) -= 1;
            _ungetc_nolock(rax_1, *(arg1 + 8));
        }
    }
    
    int64_t rax_2 = sub_140007a10(&arg1[0x18]);
    
    if (rax_2 == 1)
        return sub_140008340(arg1, arg2);
    
    if (rax_2 == 2)
        return sub_1400084d0(arg1, arg2);
    
    int64_t* result;
    result = 0;
    return result;
}

uint64_t __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::write_character(void* arg1, int64_t arg2, int64_t arg3, int16_t** arg4, int64_t* arg5, char arg6)
{
    int16_t rdi = arg6;
    arg6 = rdi;
    char arg_31 = 0;
    
    if (*(__pctype_func() + (rdi << 1)) < 0)
    {
        int32_t rax_1 = _getc_nolock(*(arg1 + 8));
        
        if (rax_1 != 0xffffffff)
            *(arg1 + 0x10) += 1;
        
        arg_31 = rax_1;
    }
    
    int128_t* r9 = *(arg1 + 0x70);
    int16_t arg_8 = 0x3f;
    _mbtowc_l(&arg_8, &arg6, *(*r9 + 8), r9);
    uint64_t result;
    result = 1;
    **arg4 = rdi;
    *arg4 = &(*arg4)[1];
    *arg5 -= 1;
    return result;
}

void* __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_integer_specifier(void* arg1, int32_t arg2, char arg3)
{
    int64_t rsi;
    rsi = arg3;
    int32_t rax =
        __crt_stdio_input::skip_whitespace<class __crt_stdio_input::stream_input_adapter,char>(
        arg1 + 8, *(arg1 + 0x70));
    
    if (rax != 0xffffffff)
    {
        *(arg1 + 0x10) -= 1;
        _ungetc_nolock(rax, *(arg1 + 8));
    }
    
    int128_t* rcx_2 = *(arg1 + 0x70);
    int64_t var_20 = *(arg1 + 0x38);
    int64_t* var_28 = arg1 + 8;
    char arg_8;
    char* var_10 = &arg_8;
    int64_t var_18 = 0;
    arg_8 = 1;
    void* result = sub_140008240(rcx_2, &var_28, arg2, rsi);
    
    if (arg_8)
    {
        if (!*(arg1 + 0x32))
            return __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::write_integer(
                arg1, result);
        
        result = 1;
    }
    else
        result = 0;
    
    return result;
}

int64_t __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process_floating_point_specifier(void* arg1)
{
    int32_t rax =
        __crt_stdio_input::skip_whitespace<class __crt_stdio_input::stream_input_adapter,char>(
        arg1 + 8, *(arg1 + 0x70));
    
    if (rax != 0xffffffff)
    {
        *(arg1 + 0x10) -= 1;
        _ungetc_nolock(rax, *(arg1 + 8));
    }
    
    int64_t result = sub_140007a10(arg1 + 0x18);
    
    if (result == 4)
        return sub_140008100(arg1);
    
    if (result == 8)
        return __crt_stdio_input::input_processor<double,char,class __crt_stdio_input::stream_input_adapter<char> >::process_floating_point_specifier_t<double>(
            arg1);
    
    result = 0;
    return result;
}

void* __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::write_integer(void* arg1, int64_t arg2)
{
    int64_t* r8 = *(arg1 + 0x78);
    *(arg1 + 0x78) = &r8[1];
    int64_t* rbx = *r8;
    void* result;
    
    if (rbx)
    {
        int64_t rax_2 = sub_140007a10(arg1 + 0x18);
        
        if (rax_2 == 1)
        {
            *rbx = arg2;
            result = 1;
        }
        else if (rax_2 == 2)
        {
            *rbx = arg2;
            result = 1;
        }
        else if (rax_2 == 4)
        {
            *rbx = arg2;
            result = 1;
        }
        else if (rax_2 != 8)
            result = 0;
        else
        {
            *rbx = arg2;
            result = 1;
        }
    }
    else
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        result = 0;
    }
    
    return result;
}

char* sub_140007848(void* arg1)
{
    char* result;
    
    if (*(arg1 + 0x10))
        result = 0;
    else
    {
        result = *(arg1 + 8);
        *(arg1 + 0x14) = 0;
        *(arg1 + 0x18) = 0;
        *(arg1 + 0x1a) = 0;
        *(arg1 + 0x20) = 0;
        *(arg1 + 0x28) = 0;
        *(arg1 + 0x2c) = 0;
        *(arg1 + 0x30) = 0;
        uint32_t rcx = *result;
        
        if (rcx)
        {
            uint64_t rax = isspace(rcx);
            char* rcx_1 = *(arg1 + 8);
            
            if (rax)
            {
                *(arg1 + 0x14) = 2;
                result = isspace(*rcx_1);
                
                while (result)
                {
                    *(arg1 + 8) += 1;
                    result = isspace(**(arg1 + 8));
                }
                
                result = 1;
            }
            else if (*rcx_1 != 0x25 || rcx_1[1] == 0x25)
            {
                *(arg1 + 0x14) = 3;
                char rdi_1 = 1;
                rax = *rcx_1;
                *(arg1 + 0x18) = rax;
                void* const rax_6;
                rax_6 = *rcx_1 == 0x25;
                *(arg1 + 8) = rax_6 + 1 + rcx_1;
                
                if (*(__pctype_func() + (*(arg1 + 0x18) << 1)) < 0)
                {
                    result = *(arg1 + 8);
                    uint64_t rcx_10;
                    rcx_10 = *result;
                    
                    if (rcx_10)
                    {
                        *(arg1 + 0x19) = rcx_10;
                        *(arg1 + 8) = &result[1];
                    }
                    else
                    {
                        *(arg1 + 0x10) = 0x2a;
                        rdi_1 = 0;
                        *(arg1 + 0x18) = 0;
                        *(arg1 + 0x1a) = 0;
                        *(arg1 + 0x20) = 0;
                        *(arg1 + 0x28) = 0;
                        *(arg1 + 0x2c) = 0;
                        *(arg1 + 0x30) = 0;
                    }
                }
                
                result = rdi_1;
            }
            else
            {
                *(arg1 + 0x14) = 4;
                *(arg1 + 8) = &rcx_1[1];
                
                if (rcx_1[1] == 0x2a)
                {
                    *(arg1 + 0x1a) = 1;
                    *(arg1 + 8) = &rcx_1[2];
                }
                
                if (!__crt_stdio_input::format_string_parser<char>::scan_optional_field_width(arg1))
                    result = 0;
                else
                {
                    sub_140007b64(arg1);
                    char* rcx_7 = *(arg1 + 8);
                    char rax_2 = *rcx_7;
                    
                    if (rax_2 == 0x77)
                    {
                        *(arg1 + 8) = &rcx_7[1];
                        *(arg1 + 0x2c) = 1;
                    }
                    else if (!((rax_2 - 0x43) & 0xef))
                        *(arg1 + 0x2c) = 1;
                    
                    if (!sub_140007c74(arg1))
                        result = 0;
                    else if (*(*(arg1 + 0x28) + *(arg1 + 0x30) * 0xc + &data_14001edb0))
                        result = 1;
                    else
                    {
                        *(arg1 + 0x10) = 0x16;
                        *(arg1 + 0x18) = 0;
                        *(arg1 + 0x1a) = 0;
                        *(arg1 + 0x20) = 0;
                        *(arg1 + 0x28) = 0;
                        *(arg1 + 0x2c) = 0;
                        *(arg1 + 0x30) = 0;
                        result = 0;
                    }
                }
            }
        }
        else
        {
            *(arg1 + 0x14) = 1;
            result = 0;
        }
    }
    
    return result;
}

int64_t sub_140007a10(void* arg1)
{
    int32_t rdx_11 = *(arg1 + 0x30);
    
    if (rdx_11 > 5)
    {
        if (rdx_11 == 6)
        {
        label_140007a30:
            int32_t rdx_3 = *(arg1 + 0x28);
            int32_t rdx_6;
            bool cond:2_1;
            
            if (rdx_3 > 5)
            {
                if (rdx_3 == 6 || rdx_3 == 7)
                    return 8;
                
                rdx_6 = rdx_3 - 9;
                cond:2_1 = rdx_3 == 9;
            label_140007a4b:
                
                if (!cond:2_1)
                {
                    if (rdx_6 != 1)
                        return 0;
                    
                    return 8;
                }
            }
            else
            {
                if (rdx_3 == 5)
                    return 8;
                
                if (rdx_3)
                {
                    if (rdx_3 == 1)
                        return 1;
                    
                    if (rdx_3 == 2)
                        return 2;
                    
                    rdx_6 = rdx_3 - 3;
                    cond:2_1 = rdx_3 == 3;
                    goto label_140007a4b;
                }
            }
            return 4;
        }
        
        if (rdx_11 == 7)
        {
            int32_t rax_6 = *(arg1 + 0x28);
            
            if (!rax_6)
                return 4;
            
            if (rax_6 != 3 && rax_6 != 8)
                return 0;
            
            return 8;
        }
        
        if (rdx_11 != 8)
        {
            if (rdx_11 == 9)
                goto label_140007a30;
            
            return 0;
        }
    }
    else
    {
        if (rdx_11 == 5)
            goto label_140007a30;
        
        if (rdx_11 && rdx_11 != 1)
        {
            if (rdx_11 == 2)
                goto label_140007a30;
            
            if (rdx_11 != 3 && rdx_11 != 4)
                return 0;
            
            goto label_140007a30;
        }
    }
    
    int64_t rax;
    rax = *(arg1 + 0x2c);
    char temp4 = rax;
    rax = -(rax);
    return -((rax - rax)) + 1;
}

int64_t __crt_stdio_input::format_string_parser<char>::scan_optional_field_width(void* arg1)
{
    char* rcx = *(arg1 + 8);
    int64_t result;
    result = *rcx;
    result -= 0x30;
    
    if (result > 9)
    {
        result = *rcx;
        result -= 0x61;
        
        if (result <= 0x19)
        {
            result = *rcx - 0x57;
            goto label_140007aff;
        }
        
        result = *rcx;
        result -= 0x41;
        
        if (result <= 0x19)
        {
            result = *rcx - 0x37;
            goto label_140007aff;
        }
        
        result = 1;
    }
    else
    {
        result = *rcx - 0x30;
    label_140007aff:
        
        if (result > 9)
            result = 1;
        else
        {
            int64_t arg_8 = 0;
            result = sub_1400105f8(rcx, &arg_8, 0xa);
            int64_t rcx_1;
            
            if (result)
                rcx_1 = arg_8;
            
            if (!result || rcx_1 == *(arg1 + 8))
            {
                *(arg1 + 0x14) = 0;
                *(arg1 + 0x18) = 0;
                *(arg1 + 0x20) = 0;
                *(arg1 + 0x28) = 0;
                *(arg1 + 0x30) = 0;
                result = 0;
                *(arg1 + 0x1a) = 0;
                *(arg1 + 0x2c) = 0;
                *(arg1 + 0x10) = 0x16;
            }
            else
            {
                *(arg1 + 0x20) = result;
                *(arg1 + 8) = rcx_1;
                result = 1;
            }
        }
    }
    
    return result;
}

void* sub_140007b64(void* arg1)
{
    char* rdx = *(arg1 + 8);
    void* rax;
    rax = *rdx;
    
    if (rax == 0x49)
    {
        rax = rdx[1];
        
        if (rax == 0x33 && rdx[2] == 0x32)
        {
            rax = &rdx[3];
            *(arg1 + 0x28) = 9;
            *(arg1 + 8) = rax;
            return rax;
        }
        
        if (rax != 0x36)
        {
            rax -= 0x58;
            
            if (rax > 0x20 || !TEST_BITQ(0x120821001, rax))
                return rax;
            
            *(arg1 + 0x28) = 0xa;
            goto label_140007c68;
        }
        
        if (rdx[2] != 0x34)
            return rax;
        
        rax = &rdx[3];
        *(arg1 + 0x28) = 0xa;
        *(arg1 + 8) = rax;
        return rax;
    }
    
    if (rax == 0x4c)
    {
        *(arg1 + 0x28) = 8;
    label_140007c68:
        rax = &rdx[1];
        *(arg1 + 8) = rax;
        return rax;
    }
    
    if (rax == 0x54)
    {
        *(arg1 + 0x28) = 0xb;
        goto label_140007c68;
    }
    
    int32_t rax_2;
    
    if (rax == 0x68)
    {
        void* rax_3 = &rdx[1];
        char r8 = *rax_3;
        
        if (r8 == 0x68)
            rax_3 = &rdx[2];
        
        *(arg1 + 8) = rax_3;
        int32_t rax_4;
        rax_4 = r8 != 0x68;
        rax_2 = rax_4 + 1;
        *(arg1 + 0x28) = rax_2;
        return rax_2;
    }
    
    if (rax == 0x6a)
    {
        *(arg1 + 0x28) = 5;
        goto label_140007c68;
    }
    
    if (rax != 0x6c)
    {
        if (rax == 0x74)
        {
            *(arg1 + 0x28) = 7;
            goto label_140007c68;
        }
        
        if (rax != 0x7a)
            return rax;
        
        *(arg1 + 0x28) = 6;
        goto label_140007c68;
    }
    
    void* r8_1 = &rdx[1];
    rax = *r8_1;
    
    if (rax == 0x6c)
        r8_1 = &rdx[2];
    
    rax -= 0x6c;
    *(arg1 + 8) = r8_1;
    char temp0_1 = rax;
    rax = -(rax);
    rax_2 = rax - rax + 4;
    *(arg1 + 0x28) = rax_2;
    return rax_2;
}

void* sub_140007c74(void* arg1)
{
    char* r8_1 = *(arg1 + 8);
    void* result;
    
    switch (*r8_1)
    {
        case 0x41:
        {
            *(arg1 + 0x30) = 7;
            goto label_140007e36;
        }
        case 0x43:
        {
        label_140007cf3:
            
            if (!*(arg1 + 0x20))
                *(arg1 + 0x20) = 1;
            
            int32_t r9_1 = *(arg1 + 0x28);
            
            if (r9_1 == 2)
                *(arg1 + 0x2c) = 0;
            else if (!((r9_1 - 3) & 0xfffffffa) && r9_1 != 7)
                *(arg1 + 0x2c) = 1;
            
            *(arg1 + 0x30) = 0;
            *(arg1 + 8) = &r8_1[1];
            result = 1;
            return result;
            break;
        }
        case 0x45:
        case 0x46:
        case 0x47:
        {
            *(arg1 + 0x30) = 7;
            goto label_140007e36;
        }
        case 0x49:
        {
            *(arg1 + 0x30) = 2;
            goto label_140007e36;
        }
        case 0x53:
        {
            goto label_140007df9;
        }
        case 0x58:
        {
            goto label_140007e2b;
        }
        case 0x5b:
        {
            int32_t rcx_7 = *(arg1 + 0x28);
            
            if (rcx_7 == 2)
                *(arg1 + 0x2c) = 0;
            else if (!((rcx_7 - 3) & 0xfffffffa) && rcx_7 != 7)
                *(arg1 + 0x2c) = 1;
            
            *(arg1 + 0x30) = 8;
            *(arg1 + 8) = &r8_1[1];
            /* tailcall */
            return __crt_stdio_input::format_string_parser<char>::scan_scanset_range(arg1);
        }
        case 0x61:
        {
            *(arg1 + 0x30) = 7;
            goto label_140007e36;
        }
        case 0x63:
        {
            goto label_140007cf3;
        }
        case 0x64:
        {
            *(arg1 + 0x30) = 3;
        label_140007e36:
            *(arg1 + 8) = &r8_1[1];
            result = 1;
            return result;
            break;
        }
        case 0x65:
        case 0x66:
        case 0x67:
        {
            *(arg1 + 0x30) = 7;
            goto label_140007e36;
        }
        case 0x69:
        {
            *(arg1 + 0x30) = 2;
            goto label_140007e36;
        }
        case 0x6e:
        {
            *(arg1 + 0x30) = 9;
            goto label_140007e36;
        }
        case 0x6f:
        {
            *(arg1 + 0x30) = 4;
            goto label_140007e36;
        }
        case 0x70:
        {
            *(arg1 + 0x28) = 0xa;
        label_140007e2b:
            *(arg1 + 0x30) = 6;
            goto label_140007e36;
        }
        case 0x73:
        {
        label_140007df9:
            int32_t rcx_14 = *(arg1 + 0x28);
            
            if (rcx_14 == 2)
                *(arg1 + 0x2c) = 0;
            else if (!((rcx_14 - 3) & 0xfffffffa) && rcx_14 != 7)
                *(arg1 + 0x2c) = 1;
            
            *(arg1 + 0x30) = 1;
            goto label_140007e36;
        }
        case 0x75:
        {
            *(arg1 + 0x30) = 5;
            goto label_140007e36;
        }
        case 0x78:
        {
            goto label_140007e2b;
        }
    }
    
    *(arg1 + 0x10) = 0x16;
    *(arg1 + 0x18) = 0;
    *(arg1 + 0x1a) = 0;
    *(arg1 + 0x20) = 0;
    *(arg1 + 0x28) = 0;
    *(arg1 + 0x2c) = 0;
    *(arg1 + 0x30) = 0;
    return 0;
}

void* const* __crt_stdio_input::format_string_parser<char>::scan_scanset_range(void* arg1)
{
    void* i_1 = arg1 + 0x34;
    void* r8 = arg1;
    void* const* result;
    
    if (i_1)
    {
        __builtin_memset(i_1, 0, 0x20);
        char* result_3 = *(arg1 + 8);
        void* result_2 = result_3;
        int64_t rdi;
        rdi = *result_3;
        arg1 = rdi;
        
        if (rdi == 0x5e)
        {
            result_3 = &result_3[1];
            *(r8 + 8) = result_3;
            result_2 = result_3;
            arg1 = *result_3;
        }
        
        if (arg1 == 0x5d)
        {
            result_2 = &result_3[1];
            *(r8 + 8) = result_2;
            *(r8 + 0x3f) |= 0x20;
        }
        
        void* rsi_1 = nullptr;
        result = result_2;
        
        if (*result_2 != 0x5d)
        {
            char i = *result_2;
            void* const* result_1 = result_2;
            
            while (i)
            {
                if (i != 0x2d || result_1 - 1 == rsi_1 || result_1 == result_2
                    || *(result_1 + 1) == 0x5d)
                {
                    uint64_t rdx_4 = i >> 3;
                    *(rdx_4 + r8 + 0x34) |= 1 << ((i & 7) % 0x20);
                }
                else
                {
                    char i_2 = *(result_1 - 1);
                    rsi_1 = result_1 + 1;
                    char temp0_1 = *(result_1 + 1);
                    i = *(result_1 + 1);
                    
                    if (i_2 <= temp0_1)
                        i = i_2;
                    
                    if (i_2 <= temp0_1)
                        i_2 = *(result_1 + 1);
                    
                    for (; i != i_2 + 1; i += 1)
                    {
                        uint64_t rdx_2 = i >> 3;
                        *(rdx_2 + r8 + 0x34) |= 1 << ((i & 7) % 0x20);
                    }
                }
                
                result = *(r8 + 8) + 1;
                *(r8 + 8) = result;
                result_1 = result;
                i = *result;
                
                if (i == 0x5d)
                    break;
            }
        }
        
        if (*result)
        {
            if (rdi == 0x5e)
            {
                for (void* rdx_5 = i_1 + 0x20; i_1 != rdx_5; i_1 += 1)
                    *i_1 = ~*i_1;
            }
            
            *(r8 + 8) += 1;
            result = 1;
        }
        else
        {
            *(r8 + 0x10) = 0x16;
            *(r8 + 0x18) = 0;
            *(r8 + 0x1a) = 0;
            *(r8 + 0x20) = 0;
            *(r8 + 0x28) = 0;
            *(r8 + 0x2c) = 0;
            *(r8 + 0x30) = 0;
            result = 0;
        }
    }
    else
    {
        *(arg1 + 0x10) = 0xc;
        *(arg1 + 0x18) = 0;
        *(arg1 + 0x1a) = 0;
        *(arg1 + 0x20) = 0;
        *(arg1 + 0x28) = 0;
        *(arg1 + 0x2c) = 0;
        *(arg1 + 0x30) = 0;
        result = 0;
    }
    
    return result;
}

uint64_t <lambda_f3caf1ecae5fe01a9a1a6239afa44510>::operator()(int64_t* arg1)
{
    void var_f8;
    int64_t rax_1 = __security_cookie ^ &var_f8;
    void* var_c8;
    _LocaleUpdate::_LocaleUpdate(&var_c8, **arg1);
    int64_t r9 = *arg1[4];
    int64_t r8 = *arg1[3];
    int64_t rdx_2 = *arg1[2];
    int64_t var_d0 = 0;
    int128_t zmm0 = (*arg1[1]);
    int64_t var_a8 = rdx_2;
    int64_t var_90 = rdx_2;
    int128_t var_a0 = zmm0;
    int64_t var_88 = r8;
    int64_t var_80 = 0;
    int16_t var_78 = 0;
    char var_76 = 0;
    int64_t var_70 = 0;
    int32_t var_68 = 0;
    char var_64 = 0;
    int32_t var_60;
    __builtin_memset(&var_60, 0, 0x24);
    void var_c0;
    void* var_38 = &var_c0;
    int64_t var_30 = r9;
    int64_t var_28 = 0;
    uint64_t result = __crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::process(
        &var_a8);
    char var_b0;
    
    if (var_b0)
    {
        void* rcx_3 = var_c8;
        *(rcx_3 + 0x3a8) &= 0xfffffffd;
    }
    
    __security_check_cookie(rax_1 ^ &var_f8);
    return result;
}

uint64_t __crt_stdio_input::skip_whitespace<class __crt_stdio_input::stream_input_adapter,char>(int64_t* arg1, int128_t* arg2)
{
    int32_t rax_1;
    int32_t i;
    
    do
    {
        rax_1 = _getc_nolock(*arg1);
        
        if (rax_1 == 0xffffffff)
            break;
        
        arg1[1] += 1;
        i = _ischartype_l(rax_1, 8, arg2);
    } while (i);
    return rax_1;
}

int64_t sub_140008100(void* arg1)
{
    int32_t arg_10 = 0;
    void* var_28 = arg1 + 8;
    int64_t var_20 = *(arg1 + 0x38);
    int128_t* rcx = *(arg1 + 0x70);
    char rbx = 0;
    char arg_8;
    char* var_10 = &arg_8;
    int64_t var_18 = 0;
    arg_8 = 1;
    int32_t result = __crt_strtox::parse_floating_point<class __crt_strtox::input_adapter_character_source<class __crt_stdio_input::console_input_adapter<wchar_t> >,double>(
        rcx, &var_28, &arg_10);
    
    if (!arg_8 || result == 1)
        result = 0;
    else if (!*(arg1 + 0x32))
    {
        int64_t* rcx_1 = *(arg1 + 0x78);
        *(arg1 + 0x78) = &rcx_1[1];
        int32_t* rdx_1 = *rcx_1;
        
        if (rdx_1)
        {
            rbx = 1;
            *rdx_1 = arg_10;
        }
        else
        {
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        }
        
        result = rbx;
    }
    else
        result = 1;
    
    return result;
}

int64_t __crt_stdio_input::input_processor<double,char,class __crt_stdio_input::stream_input_adapter<char> >::process_floating_point_specifier_t<double>(void* arg1)
{
    char arg_8 = 1;
    void* var_28 = arg1 + 8;
    int64_t var_20 = *(arg1 + 0x38);
    int128_t* rcx = *(arg1 + 0x70);
    char* var_10 = &arg_8;
    char rbx = 0;
    int64_t arg_10 = {0};
    int64_t var_18 = 0;
    int64_t result = __crt_strtox::parse_floating_point<class __crt_strtox::input_adapter_character_source<class __crt_stdio_input::stream_input_adapter<char> >,float>(
        rcx, &var_28, &arg_10);
    
    if (!arg_8 || result == 1)
        result = 0;
    else if (!*(arg1 + 0x32))
    {
        int64_t** rcx_1 = *(arg1 + 0x78);
        *(arg1 + 0x78) = &rcx_1[1];
        int64_t* rdx_1 = *rcx_1;
        
        if (rdx_1)
        {
            rbx = 1;
            *rdx_1 = arg_10;
        }
        else
        {
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        }
        
        result = rbx;
    }
    else
        result = 1;
    
    return result;
}

int64_t sub_140008240(int128_t* arg1, int64_t* arg2, int32_t arg3, char arg4)
{
    void* var_48 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    int128_t var_30_1;
    
    if (arg1)
    {
        var_20 = 1;
        var_30_1 = *arg1;
    }
    else if (!data_14002a1b8)
    {
        var_20 = 1;
        var_30_1 = *data_1400298c8;
    }
    int64_t var_68 = *arg2;
    int64_t var_60 = arg2[1];
    int64_t var_58 = arg2[2];
    int64_t rax_3 = arg2[3];
    arg2[3] = 0;
    *arg2 = 0;
    int64_t var_50 = rax_3;
    int64_t result = sub_14000882c(&var_48, &var_68, arg3, arg4);
    
    if (var_20 == 2)
    {
        void* rcx_1 = var_48;
        *(rcx_1 + 0x3a8) &= 0xfffffffd;
    }
    
    int32_t var_1c;
    
    if (var_18)
        *(sub_1400028a0(&var_48) + 0x20) = var_1c;
    int32_t var_14;
    
    if (0)
        *(sub_1400028a0(&var_48) + 0x24) = var_14;
    char* rax_6 = arg2[3];
    
    if (rax_6 && !arg2[2])
        *rax_6 = 0;
    
    return result;
}

int64_t* sub_140008340(char* arg1, int32_t arg2)
{
    char* rsi = nullptr;
    int64_t* result;
    uint64_t rdi_1;
    
    if (arg1[0x32])
    {
    label_1400083e8:
        rdi_1 = -1;
    label_1400083ec:
        int64_t r13_1 = *(arg1 + 0x38);
        char* r12_1 = rsi;
        uint64_t r14_1 = rdi_1;
        
        if (arg2 && rdi_1 != -1)
            r14_1 = rdi_1 - 1;
        
        int64_t rbp_1 = 0;
        
        while (true)
        {
            if (!r13_1 || rbp_1 != r13_1)
            {
                result = _getc_nolock(*(arg1 + 8));
                int32_t r8_1 = result;
                
                if (result != 0xffffffff)
                {
                    *(arg1 + 0x10) += 1;
                    
                    if (!arg2)
                    {
                    label_140008465:
                        
                        if (!arg1[0x32])
                        {
                            if (!r14_1)
                                break;
                            
                            *r12_1 = r8_1;
                            r12_1 = &r12_1[1];
                            r14_1 -= 1;
                        }
                        
                        rbp_1 += 1;
                        continue;
                    }
                    else
                    {
                        bool cond:0_1;
                        
                        if (arg2 != 1)
                        {
                            if (arg2 == 8)
                            {
                                uint64_t rax_2 = r8_1;
                                cond:0_1 = !(*((rax_2 >> 3) + arg1 + 0x4c) & 1 << (rax_2 & 7));
                                goto label_14000845f;
                            }
                            
                            *(arg1 + 0x10) -= 1;
                            _ungetc_nolock(r8_1, *(arg1 + 8));
                        }
                        else if (r8_1 - 9 <= 4)
                        {
                            *(arg1 + 0x10) -= 1;
                            _ungetc_nolock(r8_1, *(arg1 + 8));
                        }
                        else
                        {
                            cond:0_1 = r8_1 == 0x20;
                        label_14000845f:
                            
                            if (!cond:0_1)
                                goto label_140008465;
                            
                            *(arg1 + 0x10) -= 1;
                            _ungetc_nolock(r8_1, *(arg1 + 8));
                        }
                    }
                }
            }
            
            if (!rbp_1)
                goto label_14000838e;
            
            if (!arg2 && rbp_1 != r13_1 && !(*arg1 & 4))
                goto label_14000838e;
            
            if (!arg1[0x32] && arg2)
                *r12_1 = 0;
            
            result = 1;
            goto label_1400083ac;
        }
        
        if (rdi_1 == -1)
            *sub_14000dedc() = 0xc;
        else
        {
            *rsi = 0;
            *sub_14000dedc() = 0xc;
        }
    }
    else
    {
        result = *(arg1 + 0x78);
        *(arg1 + 0x78) = &result[1];
        rsi = *result;
        
        if (rsi)
        {
            if (!(*arg1 & 1))
                goto label_1400083e8;
            
            *(arg1 + 0x78) = &result[2];
            rdi_1 = result[1];
            
            if (rdi_1)
                goto label_1400083ec;
            
            if (!(*arg1 & 4))
                *sub_14000dedc() = 0xc;
            else
            {
                if (_getc_nolock(*(arg1 + 8)) != 0xffffffff)
                    *(arg1 + 0x10) += 1;
                
                *rsi = 0;
                *sub_14000dedc() = 0xc;
            }
        }
        else
        {
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        }
    }
label_14000838e:
    result = 0;
label_1400083ac:
    return result;
}

int64_t* sub_1400084d0(char* arg1, int32_t arg2)
{
    int16_t* rsi = nullptr;
    int64_t* result;
    uint64_t rdi_1;
    
    if (arg1[0x32])
    {
    label_14000856d:
        rdi_1 = -1;
    label_140008571:
        int64_t r12_1 = *(arg1 + 0x38);
        uint64_t rbp_1 = rdi_1;
        int16_t* arg_20 = rsi;
        uint64_t arg_8 = rdi_1;
        
        if (arg2 && rdi_1 != -1)
        {
            rbp_1 = rdi_1 - 1;
            arg_8 = rbp_1;
        }
        
        int64_t r14_1 = 0;
        
        while (true)
        {
            if (!r12_1 || r14_1 != r12_1)
            {
                result = _getc_nolock(*(arg1 + 8));
                int32_t r8_1 = result;
                
                if (result != 0xffffffff)
                {
                    *(arg1 + 0x10) += 1;
                    
                    if (!arg2)
                    {
                    label_1400085fe:
                        
                        if (arg1[0x32])
                        {
                            r14_1 += 1;
                            continue;
                        }
                        else
                        {
                            if (!rbp_1)
                                break;
                            
                            if (__crt_stdio_input::input_processor<char,class __crt_stdio_input::stream_input_adapter<char> >::write_character(
                                arg1, rsi, rdi_1, &arg_20, &arg_8, r8_1))
                            {
                                rbp_1 = arg_8;
                                r14_1 += 1;
                                continue;
                            }
                        }
                    }
                    else
                    {
                        bool cond:0_1;
                        
                        if (arg2 != 1)
                        {
                            if (arg2 == 8)
                            {
                                uint64_t rax_2 = r8_1;
                                cond:0_1 = !(*((rax_2 >> 3) + arg1 + 0x4c) & 1 << (rax_2 & 7));
                                goto label_1400085fc;
                            }
                            
                            *(arg1 + 0x10) -= 1;
                            _ungetc_nolock(r8_1, *(arg1 + 8));
                        }
                        else if (r8_1 - 9 <= 4)
                        {
                            *(arg1 + 0x10) -= 1;
                            _ungetc_nolock(r8_1, *(arg1 + 8));
                        }
                        else
                        {
                            cond:0_1 = r8_1 == 0x20;
                        label_1400085fc:
                            
                            if (!cond:0_1)
                                goto label_1400085fe;
                            
                            *(arg1 + 0x10) -= 1;
                            _ungetc_nolock(r8_1, *(arg1 + 8));
                        }
                    }
                }
            }
            
            if (!r14_1)
                goto label_14000851a;
            
            if (!arg2 && r14_1 != r12_1 && !(*arg1 & 4))
                goto label_14000851a;
            
            if (!arg1[0x32] && arg2)
                *arg_20 = 0;
            
            result = 1;
            goto label_140008530;
        }
        
        if (rdi_1 == -1)
            *sub_14000dedc() = 0xc;
        else
        {
            *rsi = 0;
            *sub_14000dedc() = 0xc;
        }
    }
    else
    {
        result = *(arg1 + 0x78);
        *(arg1 + 0x78) = &result[1];
        rsi = *result;
        
        if (rsi)
        {
            if (!(*arg1 & 1))
                goto label_14000856d;
            
            *(arg1 + 0x78) = &result[2];
            rdi_1 = result[1];
            
            if (rdi_1)
                goto label_140008571;
            
            if (!(*arg1 & 4))
                *sub_14000dedc() = 0xc;
            else
            {
                if (_getc_nolock(*(arg1 + 8)) != 0xffffffff)
                    *(arg1 + 0x10) += 1;
                
                *rsi = 0;
                *sub_14000dedc() = 0xc;
            }
        }
        else
        {
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        }
    }
label_14000851a:
    result = 0;
label_140008530:
    return result;
}

uint64_t __crt_seh_guarded_call<class <lambda_082dd7c0feb7dbdaf245f261e54a6583>,class <lambda_f3caf1ecae5fe01a9a1a6239afa44510>& __ptr64,class <lambda_c640b76c0755ae85b317b35c67c61e6b>,int32_t>::operator()<class <lambda_082dd7c0feb7dbdaf245f261e54a6583>,class <lambda_f3caf1ecae5fe01a9a1a6239afa44510>& __ptr64,class <lambda_c640b76c0755ae85b317b35c67c61e6b> >(int64_t arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4)
{
    int64_t* arg_20 = arg4;
    sub_14000247c(*arg2);
    int32_t rax = <lambda_f3caf1ecae5fe01a9a1a6239afa44510>::operator()(arg3);
    sub_140002488(*arg4);
    return rax;
}

int64_t __crt_strtox::parse_floating_point<class __crt_strtox::input_adapter_character_source<class __crt_stdio_input::console_input_adapter<wchar_t> >,double>(int128_t* arg1, int64_t* arg2, int32_t* arg3)
{
    void var_348;
    int64_t rax_1 = __security_cookie ^ &var_348;
    int64_t result;
    
    if (!arg3 || !arg1)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        char* rax_3 = arg2[3];
        
        if (rax_3 && !arg2[2])
            *rax_3 = 0;
        
        result = 1;
    }
    else
    {
        void var_328;
        result = sub_140008c64(sub_140008fdc(arg1, arg2, &var_328), &var_328, arg3);
        char* rcx_1 = arg2[3];
        
        if (rcx_1 && !arg2[2])
            *rcx_1 = 0;
    }
    
    __security_check_cookie(rax_1 ^ &var_348);
    return result;
}

int64_t __crt_strtox::parse_floating_point<class __crt_strtox::input_adapter_character_source<class __crt_stdio_input::stream_input_adapter<char> >,float>(int128_t* arg1, int64_t* arg2, int64_t* arg3)
{
    void var_348;
    int64_t rax_1 = __security_cookie ^ &var_348;
    int64_t result;
    
    if (!arg3 || !arg1)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        char* rax_3 = arg2[3];
        
        if (rax_3 && !arg2[2])
            *rax_3 = 0;
        
        result = 1;
    }
    else
    {
        void var_328;
        result = sub_140008dcc(sub_140008fdc(arg1, arg2, &var_328), &var_328, arg3);
        char* rcx_1 = arg2[3];
        
        if (rcx_1 && !arg2[2])
            *rcx_1 = 0;
    }
    
    __security_check_cookie(rax_1 ^ &var_348);
    return result;
}

int64_t sub_14000882c(int64_t* arg1, int64_t* arg2, int32_t arg3, char arg4)
{
    int64_t* r14 = *arg2;
    uint32_t r12 = arg4;
    int32_t rsi = arg3;
    
    if (!r14 || !arg2[3])
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    label_1400088ab:
        char* rax_3 = arg2[3];
        
        if (rax_3 && !arg2[2])
            *rax_3 = 0;
    }
    else
    {
        if (rsi && arg3 - 2 > 0x22)
        {
            arg1[6] = 1;
            *(arg1 + 0x2c) = 0x16;
            _invalid_parameter_internal(0, 0, 0, 0, 0, arg1);
            goto label_1400088ab;
        }
        
        int64_t rax_4 = arg2[2];
        int64_t result = 0;
        arg2[2] = rax_4 + 1;
        int32_t rax_6;
        void* rdi;
        
        if (!arg2[1] || rax_4 + 1 <= arg2[1])
        {
            rax_6 = _getc_nolock(*r14);
            rdi = rax_6;
        }
        
        if ((arg2[1] && rax_4 + 1 > arg2[1]) || rax_6 == 0xffffffff)
            rdi = 0;
        else
            r14[1] += 1;
        
        if (!arg1[5])
            __crt_cached_ptd_host::update_locale_slow(arg1);
        
        while (_ischartype_l(rdi, 8, &arg1[3]))
        {
            int64_t rax_8 = arg2[2] + 1;
            arg2[2] = rax_8;
            
            if (!arg2[1] || rax_8 <= arg2[1])
            {
                rdi = *arg2;
                int32_t rax_9 = _getc_nolock(*rdi);
                
                if (rax_9 != 0xffffffff)
                {
                    *(rdi + 8) += 1;
                    rdi = rax_9;
                    continue;
                }
            }
            
            rdi = 0;
        }
        
        uint32_t rbp_2 = r12 | 2;
        
        if (rdi != 0x2d)
            rbp_2 = r12;
        
        if (!((rdi - 0x2b) & 0xfd))
        {
            int64_t rax_13 = arg2[2] + 1;
            arg2[2] = rax_13;
            int32_t rax_14;
            
            if (!arg2[1] || rax_13 <= arg2[1])
            {
                rdi = *arg2;
                rax_14 = _getc_nolock(*rdi);
            }
            
            if ((arg2[1] && rax_13 > arg2[1]) || rax_14 == 0xffffffff)
                rdi = 0;
            else
            {
                *(rdi + 8) += 1;
                rdi = rax_14;
            }
        }
        
        if (!(rsi & 0xffffffef))
        {
            int32_t rax_17;
            
            if (rdi - 0x30 > 9)
            {
                if (rdi - 0x61 <= 0x19)
                {
                    rax_17 = rdi - 0x57;
                    goto label_1400089df;
                }
                
                if (rdi - 0x41 <= 0x19)
                {
                    rax_17 = rdi - 0x37;
                    goto label_1400089df;
                }
                
            label_140008aa7:
                int32_t rax_34 = 0xa;
                
                if (rsi)
                    rax_34 = rsi;
                
                rsi = rax_34;
            }
            else
            {
                rax_17 = rdi - 0x30;
            label_1400089df:
                
                if (rax_17)
                    goto label_140008aa7;
                
                int64_t rax_23 = arg2[2] + 1;
                arg2[2] = rax_23;
                int32_t rax_24;
                char rdx;
                int64_t* r14_1;
                
                if (!arg2[1] || rax_23 <= arg2[1])
                {
                    r14_1 = *arg2;
                    rax_24 = _getc_nolock(*r14_1);
                    rdx = rax_24;
                }
                
                if ((arg2[1] && rax_23 > arg2[1]) || rax_24 == 0xffffffff)
                {
                    rdx = 0;
                label_140008a61:
                    int32_t rax_29 = 8;
                    
                    if (rsi)
                        rax_29 = rsi;
                    
                    rsi = rax_29;
                    int64_t rax_31 = arg2[2] - 1;
                    arg2[2] = rax_31;
                    
                    if ((!arg2[1] || rax_31 <= arg2[1]) && rdx + 1 > 1)
                    {
                        int64_t** rax_33 = *arg2;
                        int32_t rcx_8 = rdx;
                        
                        if (rcx_8 != 0xffffffff)
                        {
                            rax_33[1] -= 1;
                            _ungetc_nolock(rcx_8, *rax_33);
                        }
                    }
                }
                else
                {
                    r14_1[1] += 1;
                    
                    if ((rax_24 - 0x58) & 0xdf)
                        goto label_140008a61;
                    
                    int32_t rax_25 = 0x10;
                    
                    if (rsi)
                        rax_25 = rsi;
                    
                    rsi = rax_25;
                    int64_t rax_27 = arg2[2] + 1;
                    arg2[2] = rax_27;
                    int32_t rax_28;
                    
                    if (!arg2[1] || rax_27 <= arg2[1])
                    {
                        rdi = *arg2;
                        rax_28 = _getc_nolock(*rdi);
                    }
                    
                    if ((arg2[1] && rax_27 > arg2[1]) || rax_28 == 0xffffffff)
                        rdi = 0;
                    else
                    {
                        *(rdi + 8) += 1;
                        rdi = rax_28;
                    }
                }
            }
        }
        
        int64_t r14_3 = rsi;
        int32_t r8_1;
        
        while (true)
        {
            r8_1 = rdi;
            int32_t rcx_10;
            
            if (rdi - 0x30 <= 9)
                rcx_10 = r8_1 - 0x30;
            else if (rdi - 0x61 <= 0x19)
                rcx_10 = r8_1 - 0x57;
            else if (rdi - 0x41 > 0x19)
                rcx_10 = -1;
            else
                rcx_10 = r8_1 - 0x37;
            
            if (rcx_10 >= rsi)
                break;
            
            int64_t rax_39 = r14_3 * result;
            int64_t result_1 = rcx_10 + rax_39;
            int32_t rcx_11;
            rcx_11 = result_1 < rax_39;
            bool cond:0_1 = result > -1 / r14_3;
            result = result_1;
            int32_t rax_40;
            rax_40 = cond:0_1;
            rbp_2 |= (rcx_11 | rax_40) << 2 | 8;
            int64_t rax_42 = arg2[2] + 1;
            bool cond:1_1 = !arg2[1];
            arg2[2] = rax_42;
            
            if (cond:1_1 || rax_42 <= arg2[1])
            {
                rdi = *arg2;
                int32_t rax_43 = _getc_nolock(*rdi);
                
                if (rax_43 != 0xffffffff)
                {
                    *(rdi + 8) += 1;
                    rdi = rax_43;
                    continue;
                }
            }
            
            rdi = 0;
        }
        
        int64_t rax_45 = arg2[2] - 1;
        arg2[2] = rax_45;
        
        if (!arg2[1] || rax_45 <= arg2[1])
        {
            rdi += 1;
            
            if (rdi > 1)
            {
                int64_t** rdx_4 = *arg2;
                
                if (r8_1 != 0xffffffff)
                {
                    rdx_4[1] -= 1;
                    _ungetc_nolock(r8_1, *rdx_4);
                }
            }
        }
        
        if (rbp_2 & 8)
        {
            if (__crt_strtox::is_overflow_condition<uint64_t>(rbp_2, result))
            {
                arg1[6] = 1;
                *(arg1 + 0x2c) = 0x22;
                
                if (rbp_2 & 1)
                {
                    char* rax_50 = arg2[3];
                    
                    if (!(rbp_2 & 2))
                    {
                        if (rax_50 && !arg2[2])
                            *rax_50 = 0;
                        
                        return 0x7fffffffffffffff;
                    }
                    
                    if (rax_50 && !arg2[2])
                        *rax_50 = 0;
                    
                    return -0x8000000000000000;
                }
                
                result = -1;
            }
            else if (rbp_2 & 2)
                result = -(result);
            
            char* rcx_18 = arg2[3];
            
            if (rcx_18 && !arg2[2])
                *rcx_18 = 0;
            
            return result;
        }
        
        if (rax_4 != arg2[2])
            *arg2[3] = 0;
        
        char* rax_48 = arg2[3];
        
        if (rax_48 && !arg2[2])
            *rax_48 = 0;
    }
    
    return 0;
}

int64_t sub_140008c64(int32_t arg1, int32_t* arg2, int32_t* arg3)
{
    if (arg1 > 5)
    {
        if (arg1 != 6)
        {
            if (arg1 == 7)
                *arg3 = 0;
            else
            {
                if (arg1 == 8)
                {
                    *arg3 = (arg1 - 8 - (arg1 - 8)) & 0x80000000;
                    return 2;
                }
                
                if (arg1 == 9)
                {
                    *arg3 = ((((arg1 - 8 - (arg1 - 8)) & 0x80000000) + 0x7f800000)
                        | (*arg3 & 0x7f800000)) & 0xff800000;
                    return 3;
                }
            }
            
            return 1;
        }
        
        *arg3 = 0xffc00000;
    }
    else
    {
        int32_t rcx_5;
        
        if (arg1 == 5)
            rcx_5 = (((((arg1 - arg1) & 0x80000000) + 0x7f800000) | (*arg3 & 0x7f800000))
                & 0xff800001) | 1;
        else
        {
            uint64_t* var_18;
            
            if (!arg1)
            {
                var_18 = arg3;
                char var_10_2 = 0;
                return sub_1400054ec(arg2, &var_18);
            }
            
            if (arg1 == 1)
            {
                var_18 = arg3;
                char var_10_1 = 0;
                int32_t r10;
                return __crt_strtox::convert_hexadecimal_string_to_floating_type_common(arg2, 
                    &var_18, r10);
            }
            
            if (arg1 == 2)
                rcx_5 = (arg1 - 2 - (arg1 - 2)) & 0x80000000;
            else if (arg1 == 3)
                rcx_5 = ((((arg1 - 3 - (arg1 - 3)) & 0x80000000) + 0x7f800000)
                    | (*arg3 & 0x7f800000)) & 0xff800000;
            else
            {
                if (arg1 != 4)
                    return 1;
                
                rcx_5 = ((arg1 - 3 - (arg1 - 3)) & 0x80000000) + 0x7fffffff;
            }
        }
        
        *arg3 = rcx_5;
    }
    
    return 0;
}

int64_t sub_140008dcc(int64_t arg1, int32_t* arg2, int64_t* arg3)
{
    if (arg1 > 5)
    {
        if (arg1 != 6)
        {
            if (arg1 == 7)
                *arg3 = 0;
            else
            {
                uint64_t rcx_20 = arg1 - 8;
                
                if (arg1 == 8)
                {
                    *arg3 = (rcx_20 - rcx_20) & 0x8000000000000000;
                    return 2;
                }
                
                if (rcx_20 == 1)
                {
                    *arg3 = ((((rcx_20 - rcx_20) & 0x8000000000000000) + 0x7ff0000000000000)
                        & 0xfff0000000000000) | (*arg3 & 0x7ff0000000000000);
                    return 3;
                }
            }
            
            return 1;
        }
        
        *arg3 = -0x8000000000000;
    }
    else
    {
        int64_t rcx_5;
        
        if (arg1 == 5)
            rcx_5 = ((((arg1 - arg1) & 0x8000000000000000) + 0x7ff0000000000000)
                & 0xfff0000000000001) | (*arg3 & 0x7ff0000000000000) | 1;
        else
        {
            uint64_t* var_18;
            
            if (!arg1)
            {
                var_18 = arg3;
                char var_10_2 = 1;
                return sub_1400054ec(arg2, &var_18);
            }
            
            if (arg1 == 1)
            {
                var_18 = arg3;
                char var_10_1 = 1;
                int32_t r10;
                return __crt_strtox::convert_hexadecimal_string_to_floating_type_common(arg2, 
                    &var_18, r10);
            }
            
            uint64_t rcx_1 = arg1 - 2;
            
            if (arg1 == 2)
                rcx_5 = (rcx_1 - rcx_1) & 0x8000000000000000;
            else
            {
                uint64_t rcx_2 = rcx_1 - 1;
                
                if (rcx_1 == 1)
                    rcx_5 = ((((rcx_2 - rcx_2) & 0x8000000000000000) + 0x7ff0000000000000)
                        & 0xfff0000000000000) | (*arg3 & 0x7ff0000000000000);
                else
                {
                    if (rcx_2 != 1)
                        return 1;
                    
                    rcx_5 = ((rcx_2 - rcx_2) & 0x8000000000000000) + 0x7fffffffffffffff;
                }
            }
        }
        
        *arg3 = rcx_5;
    }
    
    return 0;
}

int64_t __crt_strtox::is_overflow_condition<uint64_t>(char arg1, int64_t arg2) __pure
{
    int64_t rax;
    
    if (!(arg1 & 4))
    {
        if (!(arg1 & 1))
        {
            rax = 0;
            return rax;
        }
        
        if (!(arg1 & 2))
        {
            int64_t rax_1;
            rax_1 = arg2 > 0x7fffffffffffffff;
            return rax_1;
        }
        
        if (arg2 <= -0x8000000000000000)
        {
            rax = 0;
            return rax;
        }
    }
    
    rax = 1;
    return rax;
}

uint64_t sub_140008fdc(int128_t* arg1, int64_t* arg2, int32_t* arg3)
{
    int64_t* rdi = *arg2;
    
    if (!rdi || !arg2[3])
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    else
    {
        int64_t rax_1 = arg2[2];
        int64_t var_68 = rax_1;
        arg2[2] = rax_1 + 1;
        uint64_t rax_2;
        
        if (!arg2[1] || rax_1 + 1 <= arg2[1])
            rax_2 = _getc_nolock(*rdi);
        
        if ((arg2[1] && rax_1 + 1 > arg2[1]) || rax_2 == 0xffffffff)
            rax_2 = 0;
        else
            rdi[1] += 1;
        
        int64_t* var_60 = arg2;
        char arg_10;
        char* var_58_1 = &arg_10;
        int64_t rsi_1 = 8;
        int64_t* var_50_1 = &var_68;
        
        while (true)
        {
            arg_10 = rax_2;
            
            if (!_ischartype_l(rax_2, 8, arg1))
                break;
            
            rax_2 = arg2[2] + 1;
            arg2[2] = rax_2;
            
            if (!arg2[1] || rax_2 <= arg2[1])
            {
                int64_t** rdi_1 = *arg2;
                rax_2 = _getc_nolock(*rdi_1);
                
                if (rax_2 != 0xffffffff)
                {
                    rdi_1[1] += 1;
                    continue;
                }
            }
            
            rax_2 = 0;
        }
        
        char rdx = arg_10;
        int32_t rax_4;
        rax_4 = rdx == 0x2d;
        arg3[0xc2] = rax_4;
        
        if (!((rdx - 0x2b) & 0xfd))
        {
            int64_t rax_7 = arg2[2] + 1;
            arg2[2] = rax_7;
            int32_t rax_8;
            int64_t* rdi_2;
            
            if (!arg2[1] || rax_7 <= arg2[1])
            {
                rdi_2 = *arg2;
                rax_8 = _getc_nolock(*rdi_2);
                rdx = rax_8;
            }
            
            if ((arg2[1] && rax_7 > arg2[1]) || rax_8 == 0xffffffff)
                rdx = 0;
            else
                rdi_2[1] += 1;
            
            arg_10 = rdx;
        }
        
        if (!((rdx - 0x49) & 0xdf))
            return sub_140009834(&arg_10, arg2, var_68);
        
        if (!((rdx - 0x4e) & 0xdf))
            return sub_140009a08(&arg_10, arg2, var_68);
        
        char arg_20 = 0;
        
        if (rdx == 0x30)
        {
            rsi_1 = arg2[2];
            arg2[2] = rsi_1 + 1;
            
            if (arg2[1] && rsi_1 + 1 > arg2[1])
                goto label_1400091ae;
            
            int64_t* rdi_3 = *arg2;
            int32_t rax_12 = _getc_nolock(*rdi_3);
            char r8_1 = rax_12;
            
            if (rax_12 == 0xffffffff)
            {
                rdx = arg_10;
            label_1400091ae:
                r8_1 = 0;
            label_1400091b5:
                int64_t rax_16 = arg2[2] - 1;
                arg2[2] = rax_16;
                
                if ((!arg2[1] || rax_16 <= arg2[1]) && r8_1 + 1 > 1)
                {
                    int64_t** rax_18 = *arg2;
                    int32_t rcx_7 = r8_1;
                    
                    if (rcx_7 != 0xffffffff)
                    {
                        rax_18[1] -= 1;
                        _ungetc_nolock(rcx_7, *rax_18);
                        rdx = arg_10;
                    }
                }
            }
            else
            {
                rdi_3[1] += 1;
                
                if ((rax_12 - 0x58) & 0xdf)
                {
                    rdx = arg_10;
                    goto label_1400091b5;
                }
                
                uint64_t rax_14 = arg2[2] + 1;
                arg_20 = 1;
                arg2[2] = rax_14;
                
                if (!arg2[1] || rax_14 <= arg2[1])
                {
                    int64_t* rdi_4 = *arg2;
                    rax_14 = _getc_nolock(*rdi_4);
                    
                    if (rax_14 == 0xffffffff)
                        rax_14 = 0;
                    else
                        rdi_4[1] += 1;
                }
                else
                    rax_14 = 0;
                
                rdx = rax_14;
                arg_10 = rax_14;
                var_68 = rsi_1;
            }
        }
        
        void* i_1 = &arg3[2];
        int32_t* r15;
        r15 = 0;
        int32_t var_74_1 = 0;
        uint64_t rax_20;
        
        if (rdx == 0x30)
        {
            r15 = 1;
            
            while (true)
            {
                rax_20 = arg2[2] + 1;
                bool cond:0_1 = !arg2[1];
                arg2[2] = rax_20;
                
                if (cond:0_1 || rax_20 <= arg2[1])
                {
                    int64_t* rdi_5 = *arg2;
                    rax_20 = _getc_nolock(*rdi_5);
                    
                    if (rax_20 != 0xffffffff)
                    {
                        rdi_5[1] += 1;
                        rdx = rax_20;
                        arg_10 = rax_20;
                        
                        if (rax_20 != 0x30)
                            break;
                        
                        continue;
                    }
                }
                
                rdx = 0;
                arg_10 = 0;
                break;
            }
        }
        
        rax_20 = arg_20;
        int32_t r14_1 = 0;
        char temp0_1 = rax_20;
        rax_20 = -(rax_20);
        
        while (true)
        {
            int32_t rax_23;
            
            if (rdx - 0x30 <= 9)
                rax_23 = rdx - 0x30;
            else if (rdx - 0x61 <= 0x19)
                rax_23 = rdx - 0x57;
            else if (rdx - 0x41 > 0x19)
                rax_23 = -1;
            else
                rax_23 = rdx - 0x37;
            
            if (rax_23 > ((rsi_1 - rsi_1) & 6) + 9)
                break;
            
            r15 = 1;
            
            if (i_1 != &arg3[0xc2])
            {
                *i_1 = rax_23;
                i_1 += 1;
            }
            
            r14_1 += 1;
            uint64_t rax_29 = arg2[2] + 1;
            bool cond:2_1 = !arg2[1];
            arg2[2] = rax_29;
            
            if (cond:2_1 || rax_29 <= arg2[1])
            {
                int64_t* rdi_6 = *arg2;
                rax_29 = _getc_nolock(*rdi_6);
                
                if (rax_29 == 0xffffffff)
                    rax_29 = 0;
                else
                    rdi_6[1] += 1;
            }
            else
                rax_29 = 0;
            
            rdx = rax_29;
            arg_10 = rax_29;
        }
        
        int32_t var_74_2 = r14_1;
        int64_t* rcx_10;
        
        if (rdx == ***(*arg1 + 0xf8))
        {
            uint64_t rax_33 = arg2[2] + 1;
            bool cond:1_1 = !arg2[1];
            arg2[2] = rax_33;
            
            if (cond:1_1 || rax_33 <= arg2[1])
            {
                int64_t* rdi_7 = *arg2;
                rax_33 = _getc_nolock(*rdi_7);
                rcx_10 = rax_33;
                
                if (rax_33 == 0xffffffff)
                    rcx_10 = 0;
                else
                    rdi_7[1] += 1;
            }
            else
                rcx_10 = 0;
            
            rdx = rcx_10;
            arg_10 = rcx_10;
            rax_33 = rcx_10;
            
            if (i_1 == &arg3[2] && rcx_10 == 0x30)
            {
                r15 = 1;
                
                while (true)
                {
                    var_74_2 -= 1;
                    rax_33 = arg2[2] + 1;
                    bool cond:3_1 = !arg2[1];
                    arg2[2] = rax_33;
                    
                    if (cond:3_1 || rax_33 <= arg2[1])
                    {
                        int64_t** rdi_8 = *arg2;
                        rax_33 = _getc_nolock(*rdi_8);
                        
                        if (rax_33 != 0xffffffff)
                        {
                            rdi_8[1] += 1;
                            rdx = rax_33;
                            arg_10 = rax_33;
                            
                            if (rax_33 != 0x30)
                                break;
                            
                            continue;
                        }
                    }
                    
                    rax_33 = 0;
                    arg_10 = 0;
                    rdx = 0;
                    break;
                }
            }
            
            rcx_10 = rax_33;
            
            while (true)
            {
                int32_t rax_36;
                
                if (rax_33 >= 0x30 && rcx_10 <= 0x39)
                    rax_36 = rdx - 0x30;
                else if (rdx - 0x61 <= 0x19)
                    rax_36 = rdx - 0x57;
                else if (rdx - 0x41 > 0x19)
                    rax_36 = -1;
                else
                    rax_36 = rdx - 0x37;
                
                if (rax_36 > ((rsi_1 - rsi_1) & 6) + 9)
                    break;
                
                r15 = 1;
                
                if (i_1 != &arg3[0xc2])
                {
                    *i_1 = rax_36;
                    i_1 += 1;
                }
                
                rax_33 = arg2[2] + 1;
                bool cond:4_1 = !arg2[1];
                arg2[2] = rax_33;
                
                if (cond:4_1 || rax_33 <= arg2[1])
                {
                    int64_t** rdi_9 = *arg2;
                    rax_33 = _getc_nolock(*rdi_9);
                    rcx_10 = rax_33;
                    
                    if (rax_33 == 0xffffffff)
                        rcx_10 = 0;
                    else
                        rdi_9[1] += 1;
                }
                else
                    rcx_10 = 0;
                
                rdx = rcx_10;
                arg_10 = rcx_10;
                rax_33 = rcx_10;
            }
        }
        
        if (r15)
        {
            int64_t rax_44 = arg2[2] - 1;
            arg2[2] = rax_44;
            
            if ((!arg2[1] || rax_44 <= arg2[1]) && rdx + 1 > 1)
            {
                int64_t** rax_46 = *arg2;
                rcx_10 = rdx;
                
                if (rcx_10 != 0xffffffff)
                {
                    rax_46[1] -= 1;
                    _ungetc_nolock(rcx_10, *rax_46);
                }
            }
            
            int64_t rax_47 = arg2[2];
            var_68 = rax_47;
            arg2[2] = rax_47 + 1;
            int32_t rax_49;
            int64_t* rdi_10;
            
            if (!arg2[1] || rax_47 + 1 <= arg2[1])
            {
                rdi_10 = *arg2;
                rax_49 = _getc_nolock(*rdi_10);
                rcx_10 = rax_49;
            }
            
            uint64_t rdi_11;
            
            if ((arg2[1] && rax_47 + 1 > arg2[1]) || rax_49 == 0xffffffff)
            {
                rcx_10 = 0;
                rdi_11 = 0;
                arg_10 = 0;
            label_1400096d6:
                int64_t rax_71 = arg2[2] - 1;
                arg2[2] = rax_71;
                
                if ((!arg2[1] || rax_71 <= arg2[1]) && rcx_10 + 1 > 1)
                {
                    int64_t** rdx_7 = *arg2;
                    rcx_10 = rcx_10;
                    
                    if (rcx_10 != 0xffffffff)
                    {
                        rdx_7[1] -= 1;
                        rcx_10 = _ungetc_nolock(rcx_10, *rdx_7);
                    }
                }
                
                if (i_1 != &arg3[2])
                {
                    void* i;
                    
                    do
                    {
                        i = i_1 - 1;
                        
                        if (*i)
                            break;
                        
                        i_1 = i;
                    } while (i != &arg3[2]);
                    
                    if (i_1 != &arg3[2])
                    {
                        if (rdi_11 <= 0x1450)
                        {
                            if (rdi_11 < 0xffffebb0)
                                return 8;
                            
                            uint32_t r8_4 = arg_20;
                            i = r8_4;
                            char temp1_1 = i;
                            i = -(i);
                            int32_t rdi_14 = rdi_11 + (((rcx_10 - rcx_10) & 3) + 1) * var_74_2;
                            
                            if (rdi_14 <= 0x1450)
                            {
                                if (rdi_14 < 0xffffebb0)
                                    return 8;
                                
                                *arg3 = rdi_14;
                                arg3[1] = i_1 - (&arg3[2]);
                                return r8_4;
                            }
                        }
                        
                        return 9;
                    }
                }
                
                return 2;
            }
            
            rdi_10[1] += 1;
            arg_10 = rcx_10;
            
            if (rcx_10 == 0x45)
            {
                rax_49 = arg_20;
                rax_49 ^= 1;
            }
            else if (rcx_10 == 0x50)
                rax_49 = arg_20;
            else if (rcx_10 == 0x65)
            {
                rax_49 = arg_20;
                rax_49 ^= 1;
            }
            else
            {
                rax_49 = 0;
                
                if (rcx_10 == 0x70)
                    rax_49 = arg_20;
            }
            
            rdi_11 = 0;
            
            if (!rax_49)
                goto label_1400096d6;
            
            uint64_t rax_51 = arg2[2] + 1;
            arg2[2] = rax_51;
            
            if (arg2[1] && rax_51 > arg2[1])
                goto label_14000957f;
            
            int64_t* rdi_12 = *arg2;
            rax_51 = _getc_nolock(*rdi_12);
            int32_t rsi_4 = rax_51;
            bool cond:5_1;
            
            if (rax_51 == 0xffffffff)
            {
                rdi_11 = 0;
            label_14000957f:
                r15 = 0;
                rsi_4 = 0;
            label_140009585:
                rcx_10 = 0;
                rax_51 = 0;
                arg_10 = 0;
            }
            else
            {
                rdi_12[1] += 1;
                rcx_10 = rax_51;
                arg_10 = rax_51;
                
                if (rax_51 != 0x2b)
                    rdi_11 = 0;
                
                if (rax_51 == 0x2b || rax_51 == 0x2d)
                {
                    rax_51 = arg2[2] + 1;
                    arg2[2] = rax_51;
                    
                    if (!arg2[1] || rax_51 <= arg2[1])
                    {
                        int64_t* rdi_13 = *arg2;
                        rax_51 = _getc_nolock(*rdi_13);
                        
                        if (rax_51 == 0xffffffff)
                            rax_51 = 0;
                        else
                            rdi_13[1] += 1;
                    }
                    else
                        rax_51 = 0;
                    
                    rdi_11 = 0;
                    arg_10 = rax_51;
                    rcx_10 = rax_51;
                }
                
                r15 = 0;
                cond:5_1 = rax_51 < 0x30;
                
                if (rax_51 != 0x30)
                    goto label_140009590;
                
                r15 = 1;
                
                do
                {
                    rax_51 = arg2[2] + 1;
                    arg2[2] = rax_51;
                    
                    if (arg2[1] && rax_51 > arg2[1])
                        goto label_140009585;
                    
                    int64_t** r14_3 = *arg2;
                    rax_51 = _getc_nolock(*r14_3);
                    
                    if (rax_51 == 0xffffffff)
                        goto label_140009585;
                    
                    r14_3[1] += 1;
                    rcx_10 = rax_51;
                    arg_10 = rax_51;
                } while (rax_51 == 0x30);
            }
            
            while (true)
            {
                cond:5_1 = rax_51 < 0x30;
            label_140009590:
                int32_t rdx_4;
                
                if (!cond:5_1 && rcx_10 <= 0x39)
                    rdx_4 = rcx_10 - 0x30;
                else if (rcx_10 - 0x61 > 0x19)
                {
                    if (rcx_10 - 0x41 > 0x19)
                        break;
                    
                    rdx_4 = rcx_10 - 0x37;
                }
                else
                    rdx_4 = rcx_10 - 0x57;
                
                if (rdx_4 >= 0xa)
                    break;
                
                r15 = 1;
                rdi_11 = rdx_4 + ((rdi_11 * 5) << 1);
                
                if (rdi_11 > 0x1450)
                {
                    rdi_11 = 0x1451;
                    goto label_140009612;
                }
                
                rax_51 = arg2[2] + 1;
                arg2[2] = rax_51;
                
                if (!arg2[1] || rax_51 <= arg2[1])
                {
                    int64_t** r14_4 = *arg2;
                    rax_51 = _getc_nolock(*r14_4);
                    
                    if (rax_51 == 0xffffffff)
                        rax_51 = 0;
                    else
                        r14_4[1] += 1;
                }
                else
                    rax_51 = 0;
                
                rcx_10 = rax_51;
                arg_10 = rax_51;
            }
            
        label_140009612:
            
            while (true)
            {
                int32_t rax_60;
                
                if (&rcx_10[-6] <= 9)
                    rax_60 = rcx_10 - 0x30;
                else if (rcx_10 - 0x61 > 0x19)
                {
                    if (rcx_10 - 0x41 > 0x19)
                        break;
                    
                    rax_60 = rcx_10 - 0x37;
                }
                else
                    rax_60 = rcx_10 - 0x57;
                
                if (rax_60 >= 0xa)
                    break;
                
                uint64_t rax_66 = arg2[2] + 1;
                arg2[2] = rax_66;
                
                if (!arg2[1] || rax_66 <= arg2[1])
                {
                    int64_t** r14_5 = *arg2;
                    rax_66 = _getc_nolock(*r14_5);
                    
                    if (rax_66 == 0xffffffff)
                        rax_66 = 0;
                    else
                        r14_5[1] += 1;
                }
                else
                    rax_66 = 0;
                
                rcx_10 = rax_66;
                arg_10 = rax_66;
            }
            
            if (rsi_4 == 0x2d)
                rdi_11 = -(rdi_11);
            
            if (r15)
                goto label_1400096d6;
            
            char rax_67;
            rax_67 = sub_1400097bc(&var_60);
            
            if (rax_67)
            {
                uint64_t rax_69 = arg2[2] + 1;
                arg2[2] = rax_69;
                
                if (!arg2[1] || rax_69 <= arg2[1])
                {
                    int64_t** rsi_5 = *arg2;
                    rax_69 = _getc_nolock(*rsi_5);
                    
                    if (rax_69 == 0xffffffff)
                        rax_69 = 0;
                    else
                        rsi_5[1] += 1;
                }
                else
                    rax_69 = 0;
                
                rcx_10 = rax_69;
                arg_10 = rax_69;
                goto label_1400096d6;
            }
        }
        else if (sub_1400097bc(&var_60) && arg_20)
            return 2;
    }
    
    return 7;
}

char* sub_1400097bc(int64_t* arg1)
{
    int64_t* rdx = *arg1;
    char rbx = 0;
    int32_t rcx = *arg1[1];
    int64_t rax_2 = rdx[2] - 1;
    rdx[2] = rax_2;
    
    if ((!rdx[1] || rax_2 <= rdx[1]) && rcx + 1 > 1)
    {
        int64_t* rdx_1 = *rdx;
        
        if (rcx != 0xffffffff)
        {
            rdx_1[1] -= 1;
            _ungetc_nolock(rcx, *rdx_1);
        }
    }
    
    *arg1[1] = 0;
    void* rdx_3 = *arg1;
    
    if (*arg1[2] == *(rdx_3 + 0x10))
        rbx = 1;
    else
        **(rdx_3 + 0x18) = 0;
    
    char* result;
    result = rbx;
    return result;
}

uint64_t sub_140009834(char* arg1, int64_t* arg2, int64_t arg3)
{
    int64_t arg_18 = arg3;
    int64_t* var_38 = arg2;
    int64_t* var_28 = &arg_18;
    char* var_30 = arg1;
    char* r14 = arg1;
    
    for (int64_t i = 0; i != 3; )
    {
        int64_t* rax;
        rax = *r14;
        
        if (rax != *(i + 0x14001ee28) && rax != *(i + 0x14001ee2c))
        {
            sub_1400097bc(&var_38);
            return 7;
        }
        
        rax = arg2[2] + 1;
        bool cond:0_1 = !arg2[1];
        arg2[2] = rax;
        
        if (cond:0_1 || rax <= arg2[1])
        {
            int64_t* rsi_1 = *arg2;
            rax = _getc_nolock(*rsi_1);
            arg1 = rax;
            
            if (rax == 0xffffffff)
                arg1 = 0;
            else
                rsi_1[1] += 1;
        }
        else
            arg1 = 0;
        
        i += 1;
        *r14 = arg1;
    }
    
    int64_t rax_3 = arg2[2] - 1;
    bool cond:1_1 = !arg2[1];
    arg2[2] = rax_3;
    
    if ((cond:1_1 || rax_3 <= arg2[1]) && &arg1[1] > 1)
    {
        int64_t* rdx = *arg2;
        arg1 = arg1;
        
        if (arg1 != 0xffffffff)
        {
            rdx[1] -= 1;
            _ungetc_nolock(arg1, *rdx);
        }
    }
    
    int64_t rax_5 = arg2[2];
    arg_18 = rax_5;
    bool cond:2_1 = !arg2[1];
    arg2[2] = rax_5 + 1;
    uint64_t rax_6;
    int64_t* rdi;
    
    if (cond:2_1 || rax_5 + 1 <= arg2[1])
    {
        rdi = *arg2;
        rax_6 = _getc_nolock(*rdi);
    }
    
    if ((!cond:2_1 && rax_5 + 1 > arg2[1]) || rax_6 == 0xffffffff)
        rax_6 = 0;
    else
        rdi[1] += 1;
    
    *r14 = rax_6;
    
    for (int64_t i_1 = 0; i_1 != 5; )
    {
        if (rax_6 != *(i_1 + "INITY") && rax_6 != *(i_1 + "inity"))
            return ((sub_1400097bc(&var_38) ^ 1) << 2) + 3;
        
        rax_6 = arg2[2] + 1;
        bool cond:3_1 = !arg2[1];
        arg2[2] = rax_6;
        
        if (cond:3_1 || rax_6 <= arg2[1])
        {
            int64_t** rsi_2 = *arg2;
            rax_6 = _getc_nolock(*rsi_2);
            arg1 = rax_6;
            
            if (rax_6 == 0xffffffff)
                arg1 = 0;
            else
                rsi_2[1] += 1;
        }
        else
            arg1 = 0;
        
        i_1 += 1;
        *r14 = arg1;
        rax_6 = arg1;
    }
    
    int64_t rax_10 = arg2[2] - 1;
    bool cond:4_1 = !arg2[1];
    arg2[2] = rax_10;
    
    if ((cond:4_1 || rax_10 <= arg2[1]) && &arg1[1] > 1)
    {
        int64_t** rdx_2 = *arg2;
        int32_t rcx_4 = arg1;
        
        if (rcx_4 != 0xffffffff)
        {
            rdx_2[1] -= 1;
            _ungetc_nolock(rcx_4, *rdx_2);
        }
    }
    
    return 3;
}

uint64_t sub_140009a08(uint64_t arg1, int64_t* arg2, int64_t arg3)
{
    int64_t arg_18 = arg3;
    int64_t* var_38 = arg2;
    int64_t* var_28 = &arg_18;
    uint64_t var_30 = arg1;
    char* rdi = arg1;
    
    for (int64_t i = 0; i != 3; )
    {
        int64_t* rax;
        rax = *rdi;
        
        if (rax != *(i + 0x14001ee40) && rax != *(i + 0x14001ee44))
        {
            sub_1400097bc(&var_38);
            return 7;
        }
        
        rax = arg2[2] + 1;
        bool cond:0_1 = !arg2[1];
        arg2[2] = rax;
        
        if (cond:0_1 || rax <= arg2[1])
        {
            int64_t* r14_1 = *arg2;
            rax = _getc_nolock(*r14_1);
            arg1 = rax;
            
            if (rax == 0xffffffff)
                arg1 = 0;
            else
                r14_1[1] += 1;
        }
        else
            arg1 = 0;
        
        i += 1;
        *rdi = arg1;
    }
    
    int64_t rax_3 = arg2[2] - 1;
    bool cond:1_1 = !arg2[1];
    arg2[2] = rax_3;
    
    if ((cond:1_1 || rax_3 <= arg2[1]) && arg1 + 1 > 1)
    {
        int64_t** rdx = *arg2;
        int32_t rcx_1 = arg1;
        
        if (rcx_1 != 0xffffffff)
        {
            rdx[1] -= 1;
            _ungetc_nolock(rcx_1, *rdx);
        }
    }
    
    int64_t rax_5 = arg2[2];
    arg_18 = rax_5;
    bool cond:2_1 = !arg2[1];
    arg2[2] = rax_5 + 1;
    int32_t rax_7;
    int64_t* rsi;
    
    if (cond:2_1 || rax_5 + 1 <= arg2[1])
    {
        rsi = *arg2;
        rax_7 = _getc_nolock(*rsi);
    }
    
    if ((!cond:2_1 && rax_5 + 1 > arg2[1]) || rax_7 == 0xffffffff)
        *rdi = 0;
    else
    {
        rsi[1] += 1;
        *rdi = rax_7;
        
        if (rax_7 == 0x28)
        {
            uint64_t rax_9 = arg2[2] + 1;
            bool cond:3_1 = !arg2[1];
            arg2[2] = rax_9;
            
            if (cond:3_1 || rax_9 <= arg2[1])
            {
                int64_t* rsi_1 = *arg2;
                rax_9 = _getc_nolock(*rsi_1);
                
                if (rax_9 == 0xffffffff)
                    rax_9 = 0;
                else
                    rsi_1[1] += 1;
            }
            else
                rax_9 = 0;
            
            *rdi = rax_9;
            
            if (sub_140009c80(rdi, arg2))
            {
                int32_t rcx_6 = *rdi;
                int64_t rax_13 = arg2[2] - 1;
                bool cond:4_1 = !arg2[1];
                arg2[2] = rax_13;
                
                if ((cond:4_1 || rax_13 <= arg2[1]) && rcx_6 + 1 > 1)
                {
                    int64_t** rdx_3 = *arg2;
                    
                    if (rcx_6 != 0xffffffff)
                    {
                        rdx_3[1] -= 1;
                        _ungetc_nolock(rcx_6, *rdx_3);
                    }
                }
                
                return 5;
            }
            
            char rax_15 = sub_140009d18(rdi, arg2);
            int32_t rcx_8 = *rdi;
            
            if (rax_15)
            {
                int64_t rax_17 = arg2[2] - 1;
                bool cond:5_1 = !arg2[1];
                arg2[2] = rax_17;
                
                if ((cond:5_1 || rax_17 <= arg2[1]) && rcx_8 + 1 > 1)
                {
                    int64_t** rdx_6 = *arg2;
                    
                    if (rcx_8 != 0xffffffff)
                    {
                        rdx_6[1] -= 1;
                        _ungetc_nolock(rcx_8, *rdx_6);
                    }
                }
                
                return 6;
            }
            
            while (true)
            {
                if (rcx_8 == 0x29)
                    return 4;
                
                if (!rcx_8)
                    break;
                
                if (rcx_8 - 0x30 > 9 && rcx_8 - 0x61 > 0x19 && rcx_8 - 0x41 > 0x19 && rcx_8 != 0x5f)
                    break;
                
                int64_t rax_23 = arg2[2] + 1;
                bool cond:6_1 = !arg2[1];
                arg2[2] = rax_23;
                int32_t rax_24;
                int64_t** rsi_2;
                
                if (cond:6_1 || rax_23 <= arg2[1])
                {
                    rsi_2 = *arg2;
                    rax_24 = _getc_nolock(*rsi_2);
                    rcx_8 = rax_24;
                }
                
                if ((!cond:6_1 && rax_23 > arg2[1]) || rax_24 == 0xffffffff)
                    rcx_8 = 0;
                else
                    rsi_2[1] += 1;
                
                *rdi = rcx_8;
            }
        }
    }
    
    int32_t rax_25 = sub_1400097bc(&var_38);
    char temp0_1 = rax_25;
    rax_25 = -(rax_25);
    return ((rax_25 - rax_25) & 0xfffffffd) + 7;
}

uint64_t sub_140009c80(char* arg1, int64_t* arg2)
{
    char rbx = 0;
    int64_t rdi = 0;
    uint64_t result;
    
    while (true)
    {
        result = *arg1;
        
        if (result != *(rdi + "SNAN)") && result != *(rdi + "snan)"))
            break;
        
        result = arg2[2] + 1;
        arg2[2] = result;
        
        if (!arg2[1] || result <= arg2[1])
        {
            int64_t* rsi_1 = *arg2;
            result = _getc_nolock(*rsi_1);
            
            if (result == 0xffffffff)
                result = 0;
            else
                rsi_1[1] += 1;
        }
        else
            result = 0;
        
        rdi += 1;
        *arg1 = result;
        
        if (rdi == 5)
        {
            rbx = 1;
            break;
        }
    }
    
    result = rbx;
    return result;
}

uint64_t sub_140009d18(char* arg1, int64_t* arg2)
{
    char rbx = 0;
    int64_t rdi = 0;
    uint64_t result;
    
    while (true)
    {
        result = *arg1;
        
        if (result != *(rdi + "IND)ind)"") && result != *(rdi + "ind)""))
            break;
        
        result = arg2[2] + 1;
        arg2[2] = result;
        
        if (!arg2[1] || result <= arg2[1])
        {
            int64_t* rsi_1 = *arg2;
            result = _getc_nolock(*rsi_1);
            
            if (result == 0xffffffff)
                result = 0;
            else
                rsi_1[1] += 1;
        }
        else
            result = 0;
        
        rdi += 1;
        *arg1 = result;
        
        if (rdi == 4)
        {
            rbx = 1;
            break;
        }
    }
    
    result = rbx;
    return result;
}

int64_t exit(uint32_t arg1)
{
    /* tailcall */
    return common_exit(arg1, 0, 0);
}

int64_t sub_140009dbc(uint32_t arg1)
{
    /* tailcall */
    return common_exit(arg1, 2, 0);
}

int64_t _cexit()
{
    /* tailcall */
    return common_exit(0, 0, 1);
}

int64_t _c_exit()
{
    /* tailcall */
    return common_exit(0, 2, 1);
}

int64_t sub_140009de8(int64_t arg1)
{
    uint64_t __security_cookie_1 = __security_cookie;
    
    if (data_14002a1a8 != __security_cookie_1)
    {
        sub_14000b220();
        /* no return */
    }
    
    char result = __security_cookie_1 & 0x3f;
    data_14002a1a8 = RORQ(arg1, 0x40 - result) ^ __security_cookie_1;
    return result;
}

int64_t sub_140009e24(int64_t arg1)
{
    data_14002a1a8 = arg1;
}

int64_t sub_140009e2c(int32_t arg1)
{
    int64_t var_18 = -2;
    HMODULE phModule = nullptr;
    int64_t result = GetModuleHandleExW(0, u"mscoree.dll", &phModule);
    HMODULE phModule_1 = phModule;
    
    if (result)
    {
        result = GetProcAddress(phModule_1, "CorExitProcess");
        
        if (result)
            result = sub_14001c600();
        
        phModule_1 = phModule;
    }
    
    if (!phModule_1)
        return result;
    
    return FreeLibrary(phModule_1);
}

void sub_140009e90(uint32_t arg1, char arg2) __noreturn
{
    if (arg2)
    {
        TerminateProcess(GetCurrentProcess(), arg1);
        /* no return */
    }
    
    sub_140009e2c(arg1);
    ExitProcess(arg1);
    /* no return */
}

uint8_t common_exit(uint32_t arg1, int32_t arg2, int32_t arg3)
{
    int32_t arg_18 = arg3;
    int32_t arg_10 = arg2;
    int64_t var_28 = -2;
    
    if (!arg3)
    {
        HMODULE rax_1 = GetModuleHandleW(nullptr);
        
        if (rax_1 && rax_1->unused == 0x5a4d)
        {
            int32_t* rcx_1 = rax_1 * 2;
            
            if (*rcx_1 == 0x4550 && rcx_1[6] == 0x20b && rcx_1[0x21] > 0xe && rcx_1[0x3e])
                sub_140009e2c(arg1);
        }
    }
    
    char arg_20 = 0;
    int32_t* var_20 = &arg_10;
    int32_t* var_18 = &arg_18;
    char* var_10 = &arg_20;
    int32_t var_34 = 2;
    int32_t var_30 = 2;
    void var_38;
    uint8_t result = __crt_seh_guarded_call<class <lambda_99476a1ad63dd22509b5d3e65b0ffc95>,class <lambda_ad1ced32f4ac17aa236e5ef05d6b3b7c>& __ptr64,class <lambda_f7424dd8d45958661754dc4f2697e9c3>,void>::operator()<class <lambda_99476a1ad63dd22509b5d3e65b0ffc95>,class <lambda_ad1ced32f4ac17aa236e5ef05d6b3b7c>& __ptr64,class <lambda_f7424dd8d45958661754dc4f2697e9c3> >(
        &var_38, &var_30, &var_20, &var_34);
    
    if (!arg_18)
    {
        result = __acrt_get_process_end_policy();
        
        if (!arg_18)
        {
            sub_140009e90(arg1, false);
            /* no return */
        }
    }
    
    return result;
}

void sub_140009fa4(int64_t* arg1)
{
    if (data_14002a1b4)
        return;
    
    data_14002a1b0 = 1;
    int32_t rcx = **arg1;
    
    if (!rcx)
    {
        if (data_14002a1a8 != __security_cookie)
            sub_14001c600();
        
        _execute_onexit_table(&data_14002a2c8);
    }
    else if (rcx == 1)
        _execute_onexit_table(&data_14002a2e0);
    
    if (!**arg1)
        sub_14000ad14(&data_140026968, &data_140026988);
    
    sub_14000ad14(&data_140026990, &data_140026998);
    
    if (!*arg1[1])
    {
        data_14002a1b4 = 1;
        *arg1[2] = 1;
    }
}

void sub_14000a05e() __noreturn
{
    sub_14000b220();
    /* no return */
}

int64_t __crt_seh_guarded_call<class <lambda_99476a1ad63dd22509b5d3e65b0ffc95>,class <lambda_ad1ced32f4ac17aa236e5ef05d6b3b7c>& __ptr64,class <lambda_f7424dd8d45958661754dc4f2697e9c3>,void>::operator()<class <lambda_99476a1ad63dd22509b5d3e65b0ffc95>,class <lambda_ad1ced32f4ac17aa236e5ef05d6b3b7c>& __ptr64,class <lambda_f7424dd8d45958661754dc4f2697e9c3> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    sub_140009fa4(arg3);
    return __vcrt_lock(*arg4);
}

uint64_t Concurrency::details::WinRT::Initialize()
{
    int32_t temp0 = data_14002a1b8;
    data_14002a1b8 = 1;
    return temp0;
}

uint64_t _configthreadlocale(int32_t arg1)
{
    void** rax;
    int32_t rcx;
    rax = __vcrt_getptd();
    int32_t r8 = rax[0x75];
    
    if (arg1 == 0xffffffff)
        data_1400299a0 = 0xffffffff;
    else if (arg1)
    {
        int32_t r8_1;
        
        if (arg1 == 1)
            r8_1 = r8 | 2;
        else
        {
            if (arg1 != 2)
            {
                *sub_14000dedc() = 0x16;
                _invalid_parameter_noinfo();
                return 0xffffffff;
            }
            
            r8_1 = r8 & 0xfffffffd;
        }
        
        rax[0x75] = r8_1;
    }
    
    return rcx - rcx + 2;
}

int64_t __acrt_uninitialize_locale()
{
    int32_t arg_10 = 4;
    int32_t arg_18 = 4;
    void arg_8;
    return __crt_seh_guarded_call<class <lambda_410d79af7f07d98d83a3f525b3859a53>,class <lambda_3e16ef9562a7dcce91392c22ab16ea36>& __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a>,void>::operator()<class <lambda_410d79af7f07d98d83a3f525b3859a53>,class <lambda_3e16ef9562a7dcce91392c22ab16ea36>& __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a> >(
        &arg_8, &arg_18, &arg_8, &arg_10);
}

int64_t __crt_seh_guarded_call<class <lambda_410d79af7f07d98d83a3f525b3859a53>,class <lambda_3e16ef9562a7dcce91392c22ab16ea36>& __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a>,void>::operator()<class <lambda_410d79af7f07d98d83a3f525b3859a53>,class <lambda_3e16ef9562a7dcce91392c22ab16ea36>& __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a> >(int64_t arg1, int32_t* arg2, int64_t arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    int64_t* rbx = &data_14002ab58;
    
    while (true)
    {
        int64_t* var_18_1 = rbx;
        
        if (rbx == &data_14002ab60)
            break;
        
        if (*rbx != &data_140029770)
            *rbx = _updatetlocinfoEx_nolock(rbx, &data_140029770);
        
        rbx = &rbx[1];
    }
    
    return __vcrt_lock(*arg4);
}

uint64_t sub_14000a1b4(int32_t arg1)
{
    int32_t rdi = 0;
    
    if (arg1)
    {
        if (arg1 - 1 <= 1)
        {
            __acrt_initialize_multibyte();
            __acrt_GetModuleFileNameA(nullptr, &data_14002a1c0, 0x104);
            char* rsi_1 = data_14002a188;
            data_14002a168 = &data_14002a1c0;
            
            if (!rsi_1 || !*rsi_1)
                rsi_1 = &data_14002a1c0;
            
            int64_t arg_18 = 0;
            int64_t arg_20 = 0;
            sub_14000a394(rsi_1, nullptr, nullptr, &arg_18, &arg_20);
            int64_t r15_1 = arg_18;
            int64_t* rax_3 = __acrt_allocate_buffer_for_argv(r15_1, arg_20, 1);
            
            if (rax_3)
            {
                sub_14000a394(rsi_1, rax_3, &rax_3[r15_1], &arg_18, &arg_20);
                
                if (arg1 != 1)
                {
                    int64_t* arg_10 = nullptr;
                    int32_t rax_7 = j_common_expand_argv_wildcards<char>(rax_3, &arg_10);
                    
                    if (!rax_7)
                    {
                        int64_t* rdx_4 = arg_10;
                        int64_t rcx_6 = 0;
                        int64_t* rax_8 = rdx_4;
                        
                        if (*rdx_4)
                        {
                            do
                            {
                                rax_8 = &rax_8[1];
                                rcx_6 += 1;
                            } while (*rax_8);
                        }
                        
                        data_14002a170 = rcx_6;
                        arg_10 = nullptr;
                        data_14002a178 = rdx_4;
                        _free_base(0);
                        arg_10 = nullptr;
                        _free_base(rax_3);
                    }
                    else
                    {
                        _free_base(arg_10);
                        arg_10 = nullptr;
                        _free_base(rax_3);
                        rdi = rax_7;
                    }
                }
                else
                {
                    int32_t rax_6 = arg_18 - 1;
                    data_14002a178 = rax_3;
                    data_14002a170 = rax_6;
                    _free_base(nullptr);
                }
            }
            else
            {
                rdi = rax_3 + 0xc;
                *sub_14000dedc() = rdi;
                _free_base(nullptr);
            }
        }
        else
        {
            rdi = 0x16;
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        }
    }
    
    return rdi;
}

int64_t __acrt_allocate_buffer_for_argv(int64_t arg1, int64_t arg2, int64_t arg3)
{
    if (arg1 < 0x1fffffffffffffff && arg2 < -1 / arg3)
    {
        int64_t rcx = arg1 << 3;
        int64_t r9_1 = arg2 * arg3;
        
        if (~rcx > r9_1)
        {
            int64_t result = _calloc_base(rcx + r9_1, 1);
            _free_base(0);
            return result;
        }
    }
    
    return 0;
}

uint32_t sub_14000a394(char* arg1, int64_t* arg2, void* arg3, int64_t* arg4, int64_t* arg5)
{
    uint64_t rsi;
    uint64_t arg_18 = rsi;
    void* rbx = arg3;
    int64_t* r14 = arg2;
    char* rdi = arg1;
    *arg5 = 0;
    *arg4 = 1;
    
    if (arg2)
    {
        *arg2 = rbx;
        r14 = &r14[1];
    }
    
    int64_t rbp;
    rbp = 0;
    uint32_t i;
    
    while (true)
    {
        if (*rdi != 0x22)
        {
            *arg5 += 1;
            
            if (rbx)
            {
                i = *rdi;
                *rbx = i;
                rbx += 1;
            }
            
            rsi = *rdi;
            rdi = &rdi[1];
            i = _ismbblead(rsi);
            
            if (i)
            {
                *arg5 += 1;
                
                if (rbx)
                {
                    i = *rdi;
                    *rbx = i;
                    rbx += 1;
                }
                
                rdi = &rdi[1];
            }
            
            if (!rsi)
            {
                rdi -= 1;
                break;
            }
        }
        else
        {
            rsi = 0x22;
            rbp = !rbp;
            rdi = &rdi[1];
        }
        
        if (!rbp)
        {
            if (rsi != 0x20 && rsi != 9)
                continue;
            
            if (!rbx)
                break;
            
            *(rbx - 1) = 0;
            break;
        }
    }
    
    rsi = 0;
    
    while (true)
    {
        i = *rdi;
        
        if (!i)
            break;
        
        while (i == 0x20 || i == 9)
        {
            rdi = &rdi[1];
            i = *rdi;
        }
        
        if (!i)
            break;
        
        if (r14)
        {
            *r14 = rbx;
            r14 = &r14[1];
        }
        
        *arg4 += 1;
        
        while (true)
        {
            int32_t rdx = 1;
            i = 0;
            
            while (true)
            {
                arg1 = *rdi;
                
                if (arg1 != 0x5c)
                    break;
                
                rdi = &rdi[1];
                i += 1;
            }
            
            if (arg1 == 0x22)
            {
                if (!(1 & i))
                {
                    if (!rsi || rdi[1] != arg1)
                    {
                        rdx = 0;
                        rsi = !rsi;
                    }
                    else
                        rdi = &rdi[1];
                }
                
                i u>>= 1;
            }
            
            while (i)
            {
                i -= 1;
                
                if (rbx)
                {
                    *rbx = 0x5c;
                    rbx += 1;
                }
                
                *arg5 += 1;
            }
            
            i = *rdi;
            
            if (!i)
                break;
            
            if (!rsi)
            {
                if (i == 0x20)
                    break;
                
                if (i == 9)
                    break;
            }
            
            if (rdx)
            {
                if (rbx)
                {
                    *rbx = i;
                    rbx += 1;
                }
                
                int32_t rax;
                rax = _ismbblead(*rdi);
                
                if (rax)
                {
                    *arg5 += 1;
                    rdi = &rdi[1];
                    
                    if (rbx)
                    {
                        rax = *rdi;
                        *rbx = rax;
                        rbx += 1;
                    }
                }
                
                *arg5 += 1;
            }
            
            rdi = &rdi[1];
        }
        
        if (rbx)
        {
            *rbx = 0;
            rbx += 1;
        }
        
        *arg5 += 1;
    }
    
    if (r14)
        *r14 = 0;
    
    *arg4 += 1;
    return i;
}

int64_t _initialize_onexit_table(int64_t* arg1)
{
    if (!arg1)
        return 0xffffffff;
    
    if (*arg1 == arg1[2])
    {
        uint64_t __security_cookie_1 = __security_cookie;
        *arg1 = __security_cookie_1;
        arg1[1] = __security_cookie_1;
        arg1[2] = __security_cookie_1;
    }
    
    return 0;
}

uint64_t _register_onexit_function(int64_t arg1, int64_t arg2)
{
    int64_t arg_10 = arg2;
    int64_t arg_8 = arg1;
    int64_t* var_20 = &arg_8;
    int64_t* var_18 = &arg_10;
    int32_t arg_20 = 2;
    int32_t var_28 = 2;
    void arg_18;
    return __crt_seh_guarded_call<class <lambda_8b90c8310d35b3462fe809c44bbb350d>,class <lambda_c1ccdfe150d00dafd355d15f2a9edeaa>& __ptr64,class <lambda_e797892004ba4c0bb152531b9d8c3715>,int32_t>::operator()<class <lambda_8b90c8310d35b3462fe809c44bbb350d>,class <lambda_c1ccdfe150d00dafd355d15f2a9edeaa>& __ptr64,class <lambda_e797892004ba4c0bb152531b9d8c3715> >(
        &arg_18, &var_28, &var_20, &arg_20);
}

uint64_t _execute_onexit_table(int64_t arg1)
{
    int64_t arg_8 = arg1;
    int64_t var_10 = -2;
    int64_t* var_18 = &arg_8;
    int32_t arg_18 = 2;
    int32_t arg_20 = 2;
    void arg_10;
    return sub_14000a91c(&arg_10, &arg_20, &var_18, &arg_18);
}

int64_t sub_14000a608(int64_t arg1)
{
    /* tailcall */
    return _register_onexit_function(&data_14002a2c8, arg1);
}

int64_t sub_14000a618(int64_t* arg1)
{
    int64_t rdx = **arg1;
    
    if (rdx)
    {
        uint64_t __security_cookie_4 = __security_cookie;
        char rcx_1 = __security_cookie_4 & 0x3f;
        int64_t rsi_3 = RORQ(__security_cookie_4 ^ *rdx, rcx_1);
        int64_t r9_3 = RORQ(__security_cookie_4 ^ *(rdx + 8), rcx_1);
        int64_t rbx_3 = RORQ(__security_cookie_4 ^ *(rdx + 0x10), rcx_1);
        
        if (r9_3 != rbx_3)
        {
        label_14000a743:
            *r9_3 = RORQ(*arg1[1], 0x40 - (__security_cookie_4 & 0x3f)) ^ __security_cookie_4;
            uint64_t __security_cookie_1 = __security_cookie;
            ***arg1 = RORQ(rsi_3, 0x40 - (__security_cookie_1 & 0x3f)) ^ __security_cookie_1;
            uint64_t __security_cookie_2 = __security_cookie;
            *(**arg1 + 8) =
                RORQ(r9_3 + 8, 0x40 - (__security_cookie_2 & 0x3f)) ^ __security_cookie_2;
            uint64_t __security_cookie_3 = __security_cookie;
            *(**arg1 + 0x10) =
                RORQ(rbx_3, 0x40 - (__security_cookie_3 & 0x3f)) ^ __security_cookie_3;
            return 0;
        }
        
        int64_t rbx_5 = (rbx_3 - rsi_3) >> 3;
        int64_t rdi_1 = rbx_5;
        
        if (rbx_5 > 0x200)
            rdi_1 = 0x200;
        
        int64_t rdi_2 = rdi_1 + rbx_5;
        
        if (rdi_1 == -(rbx_5))
            rdi_2 = 0x20;
        
        int64_t r14_1;
        
        if (rdi_2 >= rbx_5)
        {
            r14_1 = _recalloc_base(rsi_3, rdi_2, 8);
            _free_base(0);
        }
        
        if (rdi_2 >= rbx_5 && r14_1)
        {
        label_14000a6e2:
            __security_cookie_4 = __security_cookie;
            r9_3 = r14_1 + (rbx_5 << 3);
            rbx_3 = r14_1 + (rdi_2 << 3);
            rsi_3 = r14_1;
            uint64_t rcx_7 = (rbx_3 - r9_3 + 7) >> 3;
            
            if (r9_3 > rbx_3)
                rcx_7 = 0;
            
            if (rcx_7)
            {
                int64_t rcx_8;
                int64_t rdi_4;
                rdi_4 = __memfill_u64(r9_3, __security_cookie_4, rcx_7);
                __security_cookie_4 = __security_cookie;
            }
            
            goto label_14000a743;
        }
        
        rdi_2 = rbx_5 + 4;
        r14_1 = _recalloc_base(rsi_3, rdi_2, 8);
        _free_base(0);
        
        if (r14_1)
            goto label_14000a6e2;
    }
    
    return 0xffffffff;
}

int64_t sub_14000a7c8(int64_t* arg1)
{
    int64_t rdx = **arg1;
    
    if (!rdx)
        return 0xffffffff;
    
    uint64_t __security_cookie_1 = __security_cookie;
    char rcx_1 = __security_cookie_1 & 0x3f;
    int64_t rdi_3 = RORQ(__security_cookie_1 ^ *rdx, rcx_1);
    int64_t rbx_3 = RORQ(__security_cookie_1 ^ *(rdx + 8), rcx_1);
    
    if (rdi_3 - 1 <= -3)
    {
        uint64_t __security_cookie_2 = __security_cookie_1;
        int64_t r15_1 = rdi_3;
        int64_t rbp_1 = rbx_3;
        
        while (true)
        {
            rbx_3 -= 8;
            
            if (rbx_3 < rdi_3)
                break;
            
            if (*rbx_3 != __security_cookie_2)
            {
                *rbx_3 = __security_cookie_2;
                sub_14001c600();
                __security_cookie_1 = __security_cookie;
                char rcx_3 = __security_cookie_1 & 0x3f;
                int64_t rdx_1 = **arg1;
                int64_t r9_3 = RORQ(__security_cookie_1 ^ *rdx_1, rcx_3);
                int64_t rax_9 = RORQ(__security_cookie_1 ^ *(rdx_1 + 8), rcx_3);
                
                if (r9_3 == r15_1 && rax_9 == rbp_1)
                    continue;
                
                r15_1 = r9_3;
                rdi_3 = r9_3;
                rbp_1 = rax_9;
                rbx_3 = rax_9;
            }
        }
        
        if (rdi_3 != -1)
        {
            _free_base(rdi_3);
            __security_cookie_1 = __security_cookie;
        }
        
        ***arg1 = __security_cookie_1;
        *(**arg1 + 8) = __security_cookie_1;
        *(**arg1 + 0x10) = __security_cookie_1;
    }
    
    return 0;
}

uint64_t __crt_seh_guarded_call<class <lambda_8b90c8310d35b3462fe809c44bbb350d>,class <lambda_c1ccdfe150d00dafd355d15f2a9edeaa>& __ptr64,class <lambda_e797892004ba4c0bb152531b9d8c3715>,int32_t>::operator()<class <lambda_8b90c8310d35b3462fe809c44bbb350d>,class <lambda_c1ccdfe150d00dafd355d15f2a9edeaa>& __ptr64,class <lambda_e797892004ba4c0bb152531b9d8c3715> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    int32_t rax = sub_14000a618(arg3);
    __vcrt_lock(*arg4);
    return rax;
}

uint64_t sub_14000a91c(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    int32_t rax = sub_14000a7c8(arg3);
    __vcrt_lock(*arg4);
    return rax;
}

uint64_t j_sub_14000aa30()
{
    /* tailcall */
    return common_initialize_environment_nolock<char>();
}

int64_t _get_initial_narrow_environment()
{
    int64_t result = data_14002a310;
    
    if (!result)
    {
        result = data_14002a2f8;
        
        if (!result)
        {
            int32_t rax;
            int32_t rax_1;
            
            if (data_14002a300 != result)
            {
                rax = common_initialize_environment_nolock<char>();
                
                if (rax)
                    rax_1 = sub_14000ac34();
            }
            
            if (data_14002a300 == result || (rax && rax_1))
                result = 0;
            else
                result = data_14002a2f8;
        }
        
        data_14002a310 = result;
    }
    
    return result;
}

int64_t __dcrt_get_or_create_narrow_environment_nolock()
{
    int64_t result = data_14002a2f8;
    
    if (result)
        return result;
    
    if (data_14002a300 != result)
    {
        int32_t rax = common_initialize_environment_nolock<char>();
        int32_t rax_1;
        
        if (rax)
            rax_1 = sub_14000ac34();
        
        if (!rax || !rax_1)
            return data_14002a2f8;
    }
    
    return 0;
}

int64_t __dcrt_uninitialize_environments_nolock()
{
    int64_t var_18 = -2;
    uninitialize_environment_internal<wchar_t>(&data_14002a2f8);
    uninitialize_environment_internal<char>(&data_14002a300);
    free_environment<wchar_t>(data_14002a310);
    /* tailcall */
    return free_environment<wchar_t>(data_14002a308);
}

uint64_t common_initialize_environment_nolock<char>()
{
    int32_t rdi = 0;
    
    if (data_14002a2f8)
        return 0;
    
    __acrt_initialize_multibyte();
    char* rax_1 = __dcrt_get_narrow_environment_from_os();
    
    if (!rax_1)
    {
        _free_base(0);
        return 0xffffffff;
    }
    
    char** rax_2 = sub_14000ab20(rax_1);
    
    if (rax_2)
    {
        data_14002a310 = rax_2;
        data_14002a2f8 = rax_2;
    }
    else
        rdi = -1;
    
    _free_base(0);
    _free_base(rax_1);
    return rdi;
}

void uninitialize_environment_internal<wchar_t>(int64_t* arg1)
{
    int64_t* rcx = *arg1;
    
    if (rcx != data_14002a310)
        free_environment<wchar_t>(rcx);
}

void uninitialize_environment_internal<char>(int64_t* arg1)
{
    int64_t* rcx = *arg1;
    
    if (rcx != data_14002a308)
        free_environment<wchar_t>(rcx);
}

void free_environment<wchar_t>(int64_t* arg1)
{
    if (!arg1)
        return;
    
    int64_t i = *arg1;
    int64_t* rdi_1 = arg1;
    
    for (; i; i = *rdi_1)
    {
        _free_base(i);
        rdi_1 = &rdi_1[1];
    }
    
    _free_base(arg1);
}

char** sub_14000ab20(char* arg1)
{
    char* rsi = arg1;
    int64_t rcx = 0;
    char* r8 = rsi;
    
    for (char i = *rsi; i; i = *r8)
    {
        int64_t rax_1 = rcx + 1;
        
        if (i == 0x3d)
            rax_1 = rcx;
        
        rcx = rax_1;
        int64_t rax_2 = -1;
        
        do
            rax_2 += 1;
         while (r8[rax_2]);
        
        r8 = &r8[1 + rax_2];
    }
    
    char** result_1 = _calloc_base(rcx + 1, 8);
    char** result = result_1;
    
    if (result_1)
    {
        char** result_2 = result;
        
        while (true)
        {
            result_1 = *rsi;
            
            if (!result_1)
            {
                _free_base(0);
                return result;
            }
            
            int64_t rbp_1 = -1;
            
            do
                rbp_1 += 1;
             while (rsi[rbp_1]);
            
            if (result_1 != 0x3d)
            {
                char* rax_4 = _calloc_base(rbp_1 + 1, 1);
                
                if (!rax_4)
                    break;
                
                if (sub_14000b5d0(rax_4, rbp_1 + 1, rsi))
                {
                    int64_t var_18 = 0;
                    _invoke_watson();
                    /* no return */
                }
                
                *result_2 = rax_4;
                result_2 = &result_2[1];
                _free_base(0);
            }
            
            rsi = &rsi[rbp_1 + 1];
        }
        
        free_environment<wchar_t>(result);
        _free_base(0);
    }
    
    _free_base(0);
    return nullptr;
}

wchar16* sub_14000ac34()
{
    int64_t* rdi = data_14002a300;
    
    if (rdi)
    {
        while (true)
        {
            wchar16* result = *rdi;
            
            if (!result)
                return result;
            
            int64_t var_10_1 = 0;
            int64_t var_18_1 = 0;
            int32_t rax_1 = __acrt_WideCharToMultiByte(0, 0, result, 0xffffffff, 0, nullptr);
            int64_t rsi_1 = rax_1;
            
            if (!rax_1)
                break;
            
            char* rax_2 = _calloc_base(rsi_1, 1);
            char* rcx_2;
            
            if (!rax_2)
                rcx_2 = nullptr;
            else
            {
                int64_t var_10_2 = 0;
                int64_t var_18_2 = 0;
                rcx_2 = rax_2;
                
                if (__acrt_WideCharToMultiByte(0, 0, *rdi, 0xffffffff, rax_2, rsi_1))
                {
                    j_common_set_variable_in_environment_nolock<char>(rcx_2, 0);
                    _free_base(0);
                    rdi = &rdi[1];
                    continue;
                }
            }
            
            _free_base(rcx_2);
            break;
        }
    }
    
    return 0xffffffff;
}

void sub_14000ad14(int64_t* arg1, int64_t arg2)
{
    if (arg1 == arg2)
        return;
    
    int64_t* rbx_1 = arg1;
    
    do
    {
        if (*rbx_1)
            sub_14001c600();
        
        rbx_1 = &rbx_1[1];
    } while (rbx_1 != arg2);
}

int64_t sub_14000ad4c(int64_t* arg1, int64_t arg2)
{
    int64_t* rbx = arg1;
    
    if (arg1 != arg2)
    {
        do
        {
            if (*rbx)
            {
                int32_t result = sub_14001c600();
                
                if (result)
                    return result;
            }
            
            rbx = &rbx[1];
        } while (rbx != arg2);
    }
    
    return 0;
}

uint64_t _XcptFilter(int32_t arg1, int64_t arg2)
{
    void** rax = sub_14000be60();
    
    if (rax)
    {
        void* i_1 = *rax;
        void* i = i_1;
        
        if (i_1 != i_1 + 0xc0)
        {
            do
            {
                if (*i == arg1)
                {
                    if (i)
                    {
                        int64_t r8_2 = *(i + 8);
                        
                        if (r8_2)
                        {
                            if (r8_2 == 5)
                            {
                                *(i + 8) = 0;
                                return r8_2 - 4;
                            }
                            
                            if (r8_2 != 1)
                            {
                                int64_t rbp_1 = rax[1];
                                rax[1] = arg2;
                                
                                if (*(i + 4) != 8)
                                {
                                    *(i + 4);
                                    *(i + 8) = 0;
                                    sub_14001c600();
                                }
                                else
                                {
                                    void* j = i_1 + 0x30;
                                    
                                    for (void* rdx = j + 0x90; j != rdx; j += 0x10)
                                        *(j + 8) = 0;
                                    
                                    int32_t rdi_1 = rax[2];
                                    
                                    if (*i == 0xc000008d)
                                        rax[2] = 0x82;
                                    else if (*i == 0xc000008e)
                                        rax[2] = 0x83;
                                    else if (*i == 0xc000008f)
                                        rax[2] = 0x86;
                                    else if (*i == 0xc0000090)
                                        rax[2] = 0x81;
                                    else if (*i == 0xc0000091)
                                        rax[2] = 0x84;
                                    else if (*i == 0xc0000092)
                                        rax[2] = 0x8a;
                                    else if (*i == 0xc0000093)
                                        rax[2] = 0x85;
                                    else if (*i == 0xc00002b4)
                                        rax[2] = 0x8e;
                                    else if (*i == 0xc00002b5)
                                        rax[2] = 0x8d;
                                    
                                    sub_14001c600();
                                    rax[2] = rdi_1;
                                }
                                
                                rax[1] = rbp_1;
                            }
                            
                            return 0xffffffff;
                        }
                    }
                    
                    break;
                }
                
                i += 0x10;
            } while (i != i_1 + 0xc0);
        }
    }
    
    return 0;
}

uint64_t sub_14000aef4()
{
    return data_14002a318;
}

int64_t sub_14000aefc(int32_t arg1)
{
    data_14002a318 = arg1;
}

int64_t _set_fmode(int32_t arg1)
{
    if (!((arg1 - 0x4000) & 0xffff3fff) && arg1 != 0xc000)
    {
        data_14002ab98;
        data_14002ab98 = arg1;
        return 0;
    }
    
    *sub_14000dedc() = 0x16;
    _invalid_parameter_noinfo();
    return 0x16;
}

uint64_t sub_14000af50()
{
    return data_14002a31c;
}

uint64_t _set_new_mode(int32_t arg1)
{
    if (arg1 <= 1)
    {
        int32_t temp0_1 = data_14002a31c;
        data_14002a31c = arg1;
        return temp0_1;
    }
    
    *sub_14000dedc() = 0x16;
    _invalid_parameter_noinfo();
    return 0xffffffff;
}

uint64_t puts(char* arg1)
{
    bool cond:0 = data_14002a1b8;
    void* var_68 = nullptr;
    char var_58 = 0;
    char var_40 = 0;
    char var_38 = 0;
    char var_30 = 0;
    
    if (!cond:0)
    {
        var_40 = 1;
        int128_t var_50_1 = *data_1400298c8;
    }
    
    char* arg_10 = arg1;
    int32_t var_3c;
    int32_t rdi;
    
    if (arg1)
    {
        void* rax_1 = sub_140002468(1);
        void* arg_18 = rax_1;
        
        if (!(1 & *(rax_1 + 0x14) >> 0xc))
        {
            int64_t r8_1 = _fileno(rax_1);
            void* r9_1 = &data_1400291e0;
            void* r10_1;
            
            if (r8_1 + 2 <= 1)
                r10_1 = &data_1400291e0;
            else
                r10_1 = (&data_14002a700)[r8_1 >> 6] + (r8_1 & 0x3f) * 0x48;
            
            if (*(r10_1 + 0x39))
                goto label_14000afda;
            
            if (r8_1 + 2 > 1)
                r9_1 = (&data_14002a700)[r8_1 >> 6] + (r8_1 & 0x3f) * 0x48;
            
            if (*(r9_1 + 0x3d) & 1)
                goto label_14000afda;
        }
        
        int64_t rdi_1 = -1;
        
        do
            rdi_1 += 1;
         while (arg_10[rdi_1]);
        
        int64_t arg_20 = rdi_1;
        void** var_88 = &arg_18;
        void** var_80_1 = &var_68;
        char** var_78_1 = &arg_10;
        int64_t* var_70_1 = &arg_20;
        void* rax_11 = arg_18;
        void* var_98 = rax_11;
        void* var_90 = rax_11;
        void arg_8;
        rdi = __crt_seh_guarded_call<class <lambda_7ea02354adac61b93e3a5c2c4100d85b>,class <lambda_8abd18a77b33e1dd4bdebee267cfa707>& __ptr64,class <lambda_eba452c8b8afd9ffb9102a507ee4e553>,int32_t>::operator()<class <lambda_7ea02354adac61b93e3a5c2c4100d85b>,class <lambda_8abd18a77b33e1dd4bdebee267cfa707>& __ptr64,class <lambda_eba452c8b8afd9ffb9102a507ee4e553> >(
            &arg_8, &var_90, &var_88, &var_98);
    }
    else
    {
    label_14000afda:
        var_38 = 1;
        var_3c = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, 0, &var_68);
        rdi = -1;
    }
    
    if (var_40 == 2)
    {
        void* rcx_9 = var_68;
        *(rcx_9 + 0x3a8) &= 0xfffffffd;
    }
    
    if (var_38)
        *(sub_1400028a0(&var_68) + 0x20) = var_3c;
    
    int32_t var_34;
    
    if (var_30)
        *(sub_1400028a0(&var_68) + 0x24) = var_34;
    return rdi;
}

uint64_t <lambda_8abd18a77b33e1dd4bdebee267cfa707>::operator()(int64_t* arg1)
{
    int64_t* rbp = arg1[1];
    void** rsi = **arg1;
    int64_t r14;
    r14 = __acrt_stdio_begin_temporary_buffering_nolock(rsi);
    int32_t rdi = -1;
    int64_t* rcx_3;
    
    if (_fwrite_nolock_internal(*arg1[2], 1, *arg1[3], **arg1, arg1[1]) == *arg1[3])
    {
        int32_t rax_3;
        rax_3 = _fputc_nolock_internal(0xa, **arg1, arg1[1]);
        
        if (rax_3 != 0xffffffff)
            rdi = 0;
    }
    
    rcx_3 = r14;
    __acrt_stdio_end_temporary_buffering_nolock(rcx_3, rsi, rbp);
    return rdi;
}

uint64_t __crt_seh_guarded_call<class <lambda_7ea02354adac61b93e3a5c2c4100d85b>,class <lambda_8abd18a77b33e1dd4bdebee267cfa707>& __ptr64,class <lambda_eba452c8b8afd9ffb9102a507ee4e553>,int32_t>::operator()<class <lambda_7ea02354adac61b93e3a5c2c4100d85b>,class <lambda_8abd18a77b33e1dd4bdebee267cfa707>& __ptr64,class <lambda_eba452c8b8afd9ffb9102a507ee4e553> >(int64_t arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4)
{
    int64_t* arg_20 = arg4;
    sub_14000247c(*arg2);
    int32_t rax = <lambda_8abd18a77b33e1dd4bdebee267cfa707>::operator()(arg3);
    sub_140002488(*arg4);
    return rax;
}

void sub_14000b220() __noreturn
{
    if (__vcrt_getptd()[3])
        sub_14001c600();
    
    abort();
    /* no return */
}

int64_t _ValidateImageBase(int16_t* arg1)
{
    if (*arg1 == 0x5a4d)
    {
        void* rdx_2 = *(arg1 + 0x3c) + arg1;
        
        if (*rdx_2 == 0x4550)
        {
            int64_t result;
            result = *(rdx_2 + 0x18) == 0x20b;
            return result;
        }
    }
    
    return 0;
}

void* _FindPESection(void* arg1, int64_t arg2)
{
    int32_t r9 = 0;
    void* r8 = *(arg1 + 0x3c) + arg1;
    uint32_t r11 = *(r8 + 6);
    void* result = *(r8 + 0x14) + 0x18 + r8;
    
    if (r11)
    {
        do
        {
            uint64_t rdx = *(result + 0xc);
            
            if (arg2 >= rdx && arg2 < *(result + 8) + rdx)
                return result;
            
            r9 += 1;
            result += 0x28;
        } while (r9 < r11);
    }
    
    return nullptr;
}

void* sub_14000b2c0(int64_t arg1)
{
    void* result = _ValidateImageBase(&__dos_header);
    
    if (result)
    {
        result = _FindPESection(&__dos_header, arg1 - &__dos_header);
        
        if (result)
            return ~*(result + 0x24) >> 0x1f;
    }
    
    return result;
}

int64_t sub_14000b340()
{
    int64_t rcx;
    int64_t arg_8 = rcx;
    int64_t rdx;
    int64_t arg_18 = rdx;
    int32_t r8;
    int32_t arg_10 = r8;
    /* tailcall */
    return sub_14000b360();
}

int64_t sub_14000b360() __pure
{
    return;
}

int64_t sub_14000b370() __pure
{
    return;
}

void (*)(void (* arg1)()) __except_validate_context_record(void* arg1)
{
    return _guard_check_icall;
}

void abort() __noreturn
{
    if (__acrt_get_sigabrt_handler())
        sub_14000d79c(0x16);
    
    if (data_1400291c0 & 2)
    {
        if (IsProcessorFeaturePresent(PF_FASTFAIL_AVAILABLE))
            trap(0xd);
        
        __acrt_call_reportfault(3, 0x40000015);
    }
    
    sub_140009dbc(3);
    breakpoint();
}

uint32_t __vcrt_initialize_ptd()
{
    uint32_t result = __vcrt_FlsAlloc(__vcrt_freefls);
    data_1400291c4 = result;
    
    if (result == 0xffffffff)
        result = 0;
    else if (!__vcrt_FlsSetValue(result, &data_14002a320))
    {
        sub_14000b44c();
        result = 0;
    }
    else
    {
        data_14002a398 = 0xfffffffe;
        result = 1;
    }
    
    return result;
}

int64_t sub_14000b44c()
{
    uint32_t rcx = data_1400291c4;
    
    if (rcx != 0xffffffff)
    {
        __vcrt_FlsFree(rcx);
        data_1400291c4 = 0xffffffff;
    }
    
    int64_t result;
    result = 1;
    return result;
}

void* __vcrt_getptd()
{
    void* result = sub_14000b490();
    
    if (result)
        return result;
    
    abort();
    /* no return */
}

void* sub_14000b490()
{
    if (data_1400291c4 == 0xffffffff)
        return nullptr;
    
    enum WIN32_ERROR dwErrCode = GetLastError();
    void* result_1 = __vcrt_FlsGetValue(data_1400291c4);
    void* result = nullptr;
    
    if (result_1 != -1)
    {
        if (!result_1)
        {
            if (__vcrt_FlsSetValue(data_1400291c4, -1))
            {
                void* result_2 = calloc(1, 0x80);
                uint32_t rcx_3 = data_1400291c4;
                void* const result_3 = result_2;
                
                if (!result_2)
                    __vcrt_FlsSetValue(rcx_3, 0);
                else if (!__vcrt_FlsSetValue(rcx_3, result_2))
                    __vcrt_FlsSetValue(data_1400291c4, 0);
                else
                {
                    *(result_3 + 0x78) = 0xfffffffe;
                    result_3 = nullptr;
                    result = result_2;
                }
                
                j_sub_14000d150(result_3);
            }
        }
        else
            result = result_1;
    }
    
    SetLastError(dwErrCode);
    return result;
}

void __vcrt_freefls(int64_t arg1)
{
    if (arg1 && arg1 != &data_14002a320)
        j_sub_14000d150(arg1);
}

struct type_info::VTable** type_info::`scalar deleting destructor'(struct type_info::VTable** arg1, char arg2)
{
    *arg1 = &type_info::`vftable';
    
    if (arg2 & 1)
        j_sub_14000d150(arg1);
    
    return arg1;
}

void j_sub_14000d150(int64_t arg1)
{
    /* tailcall */
    return _free_base(arg1);
}

int64_t j_sub_14000e1b0(uint64_t arg1)
{
    /* tailcall */
    return _malloc_base(arg1);
}

int64_t sub_14000b5d0(char* arg1, int64_t arg2, int64_t arg3)
{
    char* r9 = arg1;
    
    if (arg1 && arg2)
    {
        if (arg3)
        {
            while (true)
            {
                char rax_3 = *(arg3 - r9 + arg1);
                *arg1 = rax_3;
                arg1 = &arg1[1];
                
                if (!rax_3)
                    break;
                
                int64_t temp0_1 = arg2;
                arg2 -= 1;
                
                if (temp0_1 == 1)
                {
                    if (arg2)
                        break;
                    
                    *r9 = arg2;
                    *sub_14000dedc() = 0x22;
                    _invalid_parameter_noinfo();
                    return 0x22;
                }
            }
            
            return 0;
        }
        
        *arg1 = arg3;
    }
    
    *sub_14000dedc() = 0x16;
    _invalid_parameter_noinfo();
    return 0x16;
}

int64_t __vcrt_initialize_locks()
{
    uint64_t rbx = 0;
    int32_t result;
    
    while (true)
    {
        if (!__vcrt_InitializeCriticalSectionEx(&data_14002a3a0 + rbx * 0x28, 0xfa0, 0))
        {
            __vcrt_uninitialize_locks();
            result = 0;
            break;
        }
        
        data_14002a3c8 += 1;
        rbx = rbx + 1;
        
        if (rbx >= 1)
        {
            result = 1;
            break;
        }
    }
    
    return result;
}

int64_t __vcrt_uninitialize_locks()
{
    uint64_t rbx = data_14002a3c8;
    
    while (rbx)
    {
        rbx = rbx - 1;
        DeleteCriticalSection(&data_14002a3a0 + rbx * 0x28);
        data_14002a3c8 -= 1;
    }
    
    int64_t result;
    result = 1;
    return result;
}

BOOL sub_14000b6d0()
{
    int32_t lpflOldProtect = 0;
    BOOL result;
    result = VirtualProtect(&data_14002d000, 0x100, PAGE_READONLY, &lpflOldProtect);
    return result;
}

void* __acrt_uninitialize_winapi_thunks(char arg1)
{
    if (!arg1)
    {
        for (void* i = &data_14002a3d0; i != &data_14002a488; i += 8)
        {
            HMODULE hLibModule = *i;
            
            if (hLibModule)
            {
                if (hLibModule != -1)
                    FreeLibrary(hLibModule);
                
                *i = 0;
            }
        }
    }
    
    void* result;
    result = 1;
    return result;
}

int64_t sub_14000b744()
{
    int64_t rax = data_14002d000;
    
    if (rax != -1)
    {
        int64_t rax_1;
        
        if (!rax)
            rax_1 = sub_14000ba80(0, "AreFileApisANSI", &data_14001f7b8, &data_14001f7bc);
        
        if (rax || rax_1)
            /* tailcall */
            return sub_14001c600();
    }
    
    return 1;
}

int64_t sub_14000b790(int16_t* arg1, uint32_t arg2, wchar16* arg3, int32_t arg4, wchar16* arg5, int32_t arg6, int64_t arg7, int64_t arg8, int64_t arg9)
{
    if (!sub_14000bc34())
        return CompareStringW(sub_14000b97c(arg1, 0), arg2, arg3, arg4, arg5, arg6);
    
    int64_t var_18_1 = arg9;
    int64_t var_20_1 = arg8;
    int64_t var_28_1 = arg7;
    int32_t var_30 = arg6;
    wchar16* var_38 = arg5;
    return sub_14001c600();
}

uint32_t FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback)
{
    /* tailcall */
    return FlsAlloc(lpCallback);
}

BOOL FlsFree(uint32_t dwFlsIndex)
{
    /* tailcall */
    return FlsFree(dwFlsIndex);
}

int64_t FlsGetValue(uint32_t dwFlsIndex)
{
    /* tailcall */
    return FlsGetValue(dwFlsIndex);
}

BOOL FlsSetValue(uint32_t dwFlsIndex, void* lpFlsData)
{
    /* tailcall */
    return FlsSetValue(dwFlsIndex, lpFlsData);
}

int64_t sub_14000b874()
{
    /* tailcall */
    return data_14002d018();
}

BOOL InitializeCriticalSectionEx(CRITICAL_SECTION* lpCriticalSection, uint32_t dwSpinCount, uint32_t Flags)
{
    /* tailcall */
    return InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);
}

int64_t sub_14000b888(int16_t* arg1, uint32_t arg2, wchar16* arg3, int32_t arg4, PWSTR arg5, int32_t arg6, int64_t arg7, int64_t arg8, int64_t arg9)
{
    int64_t r10 = data_14002d090;
    
    if (r10 != -1)
    {
        int64_t rax_1;
        
        if (!r10)
            rax_1 = sub_14000ba80(r10 + 0x12, "LCMapStringEx", &data_14001f7d0, &data_14001f7d8);
        
        if (r10 || rax_1)
        {
            int64_t var_18_1 = arg9;
            int64_t var_20_1 = arg8;
            int64_t var_28_1 = arg7;
            int32_t var_30 = arg6;
            PWSTR var_38 = arg5;
            return sub_14001c600();
        }
    }
    
    return LCMapStringW(sub_14000b97c(arg1, 0), arg2, arg3, arg4, arg5, arg6);
}

uint64_t sub_14000b97c(int16_t* arg1, int32_t arg2)
{
    int64_t rax = data_14002d0a0;
    
    if (rax != -1)
    {
        int64_t rax_1;
        
        if (!rax)
            rax_1 = sub_14000ba80(rax + 0x14, "LocaleNameToLCID", &data_14001f7d8, &data_14001f7e0);
        
        if (rax || rax_1)
            return sub_14001c600();
    }
    
    return sub_140013150(arg1);
}

int64_t sub_14000b9e0()
{
    int64_t rax = data_14002d0d0;
    
    if (rax != -1)
    {
        int64_t rax_1;
        
        if (!rax)
            rax_1 = sub_14000ba80(rax + 0x1a, "AppPolicyGetProcessTerminationMethod", 
                &data_14001f7e0, &data_14001f7e4);
        
        if (rax || rax_1)
            /* tailcall */
            return sub_14001c600();
    }
    
    return 0xc0000225;
}

int64_t sub_14000ba3c()
{
    int64_t result = data_14002d018;
    bool cond:0_1;
    
    if (result != -1)
    {
        cond:0_1 = result;
        
        if (!result)
            cond:0_1 = sub_14000ba80(result + 3, "FlsGetValue2", &data_14001f7c8, &data_14001f7d0);
    }
    else
        cond:0_1 = 0;
    
    result = cond:0_1;
    return result;
}

int64_t sub_14000ba80(int32_t arg1, PSTR arg2, int32_t* arg3, int64_t arg4)
{
    uint64_t r12 = arg1;
    int32_t* rsi = arg3;
    int64_t result;
    
    if (arg3 == arg4)
    {
    label_14000bb70:
        result = 0;
    }
    else
    {
        while (true)
        {
            uint64_t rdi_1 = *rsi;
            HMODULE rbx_1 = *((rdi_1 << 3) + &data_14002a3d0);
            
            if (!rbx_1)
            {
                int16_t* lpLibFileName = (&data_14001f700)[rdi_1];
                HMODULE rax_1 =
                    LoadLibraryExW(lpLibFileName, nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
                rbx_1 = rax_1;
                
                if (rax_1)
                {
                label_14000bc02:
                    int64_t temp0_2 = *((rdi_1 << 3) + &data_14002a3d0);
                    *((rdi_1 << 3) + &data_14002a3d0) = rbx_1;
                    
                    if (temp0_2)
                        FreeLibrary(rbx_1);
                    
                    result = GetProcAddress(rbx_1, arg2);
                    break;
                }
                
                enum WIN32_ERROR rax_2 = GetLastError();
                
                if (rax_2 != ERROR_INVALID_PARAMETER)
                    *((rdi_1 << 3) + &data_14002a3d0) = -1;
                else if (!sub_140010e30(lpLibFileName, u"api-ms-", rax_2 - 0x50))
                    *((rdi_1 << 3) + &data_14002a3d0) = -1;
                else if (!sub_140010e30(lpLibFileName, u"ext-ms-", rax_2 - 0x50))
                    *((rdi_1 << 3) + &data_14002a3d0) = -1;
                else
                {
                    HMODULE rax_5 = LoadLibraryExW(lpLibFileName, nullptr, 0);
                    rbx_1 = rax_5;
                    
                    if (rax_5)
                        goto label_14000bc02;
                    
                    *((rdi_1 << 3) + &data_14002a3d0) = -1;
                }
            }
            else if (rbx_1 != -1)
            {
                result = GetProcAddress(rbx_1, arg2);
                break;
            }
            
            rsi = &rsi[1];
            
            if (rsi == arg4)
                goto label_14000bb70;
        }
    }
    
    __vcrt_unlock(0xe);
    enum PAGE_PROTECTION_FLAGS lpflOldProtect = 0;
    
    if (VirtualProtect(&data_14002d000, 0x100, PAGE_READWRITE, &lpflOldProtect))
    {
        int64_t result_1 = result;
        
        if (!result)
            result_1 = -1;
        
        (&data_14002d000)[r12];
        (&data_14002d000)[r12] = result_1;
        
        if (VirtualProtect(&data_14002d000, 0x100, PAGE_READONLY, &lpflOldProtect))
        {
            __vcrt_lock(0xe);
            return result;
        }
    }
    
    abort();
    /* no return */
}

int64_t sub_14000bc34()
{
    int64_t result = data_14002d008;
    
    if (result == -1)
        return 0;
    
    if (!result)
        /* tailcall */
        return sub_14000ba80(1, "CompareStringEx", &data_14001f7c0, &data_14001f7c8);
    
    return result;
}

BOOL sub_14000bc6c()
{
    uint64_t rbx = 0;
    BOOL result;
    
    while (true)
    {
        if (!InitializeCriticalSectionEx(&data_14002a490 + rbx * 0x28, 0xfa0, 0))
        {
            sub_14000bcb4();
            result = 0;
            break;
        }
        
        data_14002a6e8 += 1;
        rbx = rbx + 1;
        
        if (rbx >= 0xf)
        {
            result = 1;
            break;
        }
    }
    
    return result;
}

int64_t sub_14000bcb4()
{
    uint64_t rbx = data_14002a6e8;
    
    while (rbx)
    {
        rbx = rbx - 1;
        DeleteCriticalSection(&data_14002a490 + rbx * 0x28);
        data_14002a6e8 -= 1;
    }
    
    int64_t result;
    result = 1;
    return result;
}

int64_t __vcrt_unlock(int32_t arg1)
{
    /* tailcall */
    return EnterCriticalSection(&data_14002a490 + arg1 * 0x28);
}

int64_t __vcrt_lock(int32_t arg1)
{
    /* tailcall */
    return LeaveCriticalSection(&data_14002a490 + arg1 * 0x28);
}

int64_t sub_14000bd30()
{
    return data_14002a6f0;
}

HANDLE __acrt_initialize_heap()
{
    HANDLE result = GetProcessHeap();
    data_14002a6f0 = result;
    result = result;
    return result;
}

int64_t sub_14000bd70()
{
    data_14002a6f0 = 0;
    int64_t result;
    result = 1;
    return result;
}

int64_t sub_14000bd90()
{
    return data_14002a6f0;
}

void** sub_14000bd98()
{
    data_14002a6f8 = sub_14000ba3c();
    void** result = FlsAlloc(destroy_fls);
    data_1400291d0 = result;
    
    if (result != 0xffffffff)
    {
        if (sub_14000be60())
            result = 1;
        else
        {
            __vcrt_uninitialize_ptd();
            result = 0;
        }
    }
    else
        result = 0;
    
    return result;
}

int64_t __vcrt_uninitialize_ptd()
{
    uint32_t dwFlsIndex = data_1400291d0;
    
    if (dwFlsIndex != 0xffffffff)
    {
        FlsFree(dwFlsIndex);
        data_1400291d0 = 0xffffffff;
    }
    
    int64_t result;
    result = 1;
    return result;
}

void** __vcrt_getptd()
{
    void** result = sub_14000be60();
    
    if (result)
        return result;
    
    abort();
    /* no return */
}

void** sub_14000be1c()
{
    int64_t var_18 = -2;
    uint32_t dwFlsIndex = data_1400291d0;
    void** result;
    
    if (dwFlsIndex != 0xffffffff)
        result = FlsGetValue(dwFlsIndex);
    else
        result = nullptr;
    
    if (result != -1)
    {
        if (result)
            return result;
        
        result = sub_14000c19c();
        
        if (result)
            return result;
    }
    
    abort();
    /* no return */
}

void** sub_14000be60()
{
    int64_t var_18 = -2;
    void** rdi = nullptr;
    
    if (!data_14002a6f8)
    {
        enum WIN32_ERROR dwErrCode = GetLastError();
        uint32_t dwFlsIndex = data_1400291d0;
        void** rax_1;
        
        if (dwFlsIndex != 0xffffffff)
            rax_1 = FlsGetValue(dwFlsIndex);
        else
            rax_1 = nullptr;
        
        if (rax_1 != -1)
        {
            if (!rax_1)
                rax_1 = sub_14000c19c();
            
            rdi = rax_1;
        }
        
        SetLastError(dwErrCode);
    }
    else
    {
        void** rax;
        
        if (data_1400291d0 != 0xffffffff)
            rax = sub_14000b874();
        else
            rax = nullptr;
        
        if (rax != -1)
        {
            if (rax)
                return rax;
            
            return sub_14000c19c();
        }
    }
    
    return rdi;
}

void* sub_14000bef0(int64_t arg1, int64_t arg2)
{
    int64_t var_18 = -2;
    uint32_t dwFlsIndex = data_1400291d0;
    void** rax;
    
    if (dwFlsIndex != 0xffffffff)
        rax = FlsGetValue(dwFlsIndex);
    else
        rax = nullptr;
    
    if (rax != -1)
    {
        if (rax)
            return arg2 * 0x3c8 + rax;
        
        rax = sub_14000c19c();
        
        if (rax)
            return arg2 * 0x3c8 + rax;
    }
    
    return nullptr;
}

void destroy_fls(int64_t* arg1)
{
    if (arg1)
    {
        destroy_ptd_array(arg1);
        _free_base(arg1);
    }
}

void replace_current_thread_locale_nolock(void* arg1, void* arg2)
{
    void* rcx = *(arg1 + 0x90);
    
    if (rcx)
    {
        __acrt_release_locale_ref(rcx);
        void* rcx_1 = *(arg1 + 0x90);
        
        if (rcx_1 != data_14002ab58 && rcx_1 != &data_140029770 && !*(rcx_1 + 0x10))
            __acrt_free_locale(rcx_1);
    }
    
    *(arg1 + 0x90) = arg2;
    
    if (arg2)
        sub_140011084(arg2);
}

int64_t construct_ptd_array(void** arg1)
{
    void** var_30 = arg1;
    int64_t* var_20 = &var_30;
    int32_t arg_18 = 5;
    int32_t arg_20 = 5;
    int64_t* var_18 = &var_30;
    int64_t* var_28;
    int64_t* var_10 = &var_28;
    int32_t var_38 = 4;
    int32_t var_34 = 4;
    var_28 = &data_14002ab58;
    arg1[5] = 1;
    *var_30 = &data_14001ef00;
    var_30[0x75] = 1;
    var_30[0x11] = &data_140029230;
    *(var_30 + 0xbc) = 0x43;
    *(var_30 + 0x1c2) = 0x43;
    var_30[0x74] = 0;
    void arg_10;
    sub_14000c254(&arg_10, &arg_20, &var_20, &arg_18);
    return __crt_seh_guarded_call<class <lambda_5e887d1dcbef67a5eb4283622ba103bf>,class <lambda_4466841279450cc726390878d4a41900>& __ptr64,class <lambda_341c25c0346d94847f1f3c463c57e077>,void>::operator()<class <lambda_5e887d1dcbef67a5eb4283622ba103bf>,class <lambda_4466841279450cc726390878d4a41900>& __ptr64,class <lambda_341c25c0346d94847f1f3c463c57e077> >(
        &arg_10, &var_34, &var_18, &var_38);
}

int64_t destroy_ptd_array(int64_t* arg1)
{
    int64_t* var_20 = arg1;
    int64_t* var_18 = &var_20;
    int32_t arg_18 = 5;
    int32_t arg_20 = 5;
    int64_t* var_10 = &var_20;
    int32_t var_28 = 4;
    int32_t var_24 = 4;
    int64_t rax = *arg1;
    
    if (rax != &data_14001ef00)
    {
        _free_base(rax);
        arg1 = var_20;
    }
    
    _free_base(arg1[0xe]);
    _free_base(var_20[0xb]);
    _free_base(var_20[0xc]);
    _free_base(var_20[0xd]);
    _free_base(var_20[9]);
    _free_base(var_20[0xa]);
    _free_base(var_20[0xf]);
    _free_base(var_20[0x10]);
    _free_base(var_20[0x78]);
    void arg_10;
    __crt_seh_guarded_call<class <lambda_46352004c1216016012b18bd6f87e700>,class <lambda_3bd07e1a1191394380780325891bf33f>& __ptr64,class <lambda_334532d3f185bcaa59b5be82d7d22bff>,void>::operator()<class <lambda_46352004c1216016012b18bd6f87e700>,class <lambda_3bd07e1a1191394380780325891bf33f>& __ptr64,class <lambda_334532d3f185bcaa59b5be82d7d22bff> >(
        &arg_10, &arg_20, &var_18, &arg_18);
    return __crt_seh_guarded_call<class <lambda_fb3a7dec4e47f37f22dae91bb15c9095>,class <lambda_698284760c8add0bfb0756c19673e34b>& __ptr64,class <lambda_dfb8eca1e75fef3034a8fb18dd509707>,void>::operator()<class <lambda_fb3a7dec4e47f37f22dae91bb15c9095>,class <lambda_698284760c8add0bfb0756c19673e34b>& __ptr64,class <lambda_dfb8eca1e75fef3034a8fb18dd509707> >(
        &arg_10, &var_24, &var_10, &var_28);
}

void** sub_14000c19c()
{
    enum WIN32_ERROR dwErrCode = GetLastError();
    void** result = nullptr;
    
    if (FlsSetValue(data_1400291d0, -ffffffffffffffff))
    {
        void** lpFlsData = _calloc_base(1, 0x3c8);
        uint32_t dwFlsIndex = data_1400291d0;
        
        if (lpFlsData)
        {
            if (FlsSetValue(dwFlsIndex, lpFlsData))
            {
                construct_ptd_array(lpFlsData);
                _free_base(0);
                result = lpFlsData;
            }
            else
            {
                FlsSetValue(data_1400291d0, nullptr);
                _free_base(lpFlsData);
            }
            
            SetLastError(dwErrCode);
            return result;
        }
        
        FlsSetValue(dwFlsIndex, nullptr);
        _free_base(0);
    }
    
    SetLastError(dwErrCode);
    return nullptr;
}

int64_t sub_14000c254(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    int32_t* rax_1 = *(**arg3 + 0x88);
    *rax_1 += 1;
    return __vcrt_lock(*arg4);
}

int64_t __crt_seh_guarded_call<class <lambda_5e887d1dcbef67a5eb4283622ba103bf>,class <lambda_4466841279450cc726390878d4a41900>& __ptr64,class <lambda_341c25c0346d94847f1f3c463c57e077>,void>::operator()<class <lambda_5e887d1dcbef67a5eb4283622ba103bf>,class <lambda_4466841279450cc726390878d4a41900>& __ptr64,class <lambda_341c25c0346d94847f1f3c463c57e077> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    replace_current_thread_locale_nolock(**arg3, **arg3[1]);
    return __vcrt_lock(*arg4);
}

int64_t __crt_seh_guarded_call<class <lambda_46352004c1216016012b18bd6f87e700>,class <lambda_3bd07e1a1191394380780325891bf33f>& __ptr64,class <lambda_334532d3f185bcaa59b5be82d7d22bff>,void>::operator()<class <lambda_46352004c1216016012b18bd6f87e700>,class <lambda_3bd07e1a1191394380780325891bf33f>& __ptr64,class <lambda_334532d3f185bcaa59b5be82d7d22bff> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    int32_t* rcx_2 = *(**arg3 + 0x88);
    
    if (rcx_2)
    {
        int32_t rax_1 = *rcx_2;
        *rcx_2 -= 1;
        
        if (rax_1 == 1 && rcx_2 != &data_140029230)
            _free_base(rcx_2);
    }
    
    return __vcrt_lock(*arg4);
}

int64_t __crt_seh_guarded_call<class <lambda_fb3a7dec4e47f37f22dae91bb15c9095>,class <lambda_698284760c8add0bfb0756c19673e34b>& __ptr64,class <lambda_dfb8eca1e75fef3034a8fb18dd509707>,void>::operator()<class <lambda_fb3a7dec4e47f37f22dae91bb15c9095>,class <lambda_698284760c8add0bfb0756c19673e34b>& __ptr64,class <lambda_dfb8eca1e75fef3034a8fb18dd509707> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    replace_current_thread_locale_nolock(**arg3, nullptr);
    return __vcrt_lock(*arg4);
}

int64_t __acrt_initialize_lowio()
{
    __vcrt_unlock(7);
    char rbx = 0;
    
    if (!__acrt_lowio_ensure_fh_exists(0))
    {
        sub_14000c3f8();
        initialize_stdio_handles_nolock();
        rbx = 1;
    }
    
    __vcrt_lock(7);
    int64_t result;
    result = rbx;
    return result;
}

int64_t __acrt_uninitialize_lowio()
{
    for (int64_t i = 0; i < 0x400; i += 8)
    {
        CRITICAL_SECTION* rcx_1 = *(i + &data_14002a700);
        
        if (rcx_1)
        {
            __acrt_lowio_destroy_handle_array(rcx_1);
            *(i + &data_14002a700) = 0;
        }
    }
    
    int64_t result;
    result = 1;
    return result;
}

int32_t* sub_14000c3f8()
{
    void startupInfo;
    sub_14001c640(&startupInfo, 0, 0x68);
    int32_t* result = GetStartupInfoW(&startupInfo);
    int16_t var_36;
    
    if (var_36)
    {
        int32_t* result_1;
        result = result_1;
        
        if (result)
        {
            void* rsi_1 = &result[1];
            uint64_t i_1 = 0x2000;
            void* rbx_2 = *result + rsi_1;
            
            if (*result < 0x2000)
                i_1 = *result;
            
            result = __acrt_lowio_ensure_fh_exists(i_1);
            
            if (i_1 > data_14002ab00)
                i_1 = data_14002ab00;
            
            if (i_1)
            {
                int64_t rbp_1 = 0;
                uint64_t i;
                
                do
                {
                    if (*rbx_2 != -1 && *rbx_2 != -2 && *rsi_1 & 1)
                    {
                        if (!(*rsi_1 & 8))
                            result = GetFileType(*rbx_2);
                        
                        if (*rsi_1 & 8 || result)
                        {
                            int64_t rcx_6 = (&data_14002a700)[rbp_1 >> 6];
                            uint64_t rdx_1 = (rbp_1 & 0x3f) * 9;
                            *(rcx_6 + (rdx_1 << 3) + 0x28) = *rbx_2;
                            result = *rsi_1;
                            *(rcx_6 + (rdx_1 << 3) + 0x38) = result;
                        }
                    }
                    
                    rbp_1 += 1;
                    rsi_1 += 1;
                    rbx_2 += 8;
                    i = i_1;
                    i_1 -= 1;
                } while (i != 1);
            }
        }
    }
    
    return result;
}

uint64_t initialize_stdio_handles_nolock()
{
    int32_t i = 0;
    int64_t r14 = 0;
    uint64_t result;
    
    do
    {
        int64_t i_1 = i;
        uint64_t rbx_1 = (i_1 & 0x3f) * 9;
        int64_t rdi_1 = (&data_14002a700)[i_1 >> 6];
        result = *(rdi_1 + (rbx_1 << 3) + 0x28) + 2;
        
        if (result <= 1)
        {
            *(rdi_1 + (rbx_1 << 3) + 0x38) = 0x81;
            enum STD_HANDLE nStdHandle;
            
            if (!i)
                nStdHandle = STD_INPUT_HANDLE;
            else if (i == 1)
                nStdHandle = STD_OUTPUT_HANDLE;
            else
                nStdHandle = STD_ERROR_HANDLE;
            
            HANDLE hFile = GetStdHandle(nStdHandle);
            enum FILE_TYPE rax_4;
            
            if (hFile + 1 > 1)
                rax_4 = GetFileType(hFile);
            
            if (hFile + 1 <= 1 || !rax_4)
            {
                *(rdi_1 + (rbx_1 << 3) + 0x38) |= 0x40;
                *(rdi_1 + (rbx_1 << 3) + 0x28) = -2;
                result = data_14002a158;
                
                if (result)
                {
                    result = *(r14 + result);
                    *(result + 0x18) = 0xfffffffe;
                }
            }
            else
            {
                result = rax_4;
                *(rdi_1 + (rbx_1 << 3) + 0x28) = hFile;
                
                if (result == 2)
                    *(rdi_1 + (rbx_1 << 3) + 0x38) |= 0x40;
                else if (result == 3)
                    *(rdi_1 + (rbx_1 << 3) + 0x38) |= 8;
            }
        }
        else
            *(rdi_1 + (rbx_1 << 3) + 0x38) |= 0x80;
        
        i += 1;
        r14 += 8;
    } while (i != 3);
    
    return result;
}

int64_t __acrt_update_thread_multibyte_data()
{
    /* tailcall */
    return update_thread_multibyte_data_internal(__vcrt_getptd(), &data_14002ab18);
}

uint64_t __acrt_initialize_multibyte()
{
    if (!data_14002ab24)
    {
        data_14002ab10 = &data_140029570;
        data_14002ab18 = &data_140029230;
        data_14002ab08 = &data_140029460;
        setmbcp_internal(0xfffffffd, 1, sub_14000be1c(), &data_14002ab18);
        data_14002ab24 = 1;
    }
    
    uint64_t result;
    result = 1;
    return result;
}

int64_t sub_14000c67c(uint32_t arg1, void* arg2)
{
    void var_68;
    int64_t rax_1 = __security_cookie ^ &var_68;
    CPINFO cPInfo;
    cPInfo.MaxCharSize = 0;
    cPInfo.DefaultChar[0] = 0;
    cPInfo.DefaultChar[1] = 0;
    cPInfo.LeadByte[0] = 0;
    cPInfo.LeadByte[1] = 0;
    cPInfo.LeadByte[2] = 0;
    cPInfo.LeadByte[3] = 0;
    cPInfo.LeadByte[4] = 0;
    cPInfo.LeadByte[5] = 0;
    cPInfo.LeadByte[6] = 0;
    cPInfo.LeadByte[7] = 0;
    cPInfo.LeadByte[8] = 0;
    cPInfo.LeadByte[9] = 0;
    cPInfo.LeadByte[0xa] = 0;
    cPInfo.LeadByte[0xb] = 0;
    uint32_t CodePage = getSystemCP(arg1);
    wchar16 const* const rbx = nullptr;
    int64_t result;
    
    if (!CodePage)
    {
        setSBCS(arg2);
        result = 0;
    }
    else
    {
        int32_t i = 0;
        void* rax_2 = &data_140029680;
        int32_t rbp_1 = 1;
        
        do
        {
            if (*rax_2 == CodePage)
            {
                sub_14001c640(arg2 + 0x18, 0, 0x101);
                void* r15_1 = &data_140029670;
                int64_t j_3 = 4;
                uint64_t r11_2 = i * 0x30;
                void* r9_1 = &data_140029690 + r11_2;
                int64_t j;
                
                do
                {
                    void* rdx_2 = r9_1;
                    
                    if (*r9_1)
                    {
                        while (*(rdx_2 + 1))
                        {
                            uint32_t r8_1 = *rdx_2;
                            
                            if (r8_1 <= *(rdx_2 + 1))
                            {
                                uint64_t r10_1 = r8_1 + 1;
                                
                                while (r10_1 < 0x101)
                                {
                                    uint32_t rax_10;
                                    rax_10 = *r15_1;
                                    r8_1 += 1;
                                    *(r10_1 + arg2 + 0x18) |= rax_10;
                                    r10_1 = r10_1 + 1;
                                    
                                    if (r8_1 > *(rdx_2 + 1))
                                        break;
                                }
                            }
                            
                            rdx_2 += 2;
                            
                            if (!*rdx_2)
                                break;
                        }
                    }
                    
                    r9_1 += 8;
                    r15_1 += 1;
                    j = j_3;
                    j_3 -= 1;
                } while (j != 1);
                *(arg2 + 4) = CodePage;
                *(arg2 + 8) = 1;
                
                if (CodePage == 0x3a4)
                    rbx = u"ja-JP";
                else if (CodePage == 0x3a8)
                    rbx = u"zh-CN";
                else if (CodePage == 0x3b5)
                    rbx = u"ko-KR";
                else if (CodePage == 0x3b6)
                    rbx = u"zh-TW";
                
                *(arg2 + 0x220) = rbx;
                void* rdx_3 = arg2 + 0xc;
                int64_t j_2 = 6;
                int64_t j_1;
                
                do
                {
                    *rdx_3 = *(r11_2 - arg2 + &data_140029680 + rdx_3 - 8);
                    rdx_3 += 2;
                    j_1 = j_2;
                    j_2 -= 1;
                } while (j_1 != 1);
                goto label_14000c90d;
            }
            
            i += 1;
            rax_2 += 0x30;
        } while (i < 5);
        
        if (CodePage == 0xfde8)
            result = 0xffffffff;
        else if (!IsValidCodePage(CodePage))
            result = 0xffffffff;
        else if (CodePage != 0xfde9)
        {
            if (GetCPInfo(CodePage, &cPInfo))
            {
                sub_14001c640(arg2 + 0x18, 0, 0x101);
                bool cond:0_1 = cPInfo.MaxCharSize != 2;
                *(arg2 + 4) = CodePage;
                *(arg2 + 0x220) = 0;
                
                if (cond:0_1)
                    rbp_1 = 0;
                else
                {
                    BYTE (* rcx_3)[0xc] = &cPInfo.LeadByte;
                    
                    if (cPInfo.LeadByte[0])
                    {
                        while ((*rcx_3)[1])
                        {
                            uint32_t rax_5 = (*rcx_3)[1];
                            uint32_t rdx_1 = *rcx_3;
                            
                            if (rdx_1 <= rax_5)
                            {
                                uint64_t rdi_2 = rdx_1 + 1;
                                uint64_t i_4 = rax_5 - rdx_1 + 1;
                                uint64_t i_1;
                                
                                do
                                {
                                    *(rdi_2 + arg2 + 0x18) |= 4;
                                    rdi_2 = rdi_2 + 1;
                                    i_1 = i_4;
                                    i_4 -= 1;
                                } while (i_1 != 1);
                            }
                            
                            rcx_3 = &(*rcx_3)[2];
                            
                            if (!*rcx_3)
                                break;
                        }
                    }
                    
                    void* rax_7 = arg2 + 0x1a;
                    int64_t i_3 = 0xfe;
                    int64_t i_2;
                    
                    do
                    {
                        *rax_7 |= 8;
                        rax_7 += 1;
                        i_2 = i_3;
                        i_3 -= 1;
                    } while (i_2 != 1);
                    int32_t rcx_4 = *(arg2 + 4);
                    wchar16 const* const rax_8;
                    
                    if (rcx_4 == 0x3a4)
                        rax_8 = u"ja-JP";
                    else if (rcx_4 == 0x3a8)
                        rax_8 = u"zh-CN";
                    else if (rcx_4 == 0x3b5)
                        rax_8 = u"ko-KR";
                    else if (rcx_4 == 0x3b6)
                        rax_8 = u"zh-TW";
                    else
                        rax_8 = nullptr;
                    
                    *(arg2 + 0x220) = rax_8;
                }
                
                *(arg2 + 8) = rbp_1;
                goto label_14000c72c;
            }
            
            if (data_14002ab20)
            {
                setSBCS(arg2);
                result = 0;
            }
            else
                result = 0xffffffff;
        }
        else
        {
            *(arg2 + 4) = 0xfde9;
            *(arg2 + 0x220) = 0;
            *(arg2 + 0x18) = 0;
            *(arg2 + 0x1c) = 0;
        label_14000c72c:
            __builtin_memset(arg2 + 0xc, 0, 0xc);
        label_14000c90d:
            sub_14000cd84(arg2);
            result = 0;
        }
    }
    
    __security_check_cookie(rax_1 ^ &var_68);
    return result;
}

uint64_t getSystemCP(uint32_t arg1)
{
    uint32_t rbx = arg1;
    void* var_28;
    _LocaleUpdate::_LocaleUpdate(&var_28, nullptr);
    data_14002ab20 = 0;
    
    if (rbx == 0xfffffffe)
    {
        data_14002ab20 = 1;
        rbx = GetOEMCP();
    }
    else if (rbx == 0xfffffffd)
    {
        data_14002ab20 = 1;
        rbx = GetACP();
    }
    else if (rbx == 0xfffffffc)
    {
        data_14002ab20 = 1;
        void* var_20;
        rbx = *(var_20 + 0xc);
    }
    
    char var_10;
    
    if (var_10)
    {
        void* rcx_1 = var_28;
        *(rcx_1 + 0x3a8) &= 0xfffffffd;
    }
    
    return rbx;
}

int64_t setSBCS(void* arg1)
{
    sub_14001c640(arg1 + 0x18, 0, 0x101);
    int64_t i_1 = 0;
    *(arg1 + 4) = 0;
    *(arg1 + 0x220) = 0;
    __builtin_memset(arg1 + 0xc, 0, 0xc);
    
    for (int64_t i = 0; i < 0x101; )
    {
        void* rcx_1 = i + &data_140029230;
        i += 1;
        *(arg1 - &data_140029248 + rcx_1 + 0x30) = *(rcx_1 + 0x18);
    }
    
    char result;
    
    do
    {
        void* rcx_2 = i_1 + &data_140029230;
        i_1 += 1;
        result = *(rcx_2 + 0x119);
        *(arg1 - &data_140029349 + rcx_2 + 0x232) = result;
    } while (i_1 < 0x100);
    
    return result;
}

int32_t* update_thread_multibyte_data_internal(void* arg1, int64_t* arg2)
{
    int32_t* result;
    
    if (!(*(arg1 + 0x3a8) & data_1400299a0) || !*(arg1 + 0x90))
    {
        __vcrt_unlock(5);
        result = *(arg1 + 0x88);
        
        if (result != *arg2)
        {
            if (result)
            {
                int32_t rax_1 = *result;
                *result -= 1;
                
                if (rax_1 == 1 && result != &data_140029230)
                    _free_base(result);
            }
            
            int32_t* result_1 = *arg2;
            *(arg1 + 0x88) = result_1;
            *result_1 += 1;
            result = result_1;
        }
        
        __vcrt_lock(5);
    }
    else
        result = *(arg1 + 0x88);
    
    if (result)
        return result;
    
    abort();
    /* no return */
}

uint64_t setmbcp_internal(uint32_t arg1, char arg2, void* arg3, int64_t* arg4)
{
    int64_t* arg_20 = arg4;
    void* arg_18 = arg3;
    int64_t r14;
    r14 = arg2;
    update_thread_multibyte_data_internal(arg3, arg4);
    uint32_t rax = getSystemCP(arg1);
    
    if (rax == *(*(arg_18 + 0x88) + 4))
        return 0;
    
    int128_t* rax_2 = _malloc_base(0x228);
    
    if (!rax_2)
    {
        _free_base(0);
        return 0xffffffff;
    }
    
    void var_248;
    void* rcx_3 = &var_248;
    int64_t i_2 = 4;
    int64_t i_3 = 4;
    int128_t* rax_4 = *(arg_18 + 0x88);
    int128_t zmm0_1;
    int128_t zmm1;
    int64_t i;
    
    do
    {
        zmm1 = rax_4[1];
        *rcx_3 = *rax_4;
        zmm0_1 = rax_4[2];
        *(rcx_3 + 0x10) = zmm1;
        zmm1 = rax_4[3];
        *(rcx_3 + 0x20) = zmm0_1;
        zmm0_1 = rax_4[4];
        *(rcx_3 + 0x30) = zmm1;
        zmm1 = rax_4[5];
        *(rcx_3 + 0x40) = zmm0_1;
        zmm0_1 = rax_4[6];
        *(rcx_3 + 0x50) = zmm1;
        zmm1 = rax_4[7];
        rax_4 = &rax_4[8];
        *(rcx_3 + 0x60) = zmm0_1;
        rcx_3 += 0x80;
        *(rcx_3 - 0x10) = zmm1;
        i = i_3;
        i_3 -= 1;
    } while (i != 1);
    zmm1 = rax_4[1];
    int64_t rax_5 = rax_4[2];
    *rcx_3 = *rax_4;
    *(rcx_3 + 0x10) = zmm1;
    *(rcx_3 + 0x20) = rax_5;
    int128_t* rcx_4 = rax_2;
    void* rax_6 = &var_248;
    int64_t i_1;
    
    do
    {
        zmm1 = *(rax_6 + 0x10);
        *rcx_4 = *rax_6;
        zmm0_1 = *(rax_6 + 0x20);
        rcx_4[1] = zmm1;
        zmm1 = *(rax_6 + 0x30);
        rcx_4[2] = zmm0_1;
        zmm0_1 = *(rax_6 + 0x40);
        rcx_4[3] = zmm1;
        zmm1 = *(rax_6 + 0x50);
        rcx_4[4] = zmm0_1;
        zmm0_1 = *(rax_6 + 0x60);
        rcx_4[5] = zmm1;
        zmm1 = *(rax_6 + 0x70);
        rax_6 += 0x80;
        rcx_4[6] = zmm0_1;
        rcx_4 = &rcx_4[8];
        rcx_4[-1] = zmm1;
        i_1 = i_2;
        i_2 -= 1;
    } while (i_1 != 1);
    zmm1 = *(rax_6 + 0x10);
    int64_t rax_7 = *(rax_6 + 0x20);
    *rcx_4 = *rax_6;
    rcx_4[1] = zmm1;
    rcx_4[2] = rax_7;
    *rax_2 &= i_2;
    int32_t rax_8 = sub_14000c67c(rax, rax_2);
    
    if (rax_8 == 0xffffffff)
    {
        *sub_14000dedc() = 0x16;
        _free_base(rax_2);
        return 0xffffffff;
    }
    
    if (!r14)
        Concurrency::details::WinRT::Initialize();
    
    int32_t* rcx_7 = *(arg_18 + 0x88);
    int32_t rax_11 = *rcx_7;
    *rcx_7 -= 1;
    
    if (rax_11 == 1)
    {
        int64_t rcx_8 = *(arg_18 + 0x88);
        
        if (rcx_8 != &data_140029230)
            _free_base(rcx_8);
    }
    
    *rax_2 = 1;
    *(arg_18 + 0x88) = rax_2;
    
    if (!(data_1400299a0 & *(arg_18 + 0x3a8)))
    {
        void** var_258 = &arg_18;
        int64_t** var_250_1 = &arg_20;
        int32_t var_264 = 5;
        int32_t var_260 = 5;
        void var_268;
        __crt_seh_guarded_call<class <lambda_efdfa57d1f175319df784efa44bb7b81>,class <lambda_5f0a4c1567f8adc6734073e5d1e1b35c>& __ptr64,class <lambda_2e8a7d3640ea6ccb4c2413664c2db6fd>,void>::operator()<class <lambda_efdfa57d1f175319df784efa44bb7b81>,class <lambda_5f0a4c1567f8adc6734073e5d1e1b35c>& __ptr64,class <lambda_2e8a7d3640ea6ccb4c2413664c2db6fd> >(
            &var_268, &var_260, &var_258, &var_264);
        
        if (r14)
            data_1400298d0 = *arg_20;
    }
    
    _free_base(0);
    return rax_8;
}

void* sub_14000cd84(void* arg1)
{
    void var_788;
    int64_t rax_1 = __security_cookie ^ &var_788;
    uint32_t CodePage = *(arg1 + 4);
    CPINFO cPInfo;
    cPInfo.LeadByte[0xa] = 0;
    cPInfo.LeadByte[0xb] = 0;
    cPInfo.MaxCharSize = 0;
    cPInfo.DefaultChar[0] = 0;
    cPInfo.DefaultChar[1] = 0;
    cPInfo.LeadByte[0] = 0;
    cPInfo.LeadByte[1] = 0;
    cPInfo.LeadByte[2] = 0;
    cPInfo.LeadByte[3] = 0;
    cPInfo.LeadByte[4] = 0;
    cPInfo.LeadByte[5] = 0;
    cPInfo.LeadByte[6] = 0;
    cPInfo.LeadByte[7] = 0;
    cPInfo.LeadByte[8] = 0;
    cPInfo.LeadByte[9] = 0;
    BOOL rax_2;
    
    if (CodePage != 0xfde9)
        rax_2 = GetCPInfo(CodePage, &cPInfo);
    
    void* result;
    
    if (CodePage == 0xfde9 || !rax_2)
    {
        int32_t i = 0;
        void* rcx_3 = arg1 + 0x19;
        
        do
        {
            if (i - 0x41 <= 0x19)
            {
                *rcx_3 |= 0x10;
                result = i + 0x20;
            }
            else if (i - 0x61 > 0x19)
                result = 0;
            else
            {
                *rcx_3 |= 0x20;
                result = i - 0x20;
            }
            
            *(rcx_3 + 0x100) = result;
            i += 1;
            rcx_3 += 1;
        } while (i < 0x100);
    }
    else
    {
        int32_t i_1 = 0;
        char var_718[0x90];
        char (* rcx)[0x90] = &var_718;
        int64_t i_4 = 0x100;
        
        do
        {
            *rcx = i_1;
            i_1 += 1;
            rcx = &(*rcx)[1];
        } while (i_1 < 0x100);
        
        i_1 = cPInfo.LeadByte[0];
        BYTE (* rdx_2)[0xc] = &cPInfo.LeadByte;
        var_718[0] = 0x20;
        
        while (i_1)
        {
            uint32_t i_2 = (*rdx_2)[1];
            uint64_t rcx_1 = i_1;
            
            while (rcx_1 <= i_2)
            {
                if (rcx_1 >= 0x100)
                    break;
                
                var_718[rcx_1] = 0x20;
                rcx_1 = rcx_1 + 1;
            }
            
            rdx_2 = &(*rdx_2)[2];
            i_1 = *rdx_2;
        }
        
        uint16_t var_418[0x200];
        __acrt_GetStringTypeA(nullptr, 1, &var_718, 0x100, &var_418, *(arg1 + 4), 0);
        uint32_t var_760_1;
        void var_618;
        var_760_1 = &var_618;
        uint16_t* var_768_1;
        var_768_1 = 0x100;
        __acrt_LCMapStringA(nullptr, *(arg1 + 0x220), 0x100, &var_718, var_768_1, var_760_1, 0x100, 
            *(arg1 + 4), 0);
        void var_518;
        var_760_1 = &var_518;
        var_768_1 = 0x100;
        __acrt_LCMapStringA(nullptr, *(arg1 + 0x220), 0x200, &var_718, var_768_1, var_760_1, 0x100, 
            *(arg1 + 4), 0);
        uint16_t (* rdx_5)[0x200] = &var_418;
        result = arg1 + 0x19;
        int64_t i_3;
        
        do
        {
            char rcx_2;
            
            if (*rdx_5 & 1)
            {
                *result |= 0x10;
                rcx_2 = *(&var_618 - arg1 + result - 0x19);
            }
            else if (!(*rdx_5 & 2))
                rcx_2 = 0;
            else
            {
                *result |= 0x20;
                rcx_2 = *(result + &var_518 - arg1 - 0x19);
            }
            
            *(result + 0x100) = rcx_2;
            rdx_5 = &(*rdx_5)[1];
            result += 1;
            i_3 = i_4;
            i_4 -= 1;
        } while (i_3 != 1);
    }
    
    __security_check_cookie(rax_1 ^ &var_788);
    return result;
}

int64_t __crt_seh_guarded_call<class <lambda_efdfa57d1f175319df784efa44bb7b81>,class <lambda_5f0a4c1567f8adc6734073e5d1e1b35c>& __ptr64,class <lambda_2e8a7d3640ea6ccb4c2413664c2db6fd>,void>::operator()<class <lambda_efdfa57d1f175319df784efa44bb7b81>,class <lambda_5f0a4c1567f8adc6734073e5d1e1b35c>& __ptr64,class <lambda_2e8a7d3640ea6ccb4c2413664c2db6fd> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    int128_t* rax_2 = *(**arg3 + 0x88) + 0x18;
    int128_t* arg_10 = rax_2;
    char* rcx_2 = data_14002ab08;
    char* var_28 = rcx_2;
    
    if (!rcx_2)
        goto label_14000d034;
    
    int64_t i_2;
    
    if (!rax_2)
    {
        sub_14001c640(rcx_2, 0, 0x101);
    label_14000d034:
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        i_2 = 2;
    }
    else
    {
        i_2 = 2;
        int64_t i_3 = 2;
        int64_t i;
        
        do
        {
            *rcx_2 = *rax_2;
            *(rcx_2 + 0x10) = rax_2[1];
            *(rcx_2 + 0x20) = rax_2[2];
            *(rcx_2 + 0x30) = rax_2[3];
            *(rcx_2 + 0x40) = rax_2[4];
            *(rcx_2 + 0x50) = rax_2[5];
            *(rcx_2 + 0x60) = rax_2[6];
            rcx_2 = &rcx_2[0x80];
            *(rcx_2 - 0x10) = rax_2[7];
            rax_2 = &rax_2[8];
            i = i_3;
            i_3 -= 1;
        } while (i != 1);
        rax_2 = *rax_2;
        *rcx_2 = rax_2;
    }
    
    int128_t* rax_6 = *(**arg3 + 0x88) + 0x119;
    int128_t* var_20 = rax_6;
    int128_t* rcx_4 = data_14002ab10;
    int128_t* var_18 = rcx_4;
    
    if (!rcx_4)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    else if (!rax_6)
    {
        sub_14001c640(rcx_4, 0, 0x100);
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    else
    {
        int64_t i_1;
        
        do
        {
            *rcx_4 = *rax_6;
            rcx_4[1] = rax_6[1];
            rcx_4[2] = rax_6[2];
            rcx_4[3] = rax_6[3];
            rcx_4[4] = rax_6[4];
            rcx_4[5] = rax_6[5];
            rcx_4[6] = rax_6[6];
            rcx_4 = &rcx_4[8];
            rcx_4[-1] = rax_6[7];
            rax_6 = &rax_6[8];
            i_1 = i_2;
            i_2 -= 1;
        } while (i_1 != 1);
    }
    
    int32_t* rdx = **arg3[1];
    int32_t rax_9 = *rdx;
    *rdx -= 1;
    
    if (rax_9 == 1)
    {
        int64_t* rcx_6 = *arg3[1];
        
        if (*rcx_6 != &data_140029230)
            _free_base(*rcx_6);
    }
    
    **arg3[1] = *(**arg3 + 0x88);
    int32_t* rax_15 = *(**arg3 + 0x88);
    *rax_15 += 1;
    return __vcrt_lock(*arg4);
}

void _free_base(int64_t arg1)
{
    if (arg1 && !HeapFree(data_14002a6f0, HEAP_NONE, arg1))
        *sub_14000dedc() = sub_14000df4c(GetLastError());
}

int64_t sub_14000d1a0()
{
    return data_14002a6f0;
}

void* sub_14000d1a8(int64_t* arg1, int64_t arg2)
{
    int64_t* rbx_1;
    
    if (arg1 != arg2)
    {
        rbx_1 = arg1;
        
        do
        {
            if (*rbx_1 && !sub_14001c600())
                break;
            
            rbx_1 = &rbx_1[2];
        } while (rbx_1 != arg2);
    }
    
    void* result;
    
    if (arg1 == arg2 || rbx_1 == arg2)
        result = 1;
    else
    {
        if (rbx_1 != arg1)
        {
            void* rbx_2 = &rbx_1[-1];
            
            do
            {
                if (*(rbx_2 - 8) && *rbx_2)
                    sub_14001c600();
                
                rbx_2 -= 0x10;
            } while (rbx_2 + 8 != arg1);
        }
        
        result = 0;
    }
    
    return result;
}

int64_t sub_14000d228(int64_t arg1, void* arg2)
{
    void* rbx = arg2;
    
    if (arg1 != arg2)
    {
        do
        {
            if (*(rbx - 8))
                sub_14001c600();
            
            rbx -= 0x10;
        } while (rbx != arg1);
    }
    
    int64_t result;
    result = 1;
    return result;
}

void* _invalid_parameter_noinfo()
{
    return _invalid_parameter(0, 0, 0, 0, 0);
}

void _invoke_watson() __noreturn
{
    if (IsProcessorFeaturePresent(0x17))
        trap(0xd);
    
    __acrt_call_reportfault(2, 0xc0000417);
    /* tailcall */
    return TerminateProcess(GetCurrentProcess(), 0xc0000417);
}

int32_t __acrt_call_reportfault(int32_t arg1, int32_t arg2)
{
    void var_608;
    int64_t rax_1 = __security_cookie ^ &var_608;
    
    if (arg1 != 0xffffffff)
        sub_1400019b4();
    
    int32_t var_598;
    sub_14001c640(&var_598, 0, 0x98);
    void ContextRecord;
    sub_14001c640(&ContextRecord, 0, 0x4d0);
    uint64_t EstablisherFrame = 0;
    uint64_t ImageBase = 0;
    int64_t HandlerData = 0;
    EXCEPTION_POINTERS ExceptionInfo;
    ExceptionInfo.ExceptionRecord = &var_598;
    ExceptionInfo.ContextRecord = &ContextRecord;
    RtlCaptureContext(&ContextRecord);
    uint64_t ControlPc;
    IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry =
        RtlLookupFunctionEntry(ControlPc, &ImageBase, nullptr);
    
    if (FunctionEntry)
        RtlVirtualUnwind(UNW_FLAG_NHANDLER, ImageBase, ControlPc, FunctionEntry, &ContextRecord, 
            &HandlerData, &EstablisherFrame, nullptr);
    
    void* const __return_addr_2 = __return_addr;
    var_598 = arg2;
    void arg_8;
    void* var_460 = &arg_8;
    void* const __return_addr_1 = __return_addr;
    int32_t r8;
    int32_t var_594 = r8;
    BOOL rax_4 = IsDebuggerPresent();
    SetUnhandledExceptionFilter(nullptr);
    int32_t result = UnhandledExceptionFilter(&ExceptionInfo);
    
    if (!result && !rax_4 && arg1 != 0xffffffff)
        sub_1400019b4();
    
    __security_check_cookie(rax_1 ^ &var_608);
    return result;
}

int64_t sub_14000d43c(int64_t arg1)
{
    data_14002ab28 = arg1;
}

int64_t _invalid_parameter_internal(int64_t arg1, int64_t arg2, int64_t arg3, int32_t arg4, int64_t arg5, int64_t* arg6)
{
    void* rax = __crt_cached_ptd_host::get_raw_ptd_noexit(arg6);
    
    if (!rax || !*(rax + 0x3b8))
    {
        int64_t r10_1 = *__crt_state_management::dual_state_global<void (__cdecl*)(wchar_t const* __ptr64, wchar_t const* __ptr64, wchar_t const* __ptr64, uint32_t, uint64_t)>::value(
            &data_14002ab28, arg6);
        uint64_t __security_cookie_1 = __security_cookie;
        
        if (!RORQ(r10_1 ^ __security_cookie_1, __security_cookie_1 & 0x3f))
        {
            int64_t var_18_1 = arg5;
            _invoke_watson();
            /* no return */
        }
    }
    
    int64_t var_18 = arg5;
    return sub_14001c600();
}

void* __crt_cached_ptd_host::get_raw_ptd_noexit(int64_t* arg1)
{
    void* result = *arg1;
    int64_t rdi = 0;
    
    if (!result)
    {
        enum WIN32_ERROR dwErrCode_1 = GetLastError();
        
        if (arg1[2])
            rdi = arg1[1];
        else
        {
            arg1[1] = 0;
            arg1[2] = 1;
        }
        
        void* result_1 = sub_14000bef0(&dwErrCode_1, rdi);
        enum WIN32_ERROR dwErrCode = dwErrCode_1;
        result = result_1;
        *arg1 = result_1;
        SetLastError(dwErrCode);
    }
    
    return result;
}

int64_t __crt_state_management::dual_state_global<void (__cdecl*)(wchar_t const* __ptr64, wchar_t const* __ptr64, wchar_t const* __ptr64, uint32_t, uint64_t)>::value(int64_t arg1, void* arg2)
{
    int64_t rbx = 0;
    
    if (*(arg2 + 0x10))
        rbx = *(arg2 + 8);
    else
    {
        enum WIN32_ERROR dwErrCode = GetLastError();
        *(arg2 + 8) = 0;
        *(arg2 + 0x10) = 1;
        SetLastError(dwErrCode);
    }
    
    return arg1 + (rbx << 3);
}

void* _invalid_parameter(int64_t arg1, int64_t arg2, int64_t arg3, int32_t arg4, int64_t arg5)
{
    void* result_1 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    
    if (!data_14002a1b8)
    {
        var_20 = 1;
        int128_t var_30_1 = *data_1400298c8;
    }
    
    void* result = _invalid_parameter_internal(arg1, arg2, arg3, arg4, arg5, &result_1);
    
    if (var_20 == 2)
    {
        result = result_1;
        *(result + 0x3a8) &= 0xfffffffd;
    }
    
    if (var_18)
    {
        result = sub_1400028a0(&result_1);
        int32_t var_1c;
        *(result + 0x20) = var_1c;
    }
    
    if (0)
    {
        result = sub_1400028a0(&result_1);
        int32_t var_14;
        *(result + 0x24) = var_14;
    }
    
    return result;
}

int64_t sub_14000d650()
{
    int64_t result = _query_new_handler();
    
    if (!result)
        return result;
    
    int32_t rbx;
    rbx = sub_14001c600();
    return rbx;
}

int64_t sub_14000d690(int64_t arg1)
{
    data_14002ab30 = arg1;
}

int64_t _query_new_handler()
{
    __vcrt_unlock(0);
    uint64_t __security_cookie_1 = __security_cookie;
    int64_t result = RORQ(data_14002ab30 ^ __security_cookie_1, __security_cookie_1 & 0x3f);
    __vcrt_lock(0);
    return result;
}

int64_t _set_new_handler(int64_t arg1)
{
    __vcrt_unlock(0);
    uint64_t __security_cookie_1 = __security_cookie;
    char rax_1 = __security_cookie_1 & 0x3f;
    int64_t result = RORQ(__security_cookie_1 ^ data_14002ab30, rax_1);
    data_14002ab30 = RORQ(arg1, 0x40 - rax_1) ^ __security_cookie_1;
    __vcrt_lock(0);
    return result;
}

int64_t _set_new_handler()
{
    /* tailcall */
    return _set_new_handler(__security_cookie);
}

int64_t _initp_misc_winsig(int64_t arg1)
{
    data_14002ab38 = arg1;
    data_14002ab40 = arg1;
    data_14002ab48 = arg1;
    data_14002ab50 = arg1;
}

int64_t __acrt_get_sigabrt_handler()
{
    int32_t arg_10 = 3;
    int32_t arg_18 = 3;
    void arg_8;
    return __crt_seh_guarded_call<class <lambda_450d765d439847d4c735a33c368b5fc0>,class <lambda_44731a7d0e6d81c3e6aa82d741081786>& __ptr64,class <lambda_601a2a7da3b7a96e9554ac7215c4b07c>,void (__cdecl*)(int32_t)>::operator()<class <lambda_450d765d439847d4c735a33c368b5fc0>,class <lambda_44731a7d0e6d81c3e6aa82d741081786>& __ptr64,class <lambda_601a2a7da3b7a96e9554ac7215c4b07c> >(
        &arg_8, &arg_18, &arg_8, &arg_10);
}

int64_t sub_14000d79c(int32_t arg1)
{
    int64_t* r15 = nullptr;
    int32_t arg_10 = 0;
    int64_t r14;
    r14 = 1;
    char arg_8 = 1;
    int64_t* rdi_1;
    
    if (arg1 != 2)
    {
        if (arg1 == 4)
        {
        label_14000d823:
            int64_t* rax_1 = sub_14000be60();
            r15 = rax_1;
            
            if (!rax_1)
                return 0xffffffff;
            
            void* rax_3 = *rax_1;
            void* rcx_4 = 0xc0 + rax_3;
            
            while (true)
            {
                if (rax_3 == rcx_4)
                {
                    rax_3 = nullptr;
                    break;
                }
                
                if (*(rax_3 + 4) == arg1)
                    break;
                
                rax_3 += 0x10;
            }
            
            if (!rax_3)
                goto label_14000d87a;
            
            rdi_1 = rax_3 + 8;
            r14 = 0;
            arg_8 = 0;
            goto label_14000d8b7;
        }
        
        if (arg1 == 6)
            goto label_14000d7f3;
        
        if (arg1 == 8 || arg1 == 0xb)
            goto label_14000d823;
        
        if (arg1 != 0xf && arg1 != 0x15 && arg1 != 0x16)
        {
        label_14000d87a:
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
            return 0xffffffff;
        }
    }
    
label_14000d7f3:
    
    if (arg1 != 2)
    {
        if (arg1 == 6)
            rdi_1 = &data_14002ab48;
        else if (arg1 == 0xf)
            rdi_1 = &data_14002ab50;
        else if (arg1 == 0x15)
            rdi_1 = &data_14002ab40;
        else if (arg1 == 0x16)
            rdi_1 = &data_14002ab48;
        else
            rdi_1 = nullptr;
        
        goto label_14000d8b7;
    }
    
    rdi_1 = &data_14002ab38;
label_14000d8b7:
    int64_t r13_1 = 0;
    
    if (r14)
        __vcrt_unlock(3);
    
    int64_t rsi_1 = *rdi_1;
    
    if (r14)
    {
        uint64_t __security_cookie_1 = __security_cookie;
        rsi_1 = RORQ(rsi_1 ^ __security_cookie_1, __security_cookie_1 & 0x3f);
    }
    
    if (rsi_1 != 1)
    {
        if (!rsi_1)
        {
            if (r14)
                __vcrt_lock(rsi_1 + 3);
            
            sub_140009dbc(3);
            breakpoint();
        }
        
        if (arg1 > 0xb || !TEST_BITD(0x910, arg1))
            goto label_14000d936;
        
        r13_1 = r15[1];
        int64_t var_38_1 = r13_1;
        r15[1] = 0;
        
        if (arg1 != 8)
            *rdi_1 = __security_cookie;
        else
        {
            int32_t rax_6 = __vcrt_getptd()[2];
            arg_10 = rax_6;
            int32_t var_48_1 = rax_6;
            __vcrt_getptd()[2] = 0x8c;
        label_14000d936:
            
            if (arg1 != 8)
                *rdi_1 = __security_cookie;
            else
            {
                void* rax_8 = 0x30 + *r15;
                void* rcx_7 = 0x90 + rax_8;
                
                while (true)
                {
                    void* var_40_1 = rax_8;
                    
                    if (rax_8 == rcx_7)
                        break;
                    
                    *(rax_8 + 8) = 0;
                    rax_8 += 0x10;
                }
            }
        }
    }
    
    if (r14)
        __vcrt_lock(3);
    
    if (rsi_1 != 1)
    {
        if (arg1 != 8)
            sub_14001c600();
        else
        {
            __vcrt_getptd()[2];
            sub_14001c600();
        }
        
        if (arg1 <= 0xb && TEST_BITD(0x910, arg1))
        {
            r15[1] = r13_1;
            
            if (arg1 == 8)
                __vcrt_getptd()[2] = arg_10;
        }
    }
    
    return 0;
}

int64_t __crt_seh_guarded_call<class <lambda_450d765d439847d4c735a33c368b5fc0>,class <lambda_44731a7d0e6d81c3e6aa82d741081786>& __ptr64,class <lambda_601a2a7da3b7a96e9554ac7215c4b07c>,void (__cdecl*)(int32_t)>::operator()<class <lambda_450d765d439847d4c735a33c368b5fc0>,class <lambda_44731a7d0e6d81c3e6aa82d741081786>& __ptr64,class <lambda_601a2a7da3b7a96e9554ac7215c4b07c> >(int64_t arg1, int32_t* arg2, int64_t arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    uint64_t __security_cookie_1 = __security_cookie;
    int64_t result = RORQ(data_14002ab48 ^ __security_cookie_1, __security_cookie_1 & 0x3f);
    __vcrt_lock(*arg4);
    return result;
}

int64_t _flushall()
{
    int512_t entry_zmm1;
    /* tailcall */
    return common_flush_all(1, entry_zmm1);
}

uint64_t _fflush_nolock(int32_t* arg1, int512_t arg2 @ zmm1)
{
    void* var_48 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    char var_10 = 0;
    
    if (!data_14002a1b8)
    {
        var_20 = 1;
        int128_t var_30_1 = *data_1400298c8;
    }
    
    int32_t rdi;
    
    if (arg1)
    {
        int32_t rax_1 = __acrt_stdio_flush_nolock(arg1, &var_48);
        int32_t rax_5;
        
        if (!rax_1 && arg1[5] >> 0xb & 1)
            rax_5 = _commit(_fileno(arg1));
        
        if (rax_1 || (arg1[5] >> 0xb & 1 && rax_5))
            rdi = -1;
        else
            rdi = 0;
    }
    else
        rdi = common_flush_all(0, arg2);
    
    if (var_20 == 2)
    {
        void* rax_6 = var_48;
        *(rax_6 + 0x3a8) &= 0xfffffffd;
    }
    
    int32_t var_1c;
    
    if (var_18)
        *(sub_1400028a0(&var_48) + 0x20) = var_1c;
    int32_t var_14;
    
    if (var_10)
        *(sub_1400028a0(&var_48) + 0x24) = var_14;
    return rdi;
}

int64_t __acrt_stdio_flush_nolock(int32_t* arg1, int64_t* arg2)
{
    char rcx = arg1[5];
    
    if ((rcx & 3) == 2 && rcx & 0xc0)
    {
        int32_t rdi_2 = *arg1 - arg1[2];
        arg1[4] = 0;
        int16_t* rsi_1 = *(arg1 + 8);
        *arg1 = rsi_1;
        
        if (rdi_2 > 0)
        {
            if (rdi_2 != _write_internal(_fileno(arg1), rsi_1, rdi_2, arg2))
            {
                arg1[5] |= 0x10;
                return 0xffffffff;
            }
            
            if (arg1[5] >> 2 & 1)
                arg1[5] &= 0xfffffffd;
        }
    }
    
    return 0;
}

uint64_t common_flush_all(char arg1, int512_t arg2 @ zmm1)
{
    char arg_8 = arg1;
    int32_t arg_20 = 0;
    int32_t arg_18 = 0;
    int32_t* var_20 = &arg_20;
    char* var_18 = &arg_8;
    int32_t* var_10 = &arg_18;
    int32_t var_28 = 8;
    int32_t var_24 = 8;
    void arg_10;
    __crt_seh_guarded_call<class <lambda_886d6c58226a84441f68b9f2b8217b83>,class <lambda_ab61a845afdef5b7c387490eaf3616ee>& __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752>,void>::operator()<class <lambda_886d6c58226a84441f68b9f2b8217b83>,class <lambda_ab61a845afdef5b7c387490eaf3616ee>& __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752> >(
        &arg_10, &var_24, &var_20, &var_28, arg2);
    
    if (arg_8)
        return arg_20;
    
    return arg_18;
}

int64_t sub_14000dc08(int64_t arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4, int512_t arg5 @ zmm1)
{
    int64_t* arg_20 = arg4;
    sub_14000247c(*arg2);
    int32_t* rdx = arg3[1];
    void* rcx_1 = **arg3;
    
    if (rcx_1)
    {
        int32_t rcx_2 = *(rcx_1 + 0x14);
        
        if (rcx_2 >> 0xd & 1)
        {
            if (((rcx_2 & 3) != 2 || !(rcx_2 & 0xc0)) && !TEST_BITD(rcx_2, 0xb))
                *rdx += 1;
            else if (*arg3[2] || *(**arg3 + 0x14) >> 1 & 1)
            {
                if (_fflush_nolock(**arg3, arg5) == 0xffffffff)
                    *arg3[3] = 0xffffffff;
                else
                {
                    int32_t* rax_9 = arg3[1];
                    *rax_9 += 1;
                }
            }
        }
    }
    
    return sub_140002488(*arg4);
}

int64_t __crt_seh_guarded_call<class <lambda_886d6c58226a84441f68b9f2b8217b83>,class <lambda_ab61a845afdef5b7c387490eaf3616ee>& __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752>,void>::operator()<class <lambda_886d6c58226a84441f68b9f2b8217b83>,class <lambda_ab61a845afdef5b7c387490eaf3616ee>& __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4, int512_t arg5 @ zmm1)
{
    int32_t* arg_20 = arg4;
    __vcrt_unlock(*arg2);
    int64_t* rbx = data_14002a158;
    void* r14 = &rbx[data_14002a150];
    
    while (true)
    {
        int64_t* var_40_1 = rbx;
        
        if (rbx == r14)
            break;
        
        void* rcx_1 = *rbx;
        void* var_58 = rcx_1;
        int32_t* rdx = *arg3;
        
        if (rcx_1)
        {
            int32_t rcx_2 = *(rcx_1 + 0x14);
            
            if (rcx_2 >> 0xd & 1)
            {
                if ((rcx_2 & 3) != 2)
                {
                    if (TEST_BITD(rcx_2, 0xb))
                        goto label_14000dd1c;
                    
                    *rdx += 1;
                }
                else if (rcx_2 & 0xc0 || TEST_BITD(rcx_2, 0xb))
                {
                label_14000dd1c:
                    int64_t rdx_1 = arg3[2];
                    int64_t rcx_3 = arg3[1];
                    int64_t rax_4 = *arg3;
                    void** var_38 = &var_58;
                    int64_t var_30_1 = rax_4;
                    int64_t var_28_1 = rcx_3;
                    int64_t var_20_1 = rdx_1;
                    void* rax_5 = var_58;
                    void* var_50 = rax_5;
                    void* var_48 = rax_5;
                    void arg_10;
                    arg5 = sub_14000dc08(&arg_10, &var_48, &var_38, &var_50, arg5);
                }
                else
                    *rdx += 1;
            }
        }
        
        rbx = &rbx[1];
    }
    
    return __vcrt_lock(*arg4);
}

void* __acrt_stdio_begin_temporary_buffering_nolock(void** arg1)
{
    void* result;
    
    if (!__acrt_should_use_temporary_buffer(arg1))
        result = 0;
    else
    {
        int64_t* rdi_1;
        
        if (arg1 != sub_140002468(1))
        {
            if (arg1 == sub_140002468(2))
            {
                rdi_1 = &data_14002ab68;
                goto label_14000ddd0;
            }
            
            result = 0;
        }
        else
        {
            rdi_1 = &data_14002ab60;
        label_14000ddd0:
            data_14002a160 += 1;
            
            if (*(arg1 + 0x14) & 0x4c0)
                result = 0;
            else
            {
                *(arg1 + 0x14) |= 0x282;
                
                if (!*rdi_1)
                {
                    *rdi_1 = _malloc_base(0x1000);
                    _free_base(0);
                }
                
                int64_t rcx = *rdi_1;
                
                if (rcx)
                {
                    arg1[1] = rcx;
                    *arg1 = *rdi_1;
                    arg1[2] = 0x1000;
                    arg1[4] = 0x1000;
                }
                else
                {
                    arg1[2] = 2;
                    arg1[1] = arg1 + 0x1c;
                    *arg1 = arg1 + 0x1c;
                    arg1[4] = 2;
                }
                
                result = 1;
            }
        }
    }
    
    return result;
}

void* __acrt_should_use_temporary_buffer(void* arg1)
{
    void* result;
    
    if (arg1 == sub_140002468(2))
        result = 1;
    else if (arg1 != sub_140002468(1))
        result = 0;
    else
        result = _isatty(_fileno(arg1));
    
    return result;
}

void __acrt_stdio_end_temporary_buffering_nolock(char arg1, int64_t* arg2, int64_t* arg3)
{
    if (!arg1 || !(*(arg2 + 0x14) >> 9 & 1))
        return;
    
    __acrt_stdio_flush_nolock(arg2, arg3);
    *(arg2 + 0x14) &= 0xfffffd7f;
    arg2[4] = 0;
    arg2[1] = 0;
    *arg2 = 0;
}

void* sub_14000dedc()
{
    void** rax = sub_14000be60();
    
    if (!rax)
        return &data_1400298dc;
    
    return &rax[4];
}

void* sub_14000df00()
{
    void** rax = sub_14000be60();
    
    if (!rax)
        return &data_1400298e0;
    
    return rax + 0x24;
}

void* sub_14000df24(int32_t arg1)
{
    *sub_14000df00() = arg1;
    int32_t rax_1 = sub_14000df4c(arg1);
    void* result = sub_14000dedc();
    *result = rax_1;
    return result;
}

uint64_t sub_14000df4c(int32_t arg1)
{
    if (arg1 >= 1)
    {
        if (arg1 <= 0xd)
            return *(((arg1 - 1) << 3) + 0x14001fb44);
        
        if (arg1 <= 0x718)
        {
            uint64_t rcx = 0x2d;
            int64_t r10_1 = 0;
            int64_t rdi_1 = 0x2c;
            
            while (true)
            {
                uint64_t r8_2 = rcx >> 1;
                int32_t* rax_3;
                
                if (!r8_2)
                {
                    if (!rcx)
                        break;
                    
                    rax_3 = &data_14001fb40 + (r10_1 << 3);
                    
                    if (arg1 != *rax_3)
                        rax_3 = nullptr;
                }
                else
                {
                    bool cond:1_1 = rcx & 1;
                    rcx = r8_2 - 1;
                    
                    if (cond:1_1)
                        rcx = r8_2;
                    
                    int64_t r11_1 = rcx + r10_1;
                    rax_3 = &data_14001fb40 + (r11_1 << 3);
                    int32_t temp0_1 = *rax_3;
                    
                    if (arg1 != temp0_1)
                    {
                        if (arg1 >= temp0_1)
                        {
                            r10_1 = r11_1 + 1;
                            rcx = r8_2;
                        }
                        
                        int64_t rax_4 = r11_1 - 1;
                        
                        if (arg1 >= temp0_1)
                            rax_4 = rdi_1;
                        
                        rdi_1 = rax_4;
                        
                        if (r10_1 > rax_4)
                            break;
                        
                        continue;
                    }
                }
                
                if (!rax_3)
                    break;
                
                return rax_3[1];
            }
        }
    }
    
    if (arg1 - 0x13 <= 0x11)
        return 0xd;
    
    if (arg1 - 0xbc <= 0xe)
        return 8;
    
    return 0x16;
}

int64_t __acrt_errno_map_os_error_ptd(int32_t arg1, void* arg2)
{
    *(arg2 + 0x38) = 1;
    *(arg2 + 0x34) = arg1;
    int32_t result = sub_14000df4c(arg1);
    *(arg2 + 0x2c) = result;
    *(arg2 + 0x30) = 1;
    return result;
}

int64_t _calloc_base(int64_t arg1, int64_t arg2)
{
    if (!arg1 || -0x20 / arg1 >= arg2)
    {
        uint64_t dwBytes = arg1 * arg2;
        
        if (!dwBytes)
            dwBytes = 1;
        
        int32_t i;
        
        do
        {
            int64_t result = HeapAlloc(data_14002a6f0, HEAP_ZERO_MEMORY, dwBytes);
            
            if (result)
                return result;
            
            if (!sub_14000af50())
                break;
            
            i = sub_14000d650();
        } while (i);
    }
    
    *sub_14000dedc() = 0xc;
    return 0;
}

uint64_t sub_14000e0b8()
{
    int32_t var_18 = 0;
    __vcrt_unlock(8);
    int32_t rbx = 3;
    
    while (true)
    {
        int32_t var_14_1 = rbx;
        
        if (rbx == data_14002a150)
            break;
        
        int64_t rdi_1 = rbx;
        void* rax_2 = *(data_14002a158 + (rdi_1 << 3));
        
        if (rax_2)
        {
            if (*(rax_2 + 0x14) >> 0xd & 1
                    && fclose(*(data_14002a158 + (rdi_1 << 3))) != 0xffffffff)
                var_18 += 1;
            
            DeleteCriticalSection(*(data_14002a158 + (rdi_1 << 3)) + 0x30);
            _free_base(*(data_14002a158 + (rdi_1 << 3)));
            *(data_14002a158 + (rdi_1 << 3)) = 0;
        }
        
        rbx += 1;
    }
    
    __vcrt_lock(8);
    return var_18;
}

uint8_t __acrt_stdio_free_buffer_nolock(void* arg1)
{
    uint8_t result = *(arg1 + 0x14) >> 0xd;
    
    if (result & 1)
    {
        result = *(arg1 + 0x14) >> 6;
        
        if (result & 1)
        {
            _free_base(*(arg1 + 8));
            *(arg1 + 0x14) &= 0xfffffebf;
            result = 0;
            __builtin_memset(arg1, 0, 0x14);
        }
    }
    
    return result;
}

int64_t _malloc_base(uint64_t arg1)
{
    uint64_t dwBytes = arg1;
    
    if (arg1 <= -0x20)
    {
        if (!arg1)
            dwBytes = 1;
        
        int32_t i;
        
        do
        {
            int64_t result = HeapAlloc(data_14002a6f0, HEAP_NONE, dwBytes);
            
            if (result)
                return result;
            
            if (!sub_14000af50())
                break;
            
            i = sub_14000d650();
        } while (i);
    }
    
    *sub_14000dedc() = 0xc;
    return 0;
}

int64_t sub_14000e210(int16_t* arg1, uint64_t arg2)
{
    int32_t rax_22 = data_140029098;
    
    if (rax_22 >= 5)
    {
        int16_t* i_2;
        
        if (!(arg1 & 1))
        {
            int64_t r10_1 = 0;
            uint64_t rcx = arg1 & 0x1f;
            int16_t* rdx_2 = arg1;
            
            if (rcx)
                r10_1 = 0x20 - rcx;
            
            uint64_t r10_2 = r10_1 >> 1;
            
            if (arg2 < r10_2)
                r10_2 = arg2;
            
            void* rax_3 = &arg1[r10_2];
            
            if (arg1 != rax_3)
            {
                while (*rdx_2)
                {
                    rdx_2 = &rdx_2[1];
                    
                    if (rdx_2 == rax_3)
                        break;
                }
            }
            
            int64_t rdx_4 = (rdx_2 - arg1) >> 1;
            
            if (rdx_4 != r10_2)
                return rdx_4;
            
            int16_t* i = &arg1[rdx_4];
            uint64_t rcx_2 = arg2 - r10_2;
            
            for (; i != &arg1[rcx_2 - (rcx_2 & 0x1f) + rdx_4]; i = &i[0x10])
            {
                uint16_t zmm1[0x10];
                zmm1[0] = {0};
                zmm1 = __vpcmpeqw_ymmqq_ymmqq_memqq(zmm1, *i);
                bool cond:0_1 = _mm256_movemask_epi8(zmm1);
                _mm256_zeroupper();
                
                if (cond:0_1)
                    break;
            }
            
            void* rax_7 = &arg1[arg2];
            
            if (i != rax_7)
            {
                while (*i)
                {
                    i = &i[1];
                    
                    if (i == rax_7)
                        break;
                }
            }
            
            i_2 = i;
        }
        else
        {
            void* rax = &arg1[arg2];
            i_2 = arg1;
            
            if (arg1 != rax)
            {
                while (*i_2)
                {
                    i_2 = &i_2[1];
                    
                    if (i_2 == rax)
                        return (i_2 - arg1) >> 1;
                }
            }
        }
        
        return (i_2 - arg1) >> 1;
    }
    
    int16_t* rax_9;
    
    if (rax_22 < 1)
    {
        void* rcx_11 = &arg1[arg2];
        rax_9 = arg1;
        
        if (arg1 != rcx_11)
        {
            while (*rax_9)
            {
                rax_9 = &rax_9[1];
                
                if (rax_9 == rcx_11)
                    break;
            }
        }
    }
    else
    {
        if (!(arg1 & 1))
        {
            int64_t r10_3 = 0;
            uint64_t rcx_6 = arg1 & 0xf;
            
            if (rcx_6)
                r10_3 = 0x10 - rcx_6;
            
            int16_t* rax_13 = arg1;
            uint64_t r10_4 = r10_3 >> 1;
            
            if (arg2 < r10_4)
                r10_4 = arg2;
            
            void* rcx_7 = &arg1[r10_4];
            
            if (arg1 != rcx_7)
            {
                while (*rax_13)
                {
                    rax_13 = &rax_13[1];
                    
                    if (rax_13 == rcx_7)
                        break;
                }
            }
            
            int64_t rax_15 = (rax_13 - arg1) >> 1;
            
            if (rax_15 != r10_4)
                return rax_15;
            
            uint64_t rdx_7 = arg2 - r10_4;
            void* i_1;
            
            for (i_1 = &arg1[rax_15]; i_1 != &arg1[rdx_7 - (rdx_7 & 0xf) + rax_15]; i_1 += 0x10)
            {
                if (_mm_movemask_epi8(__pcmpeqw_xmmdq_memdq({0}, *i_1)))
                    break;
            }
            
            void* rax_17 = &arg1[arg2];
            
            if (i_1 != rax_17)
            {
                while (*i_1)
                {
                    i_1 += 2;
                    
                    if (i_1 == rax_17)
                        break;
                }
            }
            
            return (i_1 - arg1) >> 1;
        }
        
        void* rcx_5 = &arg1[arg2];
        rax_9 = arg1;
        
        if (arg1 != rcx_5)
        {
            while (*rax_9)
            {
                rax_9 = &rax_9[1];
                
                if (rax_9 == rcx_5)
                    return (rax_9 - arg1) >> 1;
            }
        }
    }
    
    return (rax_9 - arg1) >> 1;
}

void* sub_14000e420(char* arg1, void* arg2)
{
    int32_t rax_13 = data_140029098;
    
    if (rax_13 >= 5)
    {
        void* r10_1 = nullptr;
        uint64_t r8_2 = arg1 & 0x1f;
        char* r8_3 = arg1;
        
        if (r8_2)
            r10_1 = 0x20 - r8_2;
        
        if (arg2 < r10_1)
            r10_1 = arg2;
        
        void* rax_1 = r10_1 + arg1;
        
        if (arg1 != rax_1)
        {
            while (*r8_3)
            {
                r8_3 = &r8_3[1];
                
                if (r8_3 == rax_1)
                    break;
            }
        }
        
        void* rdx_1 = r8_3 - arg1;
        
        if (rdx_1 != r10_1)
            return rdx_1;
        
        char* rdx_2 = r8_3;
        void* rcx_1 = arg2 - r10_1;
        void* r10_4 = r8_3 - (rcx_1 & 0x1f) + rcx_1;
        
        if (r8_3 != r10_4)
        {
            do
            {
                uint8_t zmm1[0x20];
                zmm1[0] = {0};
                zmm1 = __vpcmpeqb_ymmqq_ymmqq_memqq(zmm1, *rdx_2);
                bool cond:1_1 = _mm256_movemask_epi8(zmm1);
                _mm256_zeroupper();
                
                if (cond:1_1)
                    break;
                
                rdx_2 = &rdx_2[0x20];
            } while (rdx_2 != r10_4);
        }
        
        void* rax_5 = arg1 + arg2;
        
        if (rdx_2 != rax_5)
        {
            while (*rdx_2)
            {
                rdx_2 = &rdx_2[1];
                
                if (rdx_2 == rax_5)
                    break;
            }
        }
        
        return rdx_2 - arg1;
    }
    
    char* rax_11;
    
    if (rax_13 < 1)
    {
        void* rcx_7 = arg1 + arg2;
        rax_11 = arg1;
        
        if (arg1 != rcx_7)
        {
            while (*rax_11)
            {
                rax_11 = &rax_11[1];
                
                if (rax_11 == rcx_7)
                    break;
            }
        }
    }
    else
    {
        void* r10_5 = nullptr;
        uint64_t rcx_2 = arg1 & 0xf;
        char* r8_4 = arg1;
        
        if (rcx_2)
            r10_5 = 0x10 - rcx_2;
        
        if (arg2 < r10_5)
            r10_5 = arg2;
        
        void* rax_8 = r10_5 + arg1;
        
        if (arg1 != rax_8)
        {
            while (*r8_4)
            {
                r8_4 = &r8_4[1];
                
                if (r8_4 == rax_8)
                    break;
            }
        }
        
        void* rax_10 = r8_4 - arg1;
        
        if (rax_10 != r10_5)
            return rax_10;
        
        void* rdx_3 = arg2 - r10_5;
        rax_11 = r8_4;
        void* r10_8 = r8_4 - (rdx_3 & 0xf) + rdx_3;
        
        if (r8_4 != r10_8)
        {
            do
            {
                if (_mm_movemask_epi8(__pcmpeqb_xmmdq_memdq({0}, *rax_11)))
                    break;
                
                rax_11 = &rax_11[0x10];
            } while (rax_11 != r10_8);
        }
        
        void* rcx_6 = arg1 + arg2;
        
        if (rax_11 != rcx_6)
        {
            while (*rax_11)
            {
                rax_11 = &rax_11[1];
                
                if (rax_11 == rcx_6)
                    return rax_11 - arg1;
            }
        }
    }
    
    return rax_11 - arg1;
}

uint64_t __acrt_update_locale_info(void* arg1, int64_t* arg2)
{
    uint64_t result = data_14002ab58;
    
    if (*arg2 != result)
    {
        result = *(arg1 + 0x3a8);
        
        if (!(data_1400299a0 & result))
        {
            result = sub_1400113b8();
            *arg2 = result;
        }
    }
    
    return result;
}

uint64_t sub_14000e5d8(void* arg1, int64_t* arg2)
{
    uint64_t result = data_14002ab18;
    
    if (*arg2 != result)
    {
        result = *(arg1 + 0x3a8);
        
        if (!(data_1400299a0 & result))
        {
            result = __acrt_update_thread_multibyte_data();
            *arg2 = result;
        }
    }
    
    return result;
}

uint64_t __acrt_update_locale_info_explicit(void* arg1, int64_t* arg2, int64_t arg3)
{
    uint64_t result = (&data_14002ab58)[arg3];
    
    if (*arg2 != result)
    {
        result = *(arg1 + 0x3a8);
        
        if (!(data_1400299a0 & result))
        {
            result = sub_1400113b8();
            *arg2 = result;
        }
    }
    
    return result;
}

uint64_t __acrt_update_multibyte_info_explicit(void* arg1, int64_t* arg2, int64_t arg3)
{
    uint64_t result = (&data_14002ab18)[arg3];
    
    if (*arg2 != result)
    {
        result = *(arg1 + 0x3a8);
        
        if (!(data_1400299a0 & result))
        {
            result = __acrt_update_thread_multibyte_data();
            *arg2 = result;
        }
    }
    
    return result;
}

uint64_t sub_14000e67c(int64_t* arg1, char* arg2, void* arg3, char* arg4, int64_t arg5, int32_t arg6, int32_t arg7, int64_t arg8, int32_t arg9, int64_t* arg10)
{
    void* r11 = arg3;
    char* r10 = arg2;
    int64_t* var_30_1;
    int32_t rbx;
    
    if (arg2)
    {
        if (r11 && arg4 && arg5)
        {
            int64_t rsi;
            
            if (arg6 == 0x41 || arg6 - 0x45 <= 2)
                rsi = 1;
            else
                rsi = 0;
            
            if (!(arg8 & 8))
            {
                int64_t rdx = *arg1;
                
                if ((rdx >> 0x34 & 0x7ff) == 0x7ff)
                {
                    int32_t r8_1 = 0xc;
                    int64_t rax_8 = rdx & 0xfffffffffffff;
                    int64_t rcx_2;
                    
                    if (!rax_8)
                        rcx_2 = 0;
                    else if (rdx >= 0 || rax_8 != 0x8000000000000)
                        rcx_2 = ((0x8000000000000 - 0x8000000000000) & 0xfffffffffffffffc) + 8;
                    else
                        rcx_2 = 0xc;
                    
                    uint64_t rdx_1 = rdx >> 0x3f;
                    
                    if (r11 >= rdx_1 + 4)
                    {
                        int64_t r8_2 = -1;
                        
                        if (rdx_1)
                        {
                            *r10 = 0x2d;
                            r10 = &r10[1];
                            *r10 = 0;
                            
                            if (r11 != -1)
                                r11 -= 1;
                        }
                        
                        int32_t rdx_4 = (rsi ^ 1) * 2;
                        
                        do
                            r8_2 += 1;
                         while ((&data_14001fcb0)[rdx_4 + rcx_2][r8_2]);
                        
                        int32_t rax_15;
                        rax_15 = r11 <= r8_2;
                        
                        if (sub_14000b5d0(r10, r11, (&data_14001fcb0)[rdx_4 + rax_15 + rcx_2]))
                        {
                            int64_t var_38_5 = 0;
                            _invoke_watson();
                            /* no return */
                        }
                        
                        r8_1 = 0;
                    }
                    else
                        *r10 = 0;
                    
                    return r8_1;
                }
            }
            
            int64_t rbx_1;
            rbx_1 = arg8 & 0x20;
            int32_t rdx_9 = (arg8 >> 4 & 1) | 2;
            char temp0_1 = rbx_1;
            rbx_1 = -(rbx_1);
            int32_t rbx_3 = (rbx_1 - rbx_1) & arg9;
            
            if (arg6 != 0x41)
            {
                if (arg6 == 0x45)
                    return fp_format_e(arg1, r10, r11, arg4, arg5, arg7, rsi, rdx_9, rbx_3, arg10);
                
                if (arg6 == 0x46)
                {
                label_14000e8a3:
                    int32_t var_20;
                    var_20 = arg10;
                    char var_28;
                    var_28 = rbx_3;
                    return fp_format_f(arg1, r10, r11, arg4, arg5, arg7, var_28, var_20);
                }
                
                if (arg6 == 0x47)
                    return fp_format_g(arg1, r10, r11, arg4, arg5, arg7, rsi, rdx_9, rbx_3, arg10);
                
                if (arg6 != 0x61)
                {
                    if (arg6 == 0x65)
                        return fp_format_e(arg1, r10, r11, arg4, arg5, arg7, rsi, rdx_9, rbx_3, 
                            arg10);
                    
                    if (arg6 == 0x66)
                        goto label_14000e8a3;
                    
                    return fp_format_g(arg1, r10, r11, arg4, arg5, arg7, rsi, rdx_9, rbx_3, arg10);
                }
            }
            
            return sub_14000ed64(arg1, r10, r11, arg4, arg5, arg7, rsi, rdx_9, rbx_3, arg10);
        }
        
        rbx = 0x16;
        var_30_1 = arg10;
        arg10[6] = 1;
        *(arg10 + 0x2c) = 0x16;
    }
    else
    {
        rbx = &arg2[0x16];
        var_30_1 = arg10;
        arg10[6] = 1;
        *(arg10 + 0x2c) = rbx;
    }
    
    _invalid_parameter_internal(0, 0, 0, 0, 0, var_30_1);
    return rbx;
}

int64_t fp_format_e_internal(char* arg1, int64_t arg2, int32_t arg3, char arg4, int32_t arg5, int32_t* arg6, char arg7, int64_t* arg8)
{
    int32_t rax = 0;
    int64_t rbp = arg3;
    int64_t r13;
    r13 = arg4;
    
    if (arg3 > 0)
        rax = rbp;
    
    if (arg2 <= rax + 9)
    {
        arg8[6] = 1;
        *(arg8 + 0x2c) = 0x22;
        _invalid_parameter_internal(0, 0, 0, 0, 0, arg8);
        return 0x22;
    }
    
    if (arg7)
    {
        void* rdx;
        rdx = *arg6 == 0x2d;
        char* rdx_1 = rdx + arg1;
        
        if (arg3 > 0)
        {
            void* r8 = -ffffffffffffffff;
            
            do
                r8 += 1;
             while (*(rdx_1 + r8));
            
            sub_14001cb40(&rdx_1[1], rdx_1, r8 + 1);
        }
    }
    
    char* rbx_1 = arg1;
    
    if (*arg6 == 0x2d)
    {
        *arg1 = 0x2d;
        rbx_1 = &arg1[1];
    }
    
    if (rbp > 0)
    {
        int64_t rax_2;
        rax_2 = rbx_1[1];
        *rbx_1 = rax_2;
        rbx_1 = &rbx_1[1];
        
        if (!arg8[5])
            __crt_cached_ptd_host::update_locale_slow(arg8);
        
        int64_t* rcx_3;
        rcx_3 = ***(arg8[3] + 0xf8);
        *rbx_1 = rcx_3;
    }
    
    void* rbx_3 = &rbx_1[rbp + (arg7 ^ 1)];
    int64_t rdx_2 = arg2 + arg1 - rbx_3;
    
    if (arg2 == -1)
        rdx_2 = arg2;
    
    if (sub_14000b5d0(rbx_3, rdx_2, "e+000"))
    {
        int64_t var_28 = 0;
        _invoke_watson();
        /* no return */
    }
    
    if (r13)
        *rbx_3 = 0x45;
    
    if (**(arg6 + 8) != 0x30)
    {
        int32_t r8_2 = arg6[1];
        int32_t r8_3 = r8_2 - 1;
        
        if (r8_2 - 1 < 0)
        {
            r8_3 = -(r8_3);
            *(rbx_3 + 1) = 0x2d;
        }
        
        if (r8_3 >= 0x64)
        {
            int32_t rdx_5 = r8_3 / 0x64;
            *(rbx_3 + 2) += rdx_5;
            r8_3 += rdx_5 * 0xffffff9c;
        }
        
        if (r8_3 >= 0xa)
        {
            int32_t rdx_8 = r8_3 / 0xa;
            *(rbx_3 + 3) += rdx_8;
            r8_3 += rdx_8 * 0xfffffff6;
        }
        
        *(rbx_3 + 4) += r8_3;
    }
    
    if (arg5 == 2 && *(rbx_3 + 2) == 0x30)
        sub_14001cb40(rbx_3 + 2, rbx_3 + 3, 3);
    
    return 0;
}

int64_t fp_format_e(int64_t* arg1, char* arg2, void* arg3, char* arg4, int64_t arg5, int32_t arg6, char arg7, int32_t arg8, int32_t arg9, int64_t* arg10)
{
    int64_t rcx = *arg1;
    int128_t var_18 = {0};
    int32_t rax_1 = sub_1400148a0(rcx, arg6 + 1, 1, &var_18, arg4, arg5);
    int64_t r9_1;
    r9_1 = var_18 == 0x2d;
    int64_t var_30;
    var_30 = arg9;
    char* var_38;
    var_38 = rax_1;
    void* rcx_1;
    rcx_1 = arg6 > 0;
    void* rdx_3 = arg3 - rcx_1 - r9_1;
    
    if (arg3 == -1)
        rdx_3 = arg3;
    
    int32_t result = __acrt_fp_strflt_to_string(rcx_1 + r9_1 + arg2, rdx_3, arg6 + 1, &var_18, 
        var_38, var_30, arg10);
    
    if (!result)
    {
        var_38 = arg8;
        return fp_format_e_internal(arg2, arg3, arg6, arg7, var_38, &var_18, 0, arg10);
    }
    
    *arg2 = 0;
    return result;
}

void* const* should_round_up(int64_t* arg1, int64_t arg2, int16_t arg3, int32_t arg4)
{
    int32_t r14 = arg3;
    uint16_t rbx_3 = (*arg1 & arg2 & 0xfffffffffffff) >> r14;
    void* const* result;
    
    if (arg4)
    {
        result = __scrt_wide_argv_policy::configure_argv();
        
        if (!result)
        {
            uint64_t r8 = *arg1;
            char rcx_1 = r14;
            result = (r8 & arg2 & 0xfffffffffffff) >> rcx_1;
            
            if (result > 8)
                result = 1;
            else if (result >= 8)
            {
                char rdx = 1;
                
                if (!(0xfffffffffffff & ((1 << rcx_1) - 1) & r8))
                {
                    if (r14 == 0x30)
                        r8 = 0x7ff0000000000000 & r8;
                    else
                        r8 = (r8 >> 4 & arg2 & 0xffffffffffff) >> rcx_1;
                    
                    rdx = 1 & r8;
                }
                
                result = rdx;
            }
            else
                result = 0;
        }
        else if (result != 0x200)
        {
            if (result != 0x100)
                result = 0;
            else if (!rbx_3 || *arg1 >= 0)
                result = 0;
            else
                result = 1;
        }
        else if (!rbx_3 || *arg1 < 0)
            result = 0;
        else
            result = 1;
    }
    else
        result = rbx_3 >= 8;
    
    return result;
}

int64_t sub_14000ed64(int64_t* arg1, char* arg2, void* arg3, char* arg4, int64_t arg5, int32_t arg6, char arg7, int32_t arg8, int32_t arg9, int64_t* arg10)
{
    *arg2 = 0;
    int32_t rdi = 0;
    
    if (arg6 >= 0)
        rdi = arg6;
    
    char* rbx = arg2;
    
    if (arg3 <= rdi + 0xb)
    {
        arg10[6] = 1;
        *(arg10 + 0x2c) = 0x22;
        _invalid_parameter_internal(0, 0, 0, 0, 0, arg10);
        return 0x22;
    }
    
    if ((*arg1 >> 0x34 & 0x7ff) != 0x7ff)
    {
        if (*arg1 < 0)
        {
            *arg2 = 0x2d;
            rbx = &rbx[1];
        }
        
        int64_t rax_4;
        rax_4 = arg7;
        rax_4 ^= 1;
        uint64_t r15_1 = 0x3ff;
        uint32_t r13_1 = rax_4;
        
        if (*arg1 & 0x7ff0000000000000)
            *rbx = 0x31;
        else
        {
            *rbx = 0x30;
            r15_1 = (0x3ff - 0x3ff) & 0x3fe;
        }
        
        void* rsi_1 = &rbx[2];
        int64_t rax_10;
        
        if (rdi)
        {
            if (!arg10[5])
                __crt_cached_ptd_host::update_locale_slow(arg10);
            
            rax_10 = ***(arg10[3] + 0xf8);
        }
        else
            rax_10 = 0;
        
        rbx[1] = rax_10;
        
        if ((*arg1 & 0xfffffffffffff) > 0)
        {
            arg2 = 0x30;
            uint64_t r10_1 = 0xf000000000000;
            int16_t temp2_1;
            
            do
            {
                int16_t rcx_6 = arg2;
                
                if (rdi <= 0)
                {
                    char rax_18;
                    rax_18 = should_round_up(arg1, r10_1, rcx_6, arg9);
                    
                    if (!rax_18)
                        goto label_14000efdc;
                    
                    char* rcx_8 = rsi_1 - 1;
                    
                    while (true)
                    {
                        arg2 = *rcx_8;
                        
                        if (&arg2[-0x46] & 0xdf)
                            break;
                        
                        *rcx_8 = 0x30;
                        rcx_8 -= 1;
                    }
                    
                    if (rcx_8 == &rbx[1])
                        rcx_8[-1] += 1;
                    else
                    {
                        if (arg2 == 0x39)
                            arg2 += ((r13_1 << 5) + 7);
                        
                        arg2 += 1;
                        *rcx_8 = arg2;
                    }
                    
                    goto label_14000efb6;
                }
                
                uint16_t rax_17 = ((*arg1 & r10_1 & 0xfffffffffffff) >> rcx_6) + 0x30;
                
                if (rax_17 > 0x39)
                    rax_17 += (r13_1 << 5) + 7;
                
                *rsi_1 = rax_17;
                rdi -= 1;
                rsi_1 += 1;
                r10_1 u>>= 4;
                temp2_1 = arg2;
                arg2 -= 4;
            } while (temp2_1 - 4 >= 0);
        }
        
    label_14000efb6:
        
        if (rdi > 0)
        {
            arg2 = 0x30;
            sub_14001c640(rsi_1, arg2, rdi);
            rsi_1 += rdi;
        }
        
    label_14000efdc:
        
        if (!rbx[1])
            rsi_1 = &rbx[1];
        
        r13_1 <<= 5;
        r13_1 += 0x50;
        *rsi_1 = r13_1;
        uint64_t rax_22 = *arg1 >> 0x34 & 0x7ff;
        uint64_t rcx_10 = rax_22;
        uint64_t rcx_11 = rcx_10 - r15_1;
        uint64_t rdx_1 = rcx_11;
        
        if (rcx_10 - r15_1 < 0)
            rcx_11 = r15_1 - rax_22;
        
        char rax_23 = 0x2b;
        void* r8_2 = rsi_1 + 2;
        
        if (rdx_1 < 0)
            rax_23 = 0x2d;
        
        *(rsi_1 + 1) = rax_23;
        *(rsi_1 + 2) = 0x30;
        
        if (rcx_11 < 0x3e8)
        {
            if (rcx_11 < 0x64)
                goto label_14000f09c;
            
            goto label_14000f073;
        }
        
        r8_2 = rsi_1 + 3;
        *(rsi_1 + 2) = 0x30 + rcx_11 / 0x3e8;
        rcx_11 = rcx_11 % 0x3e8;
        
        if (r8_2 != rsi_1 + 2 || rcx_11 >= 0x64)
        {
        label_14000f073:
            *r8_2 = 0x30 + rcx_11 / 0x64;
            r8_2 += 1;
            rcx_11 = rcx_11 % 0x64;
            
            if (r8_2 != rsi_1 + 2 || rcx_11 >= 0xa)
            {
            label_14000f0ac:
                *r8_2 = 0x30 + rcx_11 / 0xa;
                r8_2 += 1;
                rcx_11 = rcx_11 % 0xa;
            }
        }
        else
        {
        label_14000f09c:
            
            if (rcx_11 >= 0xa)
                goto label_14000f0ac;
        }
        
        rcx_11 += 0x30;
        *r8_2 = rcx_11;
        *(r8_2 + 1) = 0;
    }
    else
    {
        int32_t result = fp_format_e(arg1, arg2, arg3, arg4, arg5, rdi, 0, arg8, arg9, arg10);
        
        if (result)
        {
            *rbx = 0;
            return result;
        }
        
        void* rax_9 = sub_140014590(rbx, 0x65);
        
        if (rax_9)
        {
            *rax_9 = ((arg7 ^ 1) << 5) + 0x50;
            *(rax_9 + 3) = 0;
        }
    }
    
    return 0;
}

int64_t sub_14000f0f8(char* arg1, int64_t arg2, int32_t arg3, int32_t* arg4, char arg5, int64_t* arg6)
{
    char* rbx = arg1;
    int64_t rcx = arg4[1];
    int32_t rsi = arg3;
    
    if (arg5 && rcx - 1 == arg3)
    {
        void* rax_2;
        rax_2 = *arg4 == 0x2d;
        *(rcx + rax_2 + rbx - 1) = 0x30;
    }
    
    if (*arg4 == 0x2d)
    {
        *rbx = 0x2d;
        rbx = &rbx[1];
    }
    
    int64_t rax_4 = arg4[1];
    void* rdi = -ffffffffffffffff;
    int32_t temp0 = rax_4;
    void* rbx_1;
    
    if (temp0 > 0)
        rbx_1 = &rbx[rax_4];
    else
    {
        if (temp0 || **(arg4 + 8) != 0x30)
            rax_4 = 0;
        else
            rax_4 = 1;
        
        if (!arg5 || !rax_4)
        {
            void* r8 = -ffffffffffffffff;
            
            do
                r8 += 1;
             while (*(rbx + r8));
            
            sub_14001cb40(&rbx[1], rbx, r8 + 1);
        }
        
        *rbx = 0x30;
        rbx_1 = &rbx[1];
    }
    
    if (rsi > 0)
    {
        void* r8_2 = -ffffffffffffffff;
        
        do
            r8_2 += 1;
         while (*(rbx_1 + r8_2));
        
        sub_14001cb40(rbx_1 + 1, rbx_1, r8_2 + 1);
        
        if (!arg6[5])
            __crt_cached_ptd_host::update_locale_slow(arg6);
        
        int64_t* rcx_4;
        rcx_4 = ***(arg6[3] + 0xf8);
        *rbx_1 = rcx_4;
        int32_t rax_7 = arg4[1];
        
        if (rax_7 < 0)
        {
            int32_t rax_8 = -(rax_7);
            
            if (arg5 || rax_8 < rsi)
                rsi = rax_8;
            
            int64_t rbx_2 = rsi;
            
            do
                rdi += 1;
             while (*(rbx_1 + 1 + rdi));
            
            sub_14001cb40(rbx_2 + rbx_1 + 1, rbx_1 + 1, rdi + 1);
            sub_14001c640(rbx_1 + 1, 0x30, rbx_2);
        }
    }
    
    return 0;
}

int64_t fp_format_f(int64_t* arg1, char* arg2, void* arg3, char* arg4, int64_t arg5, int32_t arg6, int32_t arg7, int64_t* arg8)
{
    int64_t rcx = *arg1;
    int128_t var_18 = {0};
    int32_t rax_1 = sub_1400148a0(rcx, arg6, 0, &var_18, arg4, arg5);
    void* r9_1;
    r9_1 = var_18 == 0x2d;
    void* rdx_2 = arg3 - r9_1;
    int64_t var_30;
    var_30 = arg7;
    char* var_38;
    var_38 = rax_1;
    
    if (arg3 == -1)
        rdx_2 = arg3;
    
    int32_t result = __acrt_fp_strflt_to_string(r9_1 + arg2, rdx_2, *var_18[4] + arg6, &var_18, 
        var_38, var_30, arg8);
    
    if (!result)
        return sub_14000f0f8(arg2, arg3, arg6, &var_18, 0, arg8);
    
    *arg2 = 0;
    return result;
}

int64_t fp_format_g(int64_t* arg1, char* arg2, void* arg3, char* arg4, int64_t arg5, int32_t arg6, char arg7, int32_t arg8, int32_t arg9, int64_t* arg10)
{
    int64_t rcx = *arg1;
    int128_t var_18 = {0};
    int32_t rax_1 = sub_1400148a0(rcx, arg6, 0, &var_18, arg4, arg5);
    void* r8;
    r8 = var_18 == 0x2d;
    void* rdx_2 = arg3 - r8;
    int64_t var_30;
    var_30 = arg9;
    int32_t r15_1 = *var_18[4] - 1;
    char* var_38;
    var_38 = rax_1;
    char* rbx = r8 + arg2;
    
    if (arg3 == -1)
        rdx_2 = arg3;
    
    int32_t result = __acrt_fp_strflt_to_string(rbx, rdx_2, arg6, &var_18, var_38, var_30, arg10);
    
    if (result)
    {
        *arg2 = 0;
        return result;
    }
    
    if (*var_18[4] - 1 < 0xfffffffc || *var_18[4] - 1 >= arg6)
    {
        var_38 = arg8;
        return fp_format_e_internal(arg2, arg3, arg6, arg7, var_38, &var_18, 1, arg10);
    }
    
    if (r15_1 < *var_18[4] - 1)
    {
        int32_t rax_4;
        
        do
        {
            rax_4 = *rbx;
            rbx = &rbx[1];
        } while (rax_4);
        
        rbx[-2] = rax_4;
    }
    
    return sub_14000f0f8(arg2, arg3, arg6, &var_18, 1, arg10);
}

uint64_t _wctomb_internal(int32_t* arg1, char* arg2, void* arg3, wchar16 arg4, int64_t* arg5)
{
    wchar16 arg_20 = arg4;
    int32_t rbx = 0;
    
    if (!arg2 && arg3)
    {
        if (arg1)
            *arg1 = 0;
        
        return 0;
    }
    
    if (arg1)
        *arg1 = 0xffffffff;
    
    int32_t rsi_1;
    
    if (arg3 <= 0x7fffffff)
    {
        if (!arg5[5])
        {
            __crt_cached_ptd_host::update_locale_slow(arg5);
            arg4 = arg_20;
        }
        
        void* rax_1 = arg5[3];
        uint32_t rcx_1 = *(rax_1 + 0xc);
        int64_t arg_10;
        
        if (rcx_1 == 0xfde9)
        {
            arg_10 = 0;
            int32_t rax_2 = __crt_mbstring::__c32rtomb_utf8(arg2, arg4, &arg_10, arg5);
            
            if (arg1)
                *arg1 = rax_2;
            
            if (rax_2 <= 4)
                return 0;
            
            if (arg5[6])
                rbx = *(arg5 + 0x2c);
            
            return rbx;
        }
        
        if (*(rax_1 + 0x138))
        {
            arg_10 = 0;
            int64_t* var_20_1 = &arg_10;
            int64_t var_28_1 = 0;
            int32_t* var_30;
            var_30 = arg3;
            int32_t rax_4 = __acrt_WideCharToMultiByte(rcx_1, 0, &arg_20, 1, arg2, var_30);
            
            if (rax_4)
            {
                if (arg_10)
                    goto label_14000f556;
                
                if (arg1)
                    *arg1 = rax_4;
                
                return 0;
            }
            
            if (GetLastError() != ERROR_INSUFFICIENT_BUFFER)
            {
            label_14000f556:
                *(arg5 + 0x2c) = 0x2a;
                arg5[6] = 1;
                return 0x2a;
            }
            
            if (arg2 && arg3)
                sub_14001c640(arg2, 0, arg3);
        }
        else
        {
            if (arg4 > 0xff)
            {
                if (arg2 && arg3)
                    sub_14001c640(arg2, 0, arg3);
                
                goto label_14000f556;
            }
            
            if (!arg2)
                goto label_14000f582;
            
            if (arg3)
            {
                *arg2 = arg4;
            label_14000f582:
                
                if (!arg1)
                    return 0;
                
                *arg1 = 1;
                return 0;
            }
        }
        
        rsi_1 = 0x22;
    }
    else
        rsi_1 = 0x16;
    
    *(arg5 + 0x2c) = rsi_1;
    arg5[6] = 1;
    _invalid_parameter_internal(0, 0, 0, 0, 0, arg5);
    return rsi_1;
}

uint64_t _mbtowc_l(int16_t* arg1, char* arg2, int64_t arg3, int128_t* arg4)
{
    void* var_48 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    int128_t var_30_1;
    
    if (arg4)
    {
        var_20 = 1;
        var_30_1 = *arg4;
    }
    else if (!data_14002a1b8)
    {
        var_20 = 1;
        var_30_1 = *data_1400298c8;
    }
    int32_t rax = _mbtowc_internal(arg1, arg2, arg3, &var_48);
    
    if (var_20 == 2)
    {
        void* rcx = var_48;
        *(rcx + 0x3a8) &= 0xfffffffd;
    }
    
    int32_t var_1c;
    
    if (var_18)
        *(sub_1400028a0(&var_48) + 0x20) = var_1c;
    int32_t var_14;
    
    if (0)
        *(sub_1400028a0(&var_48) + 0x24) = var_14;
    return rax;
}

int64_t _mbtowc_internal(int16_t* arg1, char* arg2, int64_t arg3, int64_t* arg4)
{
    void* rsi = arg2;
    
    if (!arg2 || !arg3)
        data_14002ab70 = 0;
    else
    {
        if (*arg2)
        {
            if (!arg4[5])
                __crt_cached_ptd_host::update_locale_slow(arg4);
            
            int64_t* rdx = arg4[3];
            uint32_t r10_1 = *(rdx + 0xc);
            int32_t result;
            
            if (r10_1 != 0xfde9)
            {
                if (!rdx[0x27])
                {
                    if (arg1)
                        *arg1 = *rsi;
                    
                    return 1;
                }
                
                if (*(*rdx + (*rsi << 1)) >= 0)
                {
                    int32_t rax_7;
                    rax_7 = arg1;
                    int32_t var_10_2 = rax_7;
                    int16_t* var_18_3 = arg1;
                    
                    if (__acrt_MultiByteToWideChar(r10_1, MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, 
                            rsi, 1))
                        return 1;
                }
                else
                {
                    uint64_t r9 = rdx[1];
                    int32_t rax_4;
                    
                    if (r9 > 1 && arg3 >= r9)
                    {
                        int32_t rax_3;
                        rax_3 = arg1;
                        int32_t var_10_1 = rax_3;
                        int16_t* var_18_2 = arg1;
                        rax_4 = __acrt_MultiByteToWideChar(r10_1, 
                            MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, rsi, r9);
                    }
                    
                    if (r9 > 1 && arg3 >= r9 && rax_4)
                        return *(arg4[3] + 8);
                    
                    if (arg3 >= *(arg4[3] + 8) && *(rsi + 1))
                        return *(arg4[3] + 8);
                }
                
                arg4[6] = 1;
                result = -1;
                *(arg4 + 0x2c) = 0x2a;
            }
            else
            {
                result = sub_14000fadc(arg1, rsi, arg3, &data_14002ab70, arg4);
                
                if (result < 0)
                    return -1;
            }
            
            return result;
        }
        
        if (arg1)
            *arg1 = 0;
    }
    
    return 0;
}

bool sub_14000f840(char* arg1)
{
    bool rdx = *arg1;
    
    if (rdx >= 0)
        return rdx;
    
    if ((rdx & 0xe0) == 0xc0)
        return 2;
    
    if ((rdx & 0xf0) == 0xe0)
        return 3;
    
    if ((rdx & 0xf8) == 0xf0)
        return 4;
    
    return 0xffffffff;
}

int64_t sub_14000f878(uint64_t arg1, char* arg2, int64_t arg3, void* arg4, int64_t arg5 @ r14, void* arg6)
{
    int64_t var_30 = arg5;
    void var_78;
    int64_t rax_1 = __security_cookie ^ &var_78;
    void* rbx = &data_14002ab78;
    char const* const rdi = &data_140023e88[0xc];
    
    if (arg4)
        rbx = arg4;
    
    uint64_t i_1 = 1;
    
    if (arg2)
        i_1 = arg3;
    
    if (arg2)
        rdi = arg2;
    
    uint32_t* r14_1 = (arg5 - arg5) & arg1;
    int64_t result;
    
    if (!i_1)
        result = -2;
    else
    {
        uint32_t rdx_3;
        
        if (*(rbx + 6))
        {
            arg3 = *(rbx + 4);
            rdx_3 = *rbx;
            arg4 = *(rbx + 6);
            
            if (arg3 - 2 <= 2 && arg4 >= 1 && arg4 < arg3)
                goto label_14000f965;
            
        labelid_8:
            result = __crt_mbstring::return_illegal_sequence(rbx, arg6);
        }
        else
        {
            arg3 = sub_14000f840(rdi);
            uint32_t rax_5 = *rdi;
            rdi = &rdi[1];
            
            if (arg3 <= 1)
            {
                if (r14_1)
                    *r14_1 = rax_5;
                
                result = arg3;
            }
            else if (arg3 - 2 > 2)
            {
            label_14000fa14:
                result = __crt_mbstring::return_illegal_sequence(rbx, arg6);
            }
            else
            {
                arg1 = 7 - arg3;
                arg4 = arg3;
                rdx_3 = ((1 << arg1) - 1) & rax_5;
            label_14000f965:
                uint64_t r11_1 = arg4;
                uint64_t i = r11_1;
                
                if (r11_1 >= i_1)
                    i = i_1;
                
                while (rdi - arg2 < i)
                {
                    uint32_t rcx_2 = *rdi;
                    rdi = &rdi[1];
                    void* rax_7;
                    rax_7 = rcx_2;
                    rax_7 &= 0xc0;
                    
                    if (rax_7 != 0x80)
                        goto label_14000fa14_2;
                    
                    arg1 = rcx_2 & 0x3f;
                    rdx_3 = arg1 | rdx_3 << 6;
                }
                
                if (i < r11_1)
                {
                    arg4 -= i;
                    *(rbx + 4) = arg3;
                    *(rbx + 6) = arg4;
                    *rbx = rdx_3;
                    result = -2;
                }
                else if (rdx_3 - 0xd800 <= 0x7ff || rdx_3 >= 0x110000)
                {
                label_14000fa14_1:
                    result = __crt_mbstring::return_illegal_sequence(rbx, arg6);
                }
                else
                {
                    int32_t var_58_1 = 0x80;
                    int32_t var_54_1 = 0x800;
                    int32_t var_50_1 = 0x10000;
                    int32_t var_60[0x2];
                    
                    if (rdx_3 < var_60[arg3])
                    {
                    label_14000fa14_2:
                        result = __crt_mbstring::return_illegal_sequence(rbx, arg6);
                    }
                    else
                    {
                        if (r14_1)
                            *r14_1 = rdx_3;
                        
                        result = __crt_mbstring::reset_and_return((arg1 - arg1) & r11_1, rbx);
                    }
                }
            }
        }
    }
    
    __security_check_cookie(rax_1 ^ &var_78);
    return result;
}

int64_t __crt_mbstring::__c16rtomb_utf8(char* arg1, int16_t arg2, void* arg3, void* arg4)
{
    void* rbx = &data_14002ab80;
    
    if (arg3)
        rbx = arg3;
    
    if (*rbx)
    {
        if (0x2400 + arg2 <= 0x3ff)
        {
            int64_t arg_18 = 0;
            return __crt_mbstring::reset_and_return(
                __crt_mbstring::__c32rtomb_utf8(arg1, (arg2 & 0xffff23ff) + *rbx, &arg_18, arg4), 
                rbx);
        }
    }
    else if (0x2400 + arg2 > 0x3ff)
    {
        if (0x2800 + arg2 > 0x3ff)
            /* tailcall */
            return __crt_mbstring::__c32rtomb_utf8(arg1, arg2, rbx, arg4);
        
        *rbx = (arg2 << 0xa & 0xfc9ffc00) + 0x10000;
        return 0;
    }
    
    return __crt_mbstring::return_illegal_sequence(rbx, arg4);
}

int64_t sub_14000fadc(int16_t* arg1, char* arg2, int64_t arg3, void* arg4, void* arg5)
{
    int32_t var_18 = 0;
    int64_t r14;
    int64_t result = sub_14000f878(&var_18, arg2, arg3, arg4, r14, arg5);
    
    if (result <= 4)
    {
        int32_t rcx_1 = var_18;
        
        if (rcx_1 > 0xffff)
            rcx_1 = 0xfffd;
        
        if (arg1)
            *arg1 = rcx_1;
    }
    
    return result;
}

int64_t sub_14000fb24(uint16_t* arg1, int64_t* arg2, int64_t arg3, void* arg4, void* arg5)
{
    char* rdi = *arg2;
    int64_t i_1 = arg3;
    int64_t rax;
    
    if (!arg1)
    {
        int64_t result = 0;
        
        while (true)
        {
            int64_t r8_3;
            
            if (!*rdi)
                r8_3 = 1;
            else if (rdi[1])
            {
                rax = rdi[2];
                char temp0_1 = rax;
                rax = -(rax);
                r8_3 = -((arg3 - arg3)) + 3;
            }
            else
                r8_3 = 2;
            
            rax = sub_14000f878(0, rdi, r8_3, arg4, arg2, arg5);
            
            if (rax == -1)
                break;
            
            if (!rax)
                return result;
            
            int64_t result_1 = result + 1;
            rdi = &rdi[rax];
            
            if (rax != 4)
                result_1 = result;
            
            result = result_1 + 1;
        }
        
        *(arg5 + 0x30) = 1;
        *(arg5 + 0x2c) = 0x2a;
        return -1;
    }
    
    uint16_t* rbx = arg1;
    
    if (arg3)
    {
        int64_t i;
        
        do
        {
            int64_t r8;
            
            if (!*rdi)
                r8 = 1;
            else if (rdi[1])
            {
                rax = rdi[2];
                char temp1_1 = rax;
                rax = -(rax);
                r8 = -((arg3 - arg3)) + 3;
            }
            else
                r8 = 2;
            
            int32_t arg_8 = 0;
            rax = sub_14000f878(&arg_8, rdi, r8, arg4, arg2, arg5);
            
            if (rax == -1)
            {
                *arg2 = rdi;
                *(arg5 + 0x30) = 1;
                *(arg5 + 0x2c) = 0x2a;
                return -1;
            }
            
            if (!rax)
            {
                rdi = nullptr;
                *rbx = 0;
                break;
            }
            
            int32_t rcx_1 = arg_8;
            
            if (rcx_1 > 0xffff)
            {
                if (i_1 <= 1)
                    break;
                
                arg3 = 0xd800;
                arg_8 = rcx_1 - 0x10000;
                i_1 -= 1;
                *rbx = (rcx_1 - 0x10000) >> 0xa | 0xd800;
                rcx_1 = (rcx_1 - 0x10000) & 0x3ff;
                rbx = &rbx[1];
                rcx_1 |= 0xdc00;
            }
            
            *rbx = rcx_1;
            rdi = &rdi[rax];
            rbx = &rbx[1];
            i = i_1;
            i_1 -= 1;
        } while (i != 1);
    }
    
    *arg2 = rdi;
    return (rbx - arg1) >> 1;
}

uint64_t _fileno(void* arg1)
{
    if (arg1)
        return *(arg1 + 0x18);
    
    *sub_14000dedc() = 0x16;
    _invalid_parameter_noinfo();
    return 0xffffffff;
}

int64_t _get_printf_count_output()
{
    int64_t result;
    result = data_14002ab88 == (__security_cookie | 1);
    return result;
}

uint64_t _fputc_nolock_internal(char arg1, int64_t* arg2, int64_t* arg3)
{
    arg2[2] -= 1;
    
    if (arg2[2] - 1 < 0)
        /* tailcall */
        return __acrt_stdio_flush_and_write_narrow_nolock(arg1, arg2, arg3);
    
    **arg2 = arg1;
    *arg2 += 1;
    return arg1;
}

void* const sub_14000fd34(void* arg1, int32_t arg2)
{
    int32_t rdi = *(arg1 + 0xc);
    
    if (rdi)
    {
        uint64_t rbx_1;
        
        do
        {
            rbx_1 = rdi - 1;
            rdi = rbx_1;
            int64_t rcx = *(__vcrt_getptd() + 0x60) + rbx_1 * 0x14;
            void* const result = *(arg1 + 0x10) + rcx;
            
            if (arg2 > *(result + 4) && arg2 <= *(result + 8))
                return result;
        } while (rbx_1);
    }
    
    return nullptr;
}

void* __FrameHandler3::ExecutionInCatch(int64_t* arg1, void* arg2)
{
    void* result;
    result = sub_14000fd34(arg2, sub_140015e2c(arg2, arg1));
    return result;
}

int64_t __FrameHandler3::FrameUnwindToEmptyState(int64_t* arg1, int64_t* arg2, void* arg3)
{
    void arg_20;
    int64_t* rax = sub_14000fe28(arg1, arg2, arg3, &arg_20);
    void* rax_2 = sub_14000fd34(arg3, sub_140015e2c(arg3, arg2));
    int32_t r9_1;
    
    if (rax_2)
        r9_1 = *(rax_2 + 4);
    else
        r9_1 = -1;
    
    return __FrameHandler3::FrameUnwindToState(rax, arg2, arg3, r9_1);
}

int64_t* sub_14000fe28(int64_t* arg1, int64_t* arg2, void* arg3, int64_t* arg4)
{
    int32_t i = *(arg3 + 0xc);
    int32_t rax = sub_140015e2c(arg3, arg2);
    *arg4 = *arg1;
    
    while (i)
    {
        uint64_t rcx_1 = i - 1;
        int64_t rdi_1 = arg2[1];
        i = rcx_1;
        int64_t rbx_1 = *(arg3 + 0x10) + rcx_1 * 0x14;
        
        if (rax > *(rbx_1 + rdi_1 + 4) && rax <= *(rbx_1 + rdi_1 + 8))
        {
            uint64_t ImageBase;
            IMAGE_RUNTIME_FUNCTION_ENTRY* rax_2 =
                RtlLookupFunctionEntry(*arg2, &ImageBase, nullptr);
            uint64_t rcx_4 = 0;
            int64_t r8_1 = *(rbx_1 + rdi_1 + 0x10) + ImageBase;
            int32_t j = *(rbx_1 + rdi_1 + 0xc);
            
            if (j)
            {
                int32_t* rdx_1 = r8_1 + 0xc;
                
                do
                {
                    if (*rdx_1 == rax_2->BeginAddress)
                        goto label_14000feea;
                    
                    rcx_4 = rcx_4 + 1;
                    rdx_1 = &rdx_1[5];
                } while (rcx_4 < j);
            }
            
            if (rcx_4 < j)
            {
            label_14000feea:
                *arg4 = *(*(r8_1 + rcx_4 * 0x14 + 0x10) + *arg1);
                break;
            }
        }
    }
    
    return arg4;
}

int64_t __FrameHandler4::UnwindNestedFrames(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int32_t arg7, int64_t* arg8, char arg9)
{
    void var_e8;
    int64_t rax_1 = __security_cookie ^ &var_e8;
    int128_t zmm0 = data_14001fd30;
    int128_t zmm1 = data_14001fd40;
    EXCEPTION_RECORD ExceptionRecord;
    ExceptionRecord.ExceptionCode = zmm0;
    ExceptionRecord.ExceptionFlags = *zmm0[4];
    ExceptionRecord.ExceptionRecord = *zmm0[8];
    zmm0 = data_14001fd50;
    ExceptionRecord.ExceptionAddress = zmm1;
    ExceptionRecord.NumberParameters = *zmm1[8];
    zmm1 = data_14001fd60;
    ExceptionRecord.ExceptionInformation[0] = zmm0;
    ExceptionRecord.ExceptionInformation[1] = *zmm0[8];
    zmm0 = data_14001fd70;
    ExceptionRecord.ExceptionInformation[2] = zmm1;
    ExceptionRecord.ExceptionInformation[3] = *zmm1[8];
    zmm1 = data_14001fd80;
    ExceptionRecord.ExceptionInformation[4] = zmm0;
    ExceptionRecord.ExceptionInformation[5] = *zmm0[8];
    zmm0 = data_14001fd90;
    ExceptionRecord.ExceptionInformation[6] = zmm1;
    ExceptionRecord.ExceptionInformation[7] = *zmm1[8];
    zmm1 = data_14001fdb0;
    ExceptionRecord.ExceptionInformation[8] = zmm0;
    ExceptionRecord.ExceptionInformation[9] = *zmm0[8];
    zmm0 = data_14001fda0;
    ExceptionRecord.ExceptionInformation[0xa] = zmm0;
    ExceptionRecord.ExceptionInformation[0xb] = *zmm0[8];
    ExceptionRecord.ExceptionInformation[0xc] = zmm1;
    ExceptionRecord.ExceptionInformation[0xd] = *zmm1[8];
    ExceptionRecord.ExceptionInformation[0xe] = 0;
    int64_t TargetFrame = *arg1;
    ExceptionRecord.ExceptionInformation[0] = sub_14001615c;
    ExceptionRecord.ExceptionInformation[2] = arg5;
    ExceptionRecord.ExceptionInformation[3] = arg7;
    ExceptionRecord.ExceptionInformation[5] = arg6;
    ExceptionRecord.ExceptionInformation[7] = arg9;
    UNWIND_HISTORY_TABLE* HistoryTable = arg8[8];
    CONTEXT* ContextRecord = arg8[5];
    ExceptionRecord.ExceptionInformation[1] = arg4;
    ExceptionRecord.ExceptionInformation[4] = arg3;
    ExceptionRecord.ExceptionInformation[6] = arg2;
    int64_t TargetIp = *arg8;
    ExceptionRecord.ExceptionInformation[8] = 0x19930520;
    int64_t result =
        RtlUnwindEx(TargetFrame, TargetIp, &ExceptionRecord, nullptr, ContextRecord, HistoryTable);
    __security_check_cookie(rax_1 ^ &var_e8);
    return result;
}

int128_t* __FrameHandler3::GetRangeOfTrysToCheck(int128_t* arg1, int64_t arg2, int32_t arg3, int64_t* arg4, void* arg5)
{
    int32_t rbp = *(arg5 + 0xc);
    int32_t rax = sub_140015e2c(arg5, arg4);
    int32_t r10 = 0;
    
    if (!rbp)
    {
        abort();
        /* no return */
    }
    
    void* rdi_1 = arg4[1];
    int64_t r11 = *(arg5 + 0x10);
    int32_t r8 = -1;
    int32_t r13 = -1;
    int32_t rdx_1 = rbp;
    void* r9_1;
    
    while (true)
    {
        uint64_t rax_1 = rdx_1 - 1;
        int32_t rbx_1 = rdx_1;
        rdx_1 = rax_1;
        void* rax_2 = rdi_1 + rax_1 * 0x14;
        
        if (rax > *(rax_2 + r11 + 4) && rax <= *(rax_2 + r11 + 8))
        {
            r9_1 = rdi_1 + (rbx_1 - 1) * 0x14 + r11;
            break;
        }
        
        if (!rdx_1)
        {
            r9_1 = nullptr;
            break;
        }
    }
    
    int32_t rdx_2 = 0;
    int32_t* rcx_2 = rdi_1 + r11;
    
    do
    {
        if (!r9_1)
        {
        label_1400100b9:
            
            if (arg3 >= *rcx_2 && arg3 <= rcx_2[1])
            {
                r13 = rdx_2;
                
                if (r8 == 0xffffffff)
                    r8 = rdx_2;
            }
        }
        else if (*rcx_2 > *(r9_1 + 4) && rcx_2[1] <= *(r9_1 + 8))
            goto label_1400100b9;
        
        rdx_2 += 1;
        rcx_2 = &rcx_2[5];
    } while (rdx_2 < rbp);
    
    int32_t rax_5 = 0;
    
    if (r8 != 0xffffffff)
        rax_5 = r8;
    
    int32_t var_40 = rax_5;
    
    if (r8 != 0xffffffff)
        r10 = r13 + 1;
    
    int32_t var_30 = r10;
    *arg1 = arg2;
    arg1[1] = arg2;
    return arg1;
}

int64_t _GetImageBase()
{
    return *(__vcrt_getptd() + 0x60);
}

void* _SetImageBase(int64_t arg1)
{
    void* result = __vcrt_getptd();
    *(result + 0x60) = arg1;
    return result;
}

int64_t _GetThrowImageBase()
{
    return *(__vcrt_getptd() + 0x68);
}

void* _SetThrowImageBase(int64_t arg1)
{
    void* result = __vcrt_getptd();
    *(result + 0x68) = arg1;
    return result;
}

int64_t* _CreateFrameInfo(int64_t* arg1, int64_t arg2)
{
    *arg1 = arg2;
    int64_t rcx;
    
    if (arg1 >= *(__vcrt_getptd() + 0x58))
        rcx = 0;
    else
        rcx = *(__vcrt_getptd() + 0x58);
    
    arg1[1] = rcx;
    *(__vcrt_getptd() + 0x58) = arg1;
    return arg1;
}

void* _FindAndUnlinkFrame(int64_t arg1)
{
    if (arg1 == *(__vcrt_getptd() + 0x58))
    {
        void* i_1 = *(__vcrt_getptd() + 0x58);
        
        if (i_1)
        {
            void* i;
            
            do
            {
                i = *(i_1 + 8);
                
                if (arg1 == i_1)
                {
                    void* result = __vcrt_getptd();
                    *(result + 0x58) = i;
                    return result;
                }
                
                i_1 = i;
            } while (i);
        }
    }
    
    abort();
    /* no return */
}

DWORD __CxxFrameHandler3(struct _EXCEPTION_RECORD* rec, EXCEPTION_REGISTRATION_RECORD* ExceptionRegistrationFrame, struct _CONTEXT* context, EXCEPTION_REGISTRATION_RECORD** _ExceptionRecord) __noreturn
{
    int64_t rbx = _ExceptionRecord[1];
    EXCEPTION_REGISTRATION_RECORD* ExceptionRegistrationFrame_1 = ExceptionRegistrationFrame;
    *(__vcrt_getptd() + 0x60) = rbx;
    *(__vcrt_getptd() + 0x68) = rec->ExceptionInformation[3];
    void* rax_2 = __vcrt_getptd();
    return j_sub_140016a48(rec, &ExceptionRegistrationFrame_1, context, _ExceptionRecord, 
        _ExceptionRecord[7]->Next + *(rax_2 + 0x60), 0, 0, 0);
}

int64_t sub_1400102bc(int32_t* arg1)
{
    int64_t r9;
    int64_t arg_20 = r9;
    int64_t r8;
    int64_t arg_18 = r8;
    int64_t rdx;
    int64_t arg_10 = rdx;
    int32_t* arg_8 = arg1;
    int32_t var_28 = 0;
    int32_t* var_18 = arg1;
    int64_t var_10 = r8;
    void* rax = __vcrt_getptd();
    (*(rax + 0x10))(*arg1, &var_18);
    int32_t var_28_1 = 0;
    return 0;
}

int64_t __GSHandlerCheckCommon(int64_t arg1, void* arg2, int32_t* arg3)
{
    int64_t r9 = arg1;
    int64_t r10 = arg1;
    
    if (*arg3 & 4)
        r10 = (arg3[1] + arg1) & -(arg3[2]);
    
    uint64_t rcx_1 = *(*(arg2 + 0x10) + 8);
    int64_t rax_5 = *(arg2 + 8);
    
    if (*(rcx_1 + rax_5 + 3) & 0xf)
        r9 += *(rcx_1 + rax_5 + 3) & 0xfffffff0;
    
    /* tailcall */
    return __security_check_cookie(r9 ^ *((*arg3 & 0xfffffff8) + r10));
}

int64_t __GSHandlerCheck(int64_t arg1, int64_t arg2, int64_t arg3, void* arg4)
{
    __GSHandlerCheckCommon(arg2, arg4, *(arg4 + 0x38));
    return 1;
}

int64_t __GSHandlerCheck_EH4(struct _EXCEPTION_RECORD* arg1, EXCEPTION_REGISTRATION_RECORD* arg2, struct _CONTEXT* arg3, EXCEPTION_REGISTRATION_RECORD** arg4)
{
    void* rbx = arg4[7];
    int32_t r9 = __GSHandlerCheckCommon(arg2, arg4, rbx + 4);
    
    if (!(*(rbx + 4) & (-((r9 - r9)) + 1)))
        return 1;
    
    __CxxFrameHandler3(arg1, arg2, arg3, arg4);
    /* no return */
}

int64_t __pctype_func()
{
    void** rax = __vcrt_getptd();
    int64_t* arg_8 = rax[0x12];
    __acrt_update_locale_info(rax, &arg_8);
    return *arg_8;
}

uint64_t _isctype_l(int32_t arg1, int32_t arg2, int128_t* arg3)
{
    void var_88;
    int64_t rax_1 = __security_cookie ^ &var_88;
    int64_t rdi = arg1;
    void* var_40;
    _LocaleUpdate::_LocaleUpdate(&var_40, arg3);
    uint64_t result;
    int64_t* var_38;
    char var_28;
    uint32_t rax_4;
    
    if (rdi + 1 > 0x100)
    {
        int64_t* rdx_1 = var_38;
        uint64_t rcx_2 = rdi >> 8;
        uint8_t var_48;
        int32_t r9_1;
        
        if (*(*rdx_1 + (rcx_2 << 1)) >= 0)
        {
            var_48 = rdi;
            r9_1 = 1;
            char var_47_2 = 0;
        }
        else
        {
            var_48 = rcx_2;
            r9_1 = 2;
            char var_47_1 = rdi;
            char var_46_1 = 0;
        }
        
        int32_t var_58_1 = 1;
        int32_t var_20 = 0;
        int16_t var_1c_1 = 0;
        
        if (__acrt_GetStringTypeA(&var_38, 1, &var_48, r9_1, &var_20, *(rdx_1 + 0xc), var_58_1))
        {
            rax_4 = var_20;
            goto label_140010511;
        }
        
        if (var_28)
        {
            void* rax_10 = var_40;
            *(rax_10 + 0x3a8) &= 0xfffffffd;
        }
        
        result = 0;
    }
    else
    {
        rax_4 = *(*var_38 + (rdi << 1));
    label_140010511:
        result = rax_4 & arg2;
        
        if (var_28)
        {
            void* rcx_4 = var_40;
            *(rcx_4 + 0x3a8) &= 0xfffffffd;
        }
    }
    __security_check_cookie(rax_1 ^ &var_88);
    return result;
}

uint64_t isspace(int32_t arg1)
{
    int64_t rbx = arg1;
    int32_t rdi = rbx + 1;
    
    if (data_14002a1b8)
    {
        void** rax_4 = __vcrt_getptd();
        int64_t* arg_10 = rax_4[0x12];
        __acrt_update_locale_info(rax_4, &arg_10);
        int64_t* rax_5 = arg_10;
        
        if (rdi <= 0x100)
            return *(*rax_5 + (rbx << 1)) & 8;
        
        if (rax_5[1] > 1)
            return _isctype_l(rbx, 8, nullptr);
    }
    else if (rdi <= 0x100)
        return (**&data_140029770)[rbx] & 8;
    
    return 0;
}

int64_t sub_1400105f8(int64_t arg1, int64_t* arg2, int32_t arg3)
{
    void* var_48 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    
    if (!data_14002a1b8)
    {
        var_20 = 1;
        int128_t var_30_1 = *data_1400298c8;
    }
    
    int64_t var_58 = arg1;
    int64_t* var_50 = arg2;
    
    if (arg2)
        *arg2 = arg1;
    
    int64_t result =
        __crt_strtox::parse_integer<uint64_t,class __crt_strtox::c_string_character_source<char>,1>(
        &var_48, &var_58, arg3, 0);
    
    if (var_20 == 2)
    {
        void* rcx_1 = var_48;
        *(rcx_1 + 0x3a8) &= 0xfffffffd;
    }
    
    int32_t var_1c;
    
    if (var_18)
        *(sub_1400028a0(&var_48) + 0x20) = var_1c;
    int32_t var_14;
    
    if (0)
        *(sub_1400028a0(&var_48) + 0x24) = var_14;
    return result;
}

int64_t __crt_strtox::parse_integer<uint64_t,class __crt_strtox::c_string_character_source<char>,1>(int64_t* arg1, int64_t* arg2, int32_t arg3, char arg4)
{
    char* r12 = *arg2;
    int32_t rsi = arg3;
    uint32_t r13 = arg4;
    
    if (r12)
    {
        if (rsi && arg3 - 2 > 0x22)
        {
            arg1[6] = 1;
            *(arg1 + 0x2c) = 0x16;
            _invalid_parameter_internal(0, 0, 0, 0, 0, arg1);
            goto label_140010721;
        }
        
        uint32_t rdi_1 = *r12;
        int64_t result = 0;
        *arg2 = &r12[1];
        
        if (!arg1[5])
            __crt_cached_ptd_host::update_locale_slow(arg1);
        
        while (_ischartype_l(rdi_1, 8, &arg1[3]))
        {
            char* rax_5 = *arg2;
            rdi_1 = *rax_5;
            *arg2 = &rax_5[1];
        }
        
        uint32_t r14_2 = r13 | 2;
        
        if (rdi_1 != 0x2d)
            r14_2 = r13;
        
        if (!((rdi_1 - 0x2b) & 0xfd))
        {
            char* rax_9 = *arg2;
            rdi_1 = *rax_9;
            *arg2 = &rax_9[1];
        }
        
        if (!(rsi & 0xffffffef))
        {
            int32_t rax_13;
            int32_t rax_22;
            
            if (rdi_1 - 0x30 > 9)
            {
                if (rdi_1 - 0x61 <= 0x19)
                {
                    rax_13 = rdi_1 - 0x57;
                    goto label_1400107d6;
                }
                
                if (rdi_1 - 0x41 <= 0x19)
                {
                    rax_13 = rdi_1 - 0x37;
                    goto label_1400107d6;
                }
                
            label_140010827:
                rax_22 = 0xa;
            label_14001082e:
                
                if (rsi)
                    rax_22 = rsi;
                
                rsi = rax_22;
            }
            else
            {
                rax_13 = rdi_1 - 0x30;
            label_1400107d6:
                
                if (rax_13)
                    goto label_140010827;
                
                char* rcx_2 = *arg2;
                char rdx = *rcx_2;
                *arg2 = &rcx_2[1];
                
                if (!((rdx - 0x58) & 0xdf))
                {
                    rdi_1 = rcx_2[1];
                    *arg2 = &rcx_2[2];
                    rax_22 = 0x10;
                    goto label_14001082e;
                }
                
                *arg2 = rcx_2;
                int32_t rax_19 = 8;
                
                if (rsi)
                    rax_19 = rsi;
                
                rsi = rax_19;
                
                if (rdx && *rcx_2 != rdx)
                {
                    *sub_14000dedc() = 0x16;
                    _invalid_parameter_noinfo();
                }
            }
        }
        
        int64_t r9 = rsi;
        char* r8_2;
        
        while (true)
        {
            int32_t rcx_5;
            
            if (rdi_1 - 0x30 <= 9)
                rcx_5 = rdi_1 - 0x30;
            else if (rdi_1 - 0x61 <= 0x19)
                rcx_5 = rdi_1 - 0x57;
            else if (rdi_1 - 0x41 > 0x19)
                rcx_5 = -1;
            else
                rcx_5 = rdi_1 - 0x37;
            
            r8_2 = *arg2;
            
            if (rcx_5 >= rsi)
                break;
            
            rdi_1 = *r8_2;
            int64_t rax_27 = r9 * result;
            int64_t result_1 = rcx_5 + rax_27;
            int32_t rcx_8;
            rcx_8 = result_1 < rax_27;
            bool cond:0_1 = result > -1 / r9;
            result = result_1;
            int32_t rax_28;
            rax_28 = cond:0_1;
            *arg2 = &r8_2[1];
            r14_2 |= (rcx_8 | rax_28) << 2 | 8;
        }
        
        *arg2 = &r8_2[-1];
        
        if (rdi_1 && r8_2[-1] != rdi_1)
        {
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        }
        
        if (r14_2 & 8)
        {
            if (__crt_strtox::is_overflow_condition<uint64_t>(r14_2, result))
            {
                arg1[6] = 1;
                *(arg1 + 0x2c) = 0x22;
                
                if (r14_2 & 1)
                {
                    int64_t* rcx_13 = arg2[1];
                    
                    if (!(r14_2 & 2))
                    {
                        if (rcx_13)
                            *rcx_13 = *arg2;
                        
                        return 0x7fffffffffffffff;
                    }
                    
                    if (rcx_13)
                        *rcx_13 = *arg2;
                    
                    return -0x8000000000000000;
                }
                
                result = -1;
            }
            else if (r14_2 & 2)
                result = -(result);
            
            int64_t* rax_36 = arg2[1];
            
            if (rax_36)
                *rax_36 = *arg2;
            
            return result;
        }
        
        char** rax_32 = arg2[1];
        *arg2 = r12;
        
        if (rax_32)
            *rax_32 = r12;
    }
    else
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    label_140010721:
        int64_t* rcx = arg2[1];
        
        if (rcx)
            *rcx = *arg2;
    }
    
    return 0;
}

uint64_t _fgetc_nolock(int64_t* arg1)
{
    if (!arg1)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        return 0xffffffff;
    }
    
    arg1[2] -= 1;
    
    if (arg1[2] - 1 < 0)
        /* tailcall */
        return sub_1400174a4(arg1);
    
    char* rax_3 = *arg1;
    uint32_t rcx_1 = *rax_3;
    *arg1 = &rax_3[1];
    return rcx_1;
}

uint64_t _getc_nolock(int64_t* arg1)
{
    /* tailcall */
    return _fgetc_nolock(arg1);
}

uint64_t _ungetc_nolock(int32_t arg1, int64_t* arg2)
{
    void* r9_1;
    void* r10_1;
    
    if (!(*(arg2 + 0x14) >> 0xc & 1))
    {
        int64_t r8_1 = _fileno(arg2);
        r9_1 = &data_1400291e0;
        
        if (r8_1 + 2 <= 1)
            r10_1 = &data_1400291e0;
        else
            r10_1 = (&data_14002a700)[r8_1 >> 6] + (r8_1 & 0x3f) * 0x48;
        
        if (!*(r10_1 + 0x39) && r8_1 + 2 > 1)
            r9_1 = (&data_14002a700)[r8_1 >> 6] + (r8_1 & 0x3f) * 0x48;
    }
    
    if (!(*(arg2 + 0x14) >> 0xc & 1) && (*(r10_1 + 0x39) || *(r9_1 + 0x3d) & 1))
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    else if (arg1 != 0xffffffff && (*(arg2 + 0x14) & 1 || (*(arg2 + 0x14) & 6) == 6))
    {
        if (!arg2[1])
            __acrt_stdio_allocate_buffer_nolock(arg2);
        
        int64_t rax_13 = *arg2;
        
        if (rax_13 != arg2[1])
            goto label_140010ac1;
        
        if (!arg2[2])
        {
            *arg2 = rax_13 + 1;
        label_140010ac1:
            void* rdx_2 = *arg2;
            uint8_t rax_16 = *(arg2 + 0x14) >> 0xc;
            *arg2 = rdx_2 - 1;
            
            if (!(rax_16 & 1))
            {
                *(rdx_2 - 1) = arg1;
            label_140010adf:
                arg2[2] += 1;
                *(arg2 + 0x14) &= 0xfffffff7;
                *(arg2 + 0x14) |= 1;
                return arg1;
            }
            
            if (*(rdx_2 - 1) == arg1)
                goto label_140010adf;
            
            *arg2 = rdx_2;
        }
    }
    
    return 0xffffffff;
}

int64_t __scrt_wide_argv_policy::configure_argv()
{
    int32_t mxcsr;
    /* tailcall */
    return sub_140017970(sub_140017760(mxcsr));
}

uint8_t __acrt_app_verifier_enabled()
{
    TEB* gsbase;
    return gsbase->NtTib.Self->ProcessEnvironmentBlock->NtGlobalFlag >> 8 & 1;
}

uint64_t __acrt_is_secure_process()
{
    TEB* gsbase;
    return gsbase->NtTib.Self->ProcessEnvironmentBlock->ProcessParameters->Flags >> 0x1f;
}

int64_t __acrt_get_process_end_policy()
{
    int32_t arg_8 = 0;
    
    if (!__acrt_is_secure_process())
        sub_14000b9e0();
    
    return 1;
}

void __acrt_locale_free_monetary(void* arg1)
{
    if (!arg1)
        return;
    
    int64_t rcx = *(arg1 + 0x18);
    
    if (rcx != data_140029918)
        _free_base(rcx);
    
    int64_t rcx_1 = *(arg1 + 0x20);
    
    if (rcx_1 != data_140029920)
        _free_base(rcx_1);
    
    int64_t rcx_2 = *(arg1 + 0x28);
    
    if (rcx_2 != data_140029928)
        _free_base(rcx_2);
    
    int64_t rcx_3 = *(arg1 + 0x30);
    
    if (rcx_3 != data_140029930)
        _free_base(rcx_3);
    
    int64_t rcx_4 = *(arg1 + 0x38);
    
    if (rcx_4 != data_140029938)
        _free_base(rcx_4);
    
    int64_t rcx_5 = *(arg1 + 0x40);
    
    if (rcx_5 != data_140029940)
        _free_base(rcx_5);
    
    int64_t rcx_6 = *(arg1 + 0x48);
    
    if (rcx_6 != data_140029948)
        _free_base(rcx_6);
    
    int64_t rcx_7 = *(arg1 + 0x68);
    
    if (rcx_7 != data_140029968)
        _free_base(rcx_7);
    
    int64_t rcx_8 = *(arg1 + 0x70);
    
    if (rcx_8 != data_140029970)
        _free_base(rcx_8);
    
    int64_t rcx_9 = *(arg1 + 0x78);
    
    if (rcx_9 != data_140029978)
        _free_base(rcx_9);
    
    int64_t rcx_10 = *(arg1 + 0x80);
    
    if (rcx_10 != data_140029980)
        _free_base(rcx_10);
    
    int64_t rcx_11 = *(arg1 + 0x88);
    
    if (rcx_11 != data_140029988)
        _free_base(rcx_11);
    
    int64_t rcx_12 = *(arg1 + 0x90);
    
    if (rcx_12 != data_140029990)
        _free_base(rcx_12);
}

void __acrt_locale_free_numeric(int64_t* arg1)
{
    if (!arg1)
        return;
    
    int64_t rcx = *arg1;
    
    if (rcx != data_140029900)
        _free_base(rcx);
    
    int64_t rcx_1 = arg1[1];
    
    if (rcx_1 != data_140029908)
        _free_base(rcx_1);
    
    int64_t rcx_2 = arg1[2];
    
    if (rcx_2 != data_140029910)
        _free_base(rcx_2);
    
    int64_t rcx_3 = arg1[0xb];
    
    if (rcx_3 != data_140029958)
        _free_base(rcx_3);
    
    int64_t rcx_4 = arg1[0xc];
    
    if (rcx_4 != data_140029960)
        _free_base(rcx_4);
}

void __acrt_locale_free_time(int64_t* arg1)
{
    if (!arg1)
        return;
    
    free_crt_array_internal(arg1, 7);
    free_crt_array_internal(&arg1[7], 7);
    free_crt_array_internal(&arg1[0xe], 0xc);
    free_crt_array_internal(&arg1[0x1a], 0xc);
    free_crt_array_internal(&arg1[0x26], 2);
    _free_base(arg1[0x28]);
    _free_base(arg1[0x29]);
    _free_base(arg1[0x2a]);
    free_crt_array_internal(&arg1[0x2c], 7);
    free_crt_array_internal(&arg1[0x33], 7);
    free_crt_array_internal(&arg1[0x3a], 0xc);
    free_crt_array_internal(&arg1[0x46], 0xc);
    free_crt_array_internal(&arg1[0x52], 2);
    _free_base(arg1[0x54]);
    _free_base(arg1[0x55]);
    _free_base(arg1[0x56]);
    _free_base(arg1[0x57]);
}

void free_crt_array_internal(int64_t* arg1, int64_t arg2)
{
    void* rdi = &arg1[arg2];
    int64_t* rbx = arg1;
    
    if (arg1 == rdi)
        return;
    
    do
    {
        _free_base(*rbx);
        rbx = &rbx[1];
    } while (rbx != rdi);
}

uint64_t sub_140010e30(int16_t* arg1, int16_t* arg2, int64_t arg3)
{
    if (!arg3)
        return 0;
    
    int64_t i_1 = arg3 - 1;
    
    if (arg3 != 1)
    {
        int64_t i;
        
        do
        {
            int16_t rax_2 = *arg1;
            
            if (!rax_2)
                break;
            
            if (rax_2 != *arg2)
                break;
            
            arg1 = &arg1[1];
            arg2 = &arg2[1];
            i = i_1;
            i_1 -= 1;
        } while (i != 1);
    }
    
    return *arg1 - *arg2;
}

uint64_t __acrt_GetStringTypeA(int128_t* arg1, uint32_t arg2, uint8_t* arg3, int32_t arg4, uint16_t* arg5, uint32_t arg6, int32_t arg7)
{
    void var_88;
    void* rsp = &var_88;
    void var_58;
    int64_t rax_1 = __security_cookie ^ &var_58;
    void* var_50;
    int32_t rdx_1 = _LocaleUpdate::_LocaleUpdate(&var_50, arg1);
    uint32_t rdi = arg6;
    void* var_48;
    
    if (!rdi)
        rdi = *(var_48 + 0xc);
    int32_t temp0 = arg7;
    arg7 = -(arg7);
    int32_t var_60 = 0;
    int64_t var_68 = 0;
    int32_t rax_3;
    int64_t rcx_2;
    rax_3 = __acrt_MultiByteToWideChar(rdi, ((rdx_1 - rdx_1) & 8) + 1, arg3, arg4);
    int64_t r14 = rax_3;
    BOOL rdi_1;
    
    if (rax_3)
    {
        int64_t rsi_2 = r14 * 2;
        uint64_t rcx_4 = (rcx_2 - rcx_2) & (rsi_2 + 0x10);
        void* lpSrcStr;
        
        if (!rcx_4)
        {
            lpSrcStr = nullptr;
        label_140010fa2:
            rdi_1 = 0;
            
            if (lpSrcStr)
                goto label_140010fad;
        }
        else
        {
            if (rcx_4 > 0x400)
            {
                void* lpSrcStr_1 = _malloc_base(rcx_4);
                lpSrcStr = lpSrcStr_1;
                
                if (lpSrcStr_1)
                {
                    *lpSrcStr_1 = 0xdddd;
                    lpSrcStr += 0x10;
                }
            }
            else
            {
                int64_t rax_5 = rcx_4 + 0xf;
                
                if (rax_5 <= rcx_4)
                    rax_5 = 0xffffffffffffff0;
                
                int64_t rax_6 = rax_5 & 0xfffffffffffffff0;
                __chkstk(rax_6);
                rsp = &var_88 - rax_6;
                lpSrcStr = rsp + 0x30;
                
                if (!lpSrcStr)
                    goto label_140010fa2;
                
                *lpSrcStr = 0xcccc;
                lpSrcStr += 0x10;
            }
            
            if (!lpSrcStr)
                goto label_140010fa2;
            
            sub_14001c640(lpSrcStr, 0, rsi_2);
            *(rsp + 0x28) = r14;
            *(rsp + 0x20) = lpSrcStr;
            int32_t cchSrc = __acrt_MultiByteToWideChar(rdi, MB_PRECOMPOSED, arg3, arg4);
            
            if (!cchSrc)
                goto label_140010fa2;
            
            rdi_1 = GetStringTypeW(arg2, lpSrcStr, cchSrc, arg5);
        label_140010fad:
            
            if (*(lpSrcStr - 0x10) == 0xdddd)
                _free_base(lpSrcStr - 0x10);
        }
    }
    else
        rdi_1 = 0;
    
    char var_38;
    
    if (var_38)
    {
        void* rax_8 = var_50;
        *(rax_8 + 0x3a8) &= 0xfffffffd;
    }
    
    __security_check_cookie(rax_1 ^ &var_58);
    return rdi_1;
}

int64_t __acrt_MultiByteToWideChar(uint32_t arg1, enum MULTI_BYTE_TO_WIDE_CHAR_FLAGS arg2, uint8_t* arg3, int64_t arg4)
{
    if (arg1 > 0xdeac)
    {
        if (arg1 == 0xdead || arg1 == 0xdeae || arg1 == 0xdeaf || arg1 == 0xdeb0 || arg1 == 0xdeb1
                || arg1 == 0xdeb2 || arg1 == 0xdeb3 || arg1 == 0xfde8)
            arg2 = 0;
        else if (arg1 == 0xfde9)
            arg2 &= MB_ERR_INVALID_CHARS;
    }
    else if (arg1 == 0xdeac)
        arg2 = 0;
    else
    {
        bool cond:2_1;
        
        if (arg1 <= 0xc433)
        {
            if (arg1 != 0xc433 && arg1 != 0x2a && arg1 != 0xc42c && arg1 != 0xc42d
                && arg1 != 0xc42e)
            {
                cond:2_1 = arg1 != 0xc431;
                goto label_140011041;
            }
            
            arg2 = 0;
        }
        else if (arg1 == 0xc435)
            arg2 = 0;
        else if (arg1 == 0xd698)
            arg2 &= MB_ERR_INVALID_CHARS;
        else if (arg1 == 0xdeaa)
            arg2 = 0;
        else
        {
            cond:2_1 = arg1 != 0xdeab;
        label_140011041:
            
            if (!cond:2_1)
                arg2 = 0;
        }
    }
    
    /* tailcall */
    return MultiByteToWideChar(arg1, arg2, arg3, arg4);
}

int64_t sub_140011084(void* arg1)
{
    *(arg1 + 0x10) += 1;
    int32_t* rax = *(arg1 + 0xe0);
    
    if (rax)
        *rax += 1;
    
    int32_t* rax_1 = *(arg1 + 0xf0);
    
    if (rax_1)
        *rax_1 += 1;
    
    int32_t* rax_2 = *(arg1 + 0xe8);
    
    if (rax_2)
        *rax_2 += 1;
    
    int32_t* rax_3 = *(arg1 + 0x100);
    
    if (rax_3)
        *rax_3 += 1;
    
    void* rax_4 = arg1 + 0x38;
    int64_t i_1 = 6;
    int64_t i;
    
    do
    {
        if (*(rax_4 - 0x10) != &data_1400298d8)
        {
            int32_t* rdx_1 = *rax_4;
            
            if (rdx_1)
                *rdx_1 += 1;
        }
        
        if (*(rax_4 - 0x18))
        {
            int32_t* rdx_2 = *(rax_4 - 8);
            
            if (rdx_2)
                *rdx_2 += 1;
        }
        
        rax_4 += 0x20;
        i = i_1;
        i_1 -= 1;
    } while (i != 1);
    /* tailcall */
    return __acrt_locale_add_lc_time_reference(*(arg1 + 0x120));
}

void __acrt_release_locale_ref(void* arg1)
{
    if (!arg1)
        return;
    
    *(arg1 + 0x10) -= 1;
    int32_t* rax_1 = *(arg1 + 0xe0);
    
    if (rax_1)
        *rax_1 -= 1;
    
    int32_t* rax_2 = *(arg1 + 0xf0);
    
    if (rax_2)
        *rax_2 -= 1;
    
    int32_t* rax_3 = *(arg1 + 0xe8);
    
    if (rax_3)
        *rax_3 -= 1;
    
    int32_t* rax_4 = *(arg1 + 0x100);
    
    if (rax_4)
        *rax_4 -= 1;
    
    void* rax_5 = arg1 + 0x38;
    int64_t i_1 = 6;
    int64_t i;
    
    do
    {
        if (*(rax_5 - 0x10) != &data_1400298d8)
        {
            int32_t* rdx_1 = *rax_5;
            
            if (rdx_1)
                *rdx_1 -= 1;
        }
        
        if (*(rax_5 - 0x18))
        {
            int32_t* rdx_2 = *(rax_5 - 8);
            
            if (rdx_2)
                *rdx_2 -= 1;
        }
        
        rax_5 += 0x20;
        i = i_1;
        i_1 -= 1;
    } while (i != 1);
    __acrt_locale_release_lc_time_reference(*(arg1 + 0x120));
}

int64_t __acrt_free_locale(void* arg1)
{
    int64_t rax = *(arg1 + 0xf8);
    
    if (rax && rax != &data_140029900)
    {
        int32_t* rax_1 = *(arg1 + 0xe0);
        
        if (rax_1 && !*rax_1)
        {
            int32_t* rcx = *(arg1 + 0xf0);
            
            if (rcx && !*rcx)
            {
                _free_base(rcx);
                __acrt_locale_free_monetary(*(arg1 + 0xf8));
            }
            
            int32_t* rcx_2 = *(arg1 + 0xe8);
            
            if (rcx_2 && !*rcx_2)
            {
                _free_base(rcx_2);
                __acrt_locale_free_numeric(*(arg1 + 0xf8));
            }
            
            _free_base(*(arg1 + 0xe0));
            _free_base(*(arg1 + 0xf8));
        }
    }
    
    int32_t* rax_2 = *(arg1 + 0x100);
    
    if (rax_2 && !*rax_2)
    {
        _free_base(*(arg1 + 0x108) - 0xfe);
        _free_base(*(arg1 + 0x110) - 0x80);
        _free_base(*(arg1 + 0x118) - 0x80);
        _free_base(*(arg1 + 0x100));
    }
    
    __acrt_locale_free_lc_time_if_unreferenced(*(arg1 + 0x120));
    void* rsi = arg1 + 0x128;
    int64_t i_1 = 6;
    void* rdi = arg1 + 0x38;
    int64_t i;
    
    do
    {
        if (*(rdi - 0x10) != &data_1400298d8)
        {
            int32_t* rcx_14 = *rdi;
            
            if (rcx_14 && !*rcx_14)
            {
                _free_base(rcx_14);
                _free_base(*rsi);
            }
        }
        
        if (*(rdi - 0x18))
        {
            int32_t* rcx_16 = *(rdi - 8);
            
            if (rcx_16 && !*rcx_16)
                _free_base(rcx_16);
        }
        
        rsi += 8;
        rdi += 0x20;
        i = i_1;
        i_1 -= 1;
    } while (i != 1);
    /* tailcall */
    return _free_base(arg1);
}

uint64_t __acrt_locale_add_lc_time_reference(void* arg1)
{
    if (!arg1 || arg1 == &data_14001f880)
        return 0x7fffffff;
    
    int32_t rax = *(arg1 + 0x15c);
    *(arg1 + 0x15c) += 1;
    return rax + 1;
}

uint64_t __acrt_locale_release_lc_time_reference(void* arg1)
{
    if (!arg1 || arg1 == &data_14001f880)
        return 0x7fffffff;
    
    int32_t rax = *(arg1 + 0x15c);
    *(arg1 + 0x15c) -= 1;
    return rax - 1;
}

void __acrt_locale_free_lc_time_if_unreferenced(int64_t* arg1)
{
    if (arg1 && arg1 != &data_14001f880 && !*(arg1 + 0x15c))
    {
        __acrt_locale_free_time(arg1);
        _free_base(arg1);
    }
}

void* sub_1400113b8()
{
    void** rax = __vcrt_getptd();
    void* result;
    
    if (data_1400299a0 & rax[0x75])
        result = rax[0x12];
    
    if (!(data_1400299a0 & rax[0x75]) || !result)
    {
        __vcrt_unlock(4);
        result = _updatetlocinfoEx_nolock(&rax[0x12], data_14002ab58);
        __vcrt_lock(4);
        
        if (!result)
        {
            abort();
            /* no return */
        }
    }
    
    return result;
}

void* const _updatetlocinfoEx_nolock(int64_t* arg1, void* arg2)
{
    if (!arg2 || !arg1)
        return nullptr;
    
    void* rbx_1 = *arg1;
    
    if (rbx_1 != arg2)
    {
        *arg1 = arg2;
        sub_140011084(arg2);
        
        if (rbx_1)
        {
            __acrt_release_locale_ref(rbx_1);
            
            if (!*(rbx_1 + 0x10) && rbx_1 != &data_140029770)
                __acrt_free_locale(rbx_1);
        }
    }
    
    return arg2;
}

uint64_t j_common_expand_argv_wildcards<char>(int64_t* arg1, int64_t* arg2)
{
    /* tailcall */
    return common_expand_argv_wildcards<char>(arg1, arg2);
}

uint64_t common_expand_argv_wildcards<char>(int64_t* arg1, int64_t* arg2)
{
    int64_t* rbx = arg1;
    
    if (!arg2)
    {
        int32_t rbx_1 = arg2 + 0x16;
        *sub_14000dedc() = rbx_1;
        _invalid_parameter_noinfo();
        return rbx_1;
    }
    
    *arg2 = 0;
    char* rax_2 = *arg1;
    int128_t var_58;
    __builtin_memset(&var_58, 0, 0x18);
    int32_t rsi_1;
    int64_t* i_2;
    
    while (true)
    {
        int16_t arg_10;
        
        if (!rax_2)
        {
            i_2 = var_58;
            int64_t rsi_2 = *var_58[8];
            int64_t rdx_2 = 0;
            int64_t arg_18 = 0;
            int64_t* i_3 = i_2;
            
            if (i_2 != rsi_2)
            {
                do
                {
                    int64_t rcx_3 = -1;
                    
                    do
                        rcx_3 += 1;
                     while ((*i_3)[rcx_3]);
                    
                    i_3 = &i_3[1];
                    rdx_2 = rdx_2 + 1 + rcx_3;
                } while (i_3 != rsi_2);
                
                arg_18 = rdx_2;
            }
            
            int64_t rax_6 = __acrt_allocate_buffer_for_argv(((rsi_2 - i_2) >> 3) + 1, rdx_2, 1);
            
            if (!rax_6)
            {
                _free_base(0);
                int64_t* i_4 = i_2;
                
                if (i_2 != rsi_2)
                {
                    do
                    {
                        _free_base(*i_4);
                        i_4 = &i_4[1];
                    } while (i_4 != rsi_2);
                }
                
                rsi_1 = -1;
                break;
            }
            
            char* rcx_8 = rax_6 + ((((rsi_2 - i_2) >> 3) + 1) << 3);
            int64_t* i_6 = i_2;
            char* arg_20 = rcx_8;
            char* r12_1 = rcx_8;
            
            if (i_2 != rsi_2)
            {
                arg_10 = rax_6 - i_2;
                
                do
                {
                    char* r8_3 = *i_6;
                    int64_t r15_1 = -1;
                    
                    do
                        r15_1 += 1;
                     while (r8_3[r15_1]);
                    
                    if (sub_140017df0(r12_1, rcx_8 - r12_1 + arg_18, r8_3, r15_1 + 1))
                    {
                        int64_t var_68 = 0;
                        _invoke_watson();
                        /* no return */
                    }
                    
                    rcx_8 = arg_20;
                    *(arg_10 + i_6) = r12_1;
                    r12_1 = &r12_1[r15_1 + 1];
                    i_6 = &i_6[1];
                } while (i_6 != rsi_2);
            }
            
            *arg2 = rax_6;
            _free_base(0);
            int64_t* i_5 = i_2;
            
            if (i_2 != rsi_2)
            {
                do
                {
                    _free_base(*i_5);
                    i_5 = &i_5[1];
                } while (i_5 != rsi_2);
            }
            
            _free_base(i_2);
            return 0;
        }
        
        arg_10 = 0x3f2a;
        char arg_12 = 0;
        char* rax_3 = sub_140017f20(rax_2, &arg_10);
        char* rcx_1 = *rbx;
        
        if (rax_3)
        {
            int32_t rax_5 = sub_140011ba4(rcx_1, rax_3, &var_58, arg2);
            rsi_1 = rax_5;
            
            if (rax_5)
            {
                i_2 = var_58;
                int64_t* i = i_2;
                
                if (i_2 != *var_58[8])
                {
                    do
                    {
                        _free_base(*i);
                        i = &i[1];
                    } while (i != *var_58[8]);
                }
                
                break;
            }
        }
        else
        {
            int32_t rax_4 = sub_140011a20(rcx_1, 0, 0, &var_58);
            rsi_1 = rax_4;
            
            if (rax_4)
            {
                i_2 = var_58;
                int64_t* i_1 = i_2;
                
                if (i_2 != *var_58[8])
                {
                    do
                    {
                        _free_base(*i_1);
                        i_1 = &i_1[1];
                    } while (i_1 != *var_58[8]);
                }
                
                break;
            }
        }
        
        rbx = &rbx[1];
        rax_2 = *rbx;
    }
    
    _free_base(i_2);
    return rsi_1;
}

uint64_t sub_1400116d4(char* arg1, void* arg2, int64_t arg3, uint32_t arg4)
{
    if (!arg1)
    {
        if (*(arg2 + 0x28))
        {
            _free_base(*(arg2 + 0x10));
            *(arg2 + 0x28) = 0;
        }
        
        __builtin_memset(arg2 + 0x10, 0, 0x18);
    }
    else if (*arg1)
    {
        int32_t var_10_1 = 0;
        int64_t var_18_1 = 0;
        int32_t rax_4 = __acrt_MultiByteToWideChar(arg4, MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, 
            arg1, 0xffffffff);
        int64_t rsi_1 = rax_4;
        int64_t rax_10;
        
        if (rax_4)
        {
            int64_t rdx_4 = *(arg2 + 0x18);
            
            if (rsi_1 > rdx_4)
            {
                if (*(arg2 + 0x28))
                {
                    _free_base(*(arg2 + 0x10));
                    *(arg2 + 0x28) = 0;
                }
                
                int64_t rax_7;
                int64_t rdx_5;
                int32_t r8_1;
                rax_7 = _malloc_base(rsi_1 * 2);
                *(arg2 + 0x10) = rax_7;
                rdx_4 = (rdx_5 - rdx_5) & rsi_1;
                int32_t r8_4 = ~(r8_1 - r8_1) & 0xc;
                
                if (rax_7)
                    r8_4 = 0;
                
                *(arg2 + 0x28) = rax_7;
                *(arg2 + 0x18) = rdx_4;
                
                if (r8_4)
                    return r8_4;
            }
            
            int32_t var_10_2 = rdx_4;
            int64_t var_18_2 = *(arg2 + 0x10);
            rax_10 = __acrt_MultiByteToWideChar(arg4, MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, arg1, 
                0xffffffff);
        }
        
        if (!rax_4 || !rax_10)
        {
            sub_14000df24(GetLastError());
            return *sub_14000dedc();
        }
        
        *(arg2 + 0x20) = rax_10 - 1;
    }
    else
    {
        if (!*(arg2 + 0x18))
        {
            if (*(arg2 + 0x28))
            {
                _free_base(*(arg2 + 0x10));
                *(arg2 + 0x28) = 0;
            }
            
            int64_t rax_1;
            int32_t rdx;
            rax_1 = _malloc_base(2);
            *(arg2 + 0x10) = rax_1;
            int32_t rdx_3 = ~(rdx - rdx) & 0xc;
            
            if (rax_1)
                rdx_3 = 0;
            
            *(arg2 + 0x28) = rax_1;
            int64_t rcx_4;
            rcx_4 = rax_1;
            *(arg2 + 0x18) = rcx_4;
            
            if (rdx_3)
                return rdx_3;
        }
        
        **(arg2 + 0x10) = 0;
    }
    
    return 0;
}

uint64_t sub_140011874(int16_t* arg1, void* arg2, int64_t arg3, uint32_t arg4)
{
    if (!arg1)
    {
        if (*(arg2 + 0x28))
        {
            _free_base(*(arg2 + 0x10));
            *(arg2 + 0x28) = 0;
        }
        
        __builtin_memset(arg2 + 0x10, 0, 0x18);
    }
    else if (*arg1)
    {
        int64_t var_10_1 = 0;
        int64_t var_18_1 = 0;
        int32_t rax_4 = __acrt_WideCharToMultiByte(arg4, 0, arg1, 0xffffffff, 0, nullptr);
        int64_t rsi_1 = rax_4;
        int64_t rax_10;
        
        if (rax_4)
        {
            int64_t rdx_4 = *(arg2 + 0x18);
            
            if (rsi_1 > rdx_4)
            {
                if (*(arg2 + 0x28))
                {
                    _free_base(*(arg2 + 0x10));
                    *(arg2 + 0x28) = 0;
                }
                
                int64_t rax_7;
                int64_t rdx_5;
                int32_t r8_1;
                rax_7 = _malloc_base(rsi_1);
                *(arg2 + 0x10) = rax_7;
                rdx_4 = (rdx_5 - rdx_5) & rsi_1;
                int32_t r8_4 = ~(r8_1 - r8_1) & 0xc;
                
                if (rax_7)
                    r8_4 = 0;
                
                *(arg2 + 0x28) = rax_7;
                *(arg2 + 0x18) = rdx_4;
                
                if (r8_4)
                    return r8_4;
            }
            
            int64_t var_10_2 = 0;
            int64_t var_18_2 = 0;
            rax_10 = __acrt_WideCharToMultiByte(arg4, 0, arg1, 0xffffffff, *(arg2 + 0x10), rdx_4);
        }
        
        if (!rax_4 || !rax_10)
        {
            sub_14000df24(GetLastError());
            return *sub_14000dedc();
        }
        
        *(arg2 + 0x20) = rax_10 - 1;
    }
    else
    {
        if (!*(arg2 + 0x18))
        {
            if (*(arg2 + 0x28))
            {
                _free_base(*(arg2 + 0x10));
                *(arg2 + 0x28) = 0;
            }
            
            int64_t rax_1;
            int32_t rdx;
            rax_1 = _malloc_base(1);
            *(arg2 + 0x10) = rax_1;
            int32_t rdx_3 = ~(rdx - rdx) & 0xc;
            
            if (rax_1)
                rdx_3 = 0;
            
            *(arg2 + 0x28) = rax_1;
            int64_t rcx_4;
            rcx_4 = rax_1;
            *(arg2 + 0x18) = rcx_4;
            
            if (rdx_3)
                return rdx_3;
        }
        
        **(arg2 + 0x10) = 0;
    }
    
    return 0;
}

uint64_t sub_140011a20(char* arg1, int64_t arg2, int64_t arg3, int64_t* arg4)
{
    int64_t rbp = -1;
    int32_t rdi = 0;
    
    do
        rbp += 1;
     while (arg1[rbp]);
    
    if (rbp + 1 > ~arg3)
        return 0xc;
    
    int64_t r15_2 = arg3 + 1 + rbp + 1;
    char* rax_3 = _calloc_base(r15_2, 1);
    int32_t rax_4;
    
    if (arg3)
        rax_4 = sub_140017df0(rax_3, r15_2, arg2, arg3);
    
    if (!arg3 || !rax_4)
    {
        int32_t rax_5 = sub_140017df0(&rax_3[arg3], r15_2 - arg3, arg1, rbp + 1);
        
        if (!rax_5)
        {
            int64_t r14_1 = arg4[2];
            uint64_t r15_4 = rax_5 + 8;
            
            if (arg4[1] != r14_1)
            {
                *arg4[1] = rax_3;
                arg4[1] += r15_4;
            }
            else if (*arg4)
            {
                int64_t r14_3 = (r14_1 - *arg4) >> 3;
                
                if (r14_3 > 0x7fffffffffffffff)
                {
                    rdi = 0xc;
                    _free_base(rax_3);
                }
                else
                {
                    int64_t rbp_2 = r14_3 * 2;
                    void* rax_9 = _recalloc_base(*arg4, rbp_2, r15_4);
                    
                    if (rax_9)
                    {
                        *arg4 = rax_9;
                        arg4[1] = rax_9 + (r14_3 << 3);
                        arg4[2] = rax_9 + (rbp_2 << 3);
                        _free_base(0);
                        *arg4[1] = rax_3;
                        arg4[1] += r15_4;
                    }
                    else
                    {
                        _free_base(0);
                        rdi = 0xc;
                        _free_base(rax_3);
                    }
                }
            }
            else
            {
                *arg4 = _calloc_base(rax_5 + 4, r15_4);
                _free_base(0);
                int64_t rax_7 = *arg4;
                
                if (!rax_7)
                {
                    rdi = 0xc;
                    _free_base(rax_3);
                }
                else
                {
                    arg4[1] = rax_7;
                    arg4[2] = rax_7 + 0x20;
                    *arg4[1] = rax_3;
                    arg4[1] += r15_4;
                }
            }
            
            _free_base(0);
            return rdi;
        }
    }
    
    int64_t var_38 = 0;
    _invoke_watson();
    /* no return */
}

uint64_t sub_140011ba4(char* arg1, char* arg2, int64_t* arg3, int64_t arg4 @ r13)
{
    int64_t var_30 = arg4;
    void var_378;
    int64_t var_48 = __security_cookie ^ &var_378;
    int64_t* r12 = arg3;
    int64_t rax_1;
    
    if (arg2 != arg1)
    {
        do
        {
            rax_1 = *arg2;
            rax_1 -= 0x2f;
            
            if (rax_1 <= 0x2d && TEST_BITQ(0x200000000801, rax_1))
                break;
            
            rax_1 = _mbsdec(arg1, arg2);
            arg2 = rax_1;
        } while (rax_1 != arg1);
    }
    
    arg3 = *arg2;
    uint64_t result;
    
    if (arg3 != 0x3a || arg2 == &arg1[1])
    {
        arg3 -= 0x2f;
        
        if (arg3 <= 0x2d)
            rax_1 = 1;
        
        if (arg3 > 0x2d || !TEST_BITQ(0x200000000801, arg3))
            rax_1 = 0;
        
        char temp0_1 = rax_1;
        rax_1 = -(rax_1);
        void* r13_1 = (arg4 - arg4) & (arg2 - arg1 + 1);
        void* var_340_1 = r13_1;
        void findFileData;
        sub_14001c640(&findFileData, 0, 0x250);
        int64_t var_338;
        __builtin_memset(&var_338, 0, 0x29);
        void* var_308;
        _LocaleUpdate::_LocaleUpdate(&var_308, nullptr);
        void* var_300;
        uint32_t r9_1;
        char var_2f0;
        
        if (*(var_300 + 0xc) != 0xfde9)
        {
            if (sub_14000b744())
            {
                if (var_2f0)
                {
                    void* rax_6 = var_308;
                    *(rax_6 + 0x3a8) &= 0xfffffffd;
                }
                
                r9_1 = 0;
            }
            else
            {
                if (var_2f0)
                {
                    void* rax_5 = var_308;
                    *(rax_5 + 0x3a8) &= 0xfffffffd;
                }
                
                r9_1 = 1;
            }
        }
        else
        {
            if (var_2f0)
            {
                void* rax_3 = var_308;
                *(rax_3 + 0x3a8) &= 0xfffffffd;
            }
            
            r9_1 = 0xfde9;
        }
        PWSTR lpFileName_1;
        PWSTR lpFileName = lpFileName_1;
        void var_348;
        
        if (sub_1400116d4(arg1, &var_338, &var_348, r9_1))
            lpFileName = nullptr;
        
        HANDLE hFindFile = FindFirstFileExW(lpFileName, FindExInfoStandard, &findFileData, 
            FindExSearchNameMatch, 0, 0);
        char var_310;
        
        if (hFindFile != -1)
        {
            int64_t rsi_3 = (r12[1] - *r12) >> 3;
            
            while (true)
            {
                int64_t var_2c8;
                __builtin_memset(&var_2c8, 0, 0x29);
                void* var_2e8;
                _LocaleUpdate::_LocaleUpdate(&var_2e8, nullptr);
                void* var_2e0;
                uint32_t r9_3;
                char var_2d0;
                
                if (*(var_2e0 + 0xc) != 0xfde9)
                {
                    if (sub_14000b744())
                    {
                        if (var_2d0)
                        {
                            void* rax_12 = var_2e8;
                            *(rax_12 + 0x3a8) &= 0xfffffffd;
                        }
                        
                        r9_3 = 0;
                    }
                    else
                    {
                        if (var_2d0)
                        {
                            void* rax_11 = var_2e8;
                            *(rax_11 + 0x3a8) &= 0xfffffffd;
                        }
                        
                        r9_3 = 1;
                    }
                }
                else
                {
                    if (var_2d0)
                    {
                        void* rax_9 = var_2e8;
                        *(rax_9 + 0x3a8) &= 0xfffffffd;
                    }
                    
                    r9_3 = 0xfde9;
                }
                char* var_2b8;
                char* rcx_9 = var_2b8;
                int16_t var_26c[0x112];
                
                if (sub_140011874(&var_26c, &var_2c8, &var_348, r9_3))
                    rcx_9 = nullptr;
                
                int32_t rax_13;
                
                if (*rcx_9 == 0x2e)
                    rax_13 = rcx_9[1];
                
                char var_2a0;
                
                if (*rcx_9 != 0x2e || (rax_13 && (rax_13 != 0x2e || rcx_9[2])))
                {
                    int32_t result_2 = sub_140011a20(rcx_9, arg1, r13_1, r12);
                    
                    if (result_2)
                    {
                        if (var_2a0)
                            _free_base(var_2b8);
                        
                        FindClose(hFindFile);
                        
                        if (var_310)
                            _free_base(lpFileName_1);
                        
                        result = result_2;
                        break;
                    }
                    
                    if (var_2a0 != result_2)
                        _free_base(var_2b8);
                    
                    r13_1 = var_340_1;
                }
                else if (var_2a0)
                    _free_base(var_2b8);
                
                if (!FindNextFileW(hFindFile, &findFileData))
                {
                    int64_t rax_15 = *r12;
                    int64_t rdx_8 = (r12[1] - rax_15) >> 3;
                    
                    if (rsi_3 != rdx_8)
                        sub_140017a50(rax_15 + (rsi_3 << 3), rdx_8 - rsi_3, 8, 
                            <lambda_2feae5270eb4d0d5532525f423405775>::<helper_func_cdecl>);
                    
                    FindClose(hFindFile);
                    
                    if (var_310)
                        _free_base(lpFileName_1);
                    
                    result = 0;
                    break;
                }
            }
        }
        else
        {
            int32_t result_1 = sub_140011a20(arg1, 0, 0, r12);
            
            if (var_310)
                _free_base(lpFileName_1);
            
            result = result_1;
        }
    }
    else
        result = sub_140011a20(arg1, 0, 0, r12);
    
    __security_check_cookie(var_48 ^ &var_378);
    return result;
}

void <lambda_2feae5270eb4d0d5532525f423405775>::<helper_func_cdecl>() __pure
{
    int64_t entry_rcx;
    int64_t entry_rdx;
    
    if (entry_rcx < entry_rdx)
        return;
    
    int64_t rax_1;
    rax_1 = entry_rcx > entry_rdx;
}

uint64_t __acrt_GetModuleFileNameA(HMODULE arg1, int64_t arg2, int32_t arg3)
{
    void var_2a8;
    int64_t rax_1 = __security_cookie ^ &var_2a8;
    uint64_t rdi = arg3;
    void filename;
    uint64_t result;
    
    if (GetModuleFileNameW(arg1, &filename, 0x105))
    {
        int32_t result_1 = 0;
        int64_t var_260 = arg2;
        uint64_t var_258_1 = rdi;
        uint64_t var_248_1 = rdi;
        int64_t var_250_1 = arg2;
        char var_238_1 = 0;
        void* var_280;
        _LocaleUpdate::_LocaleUpdate(&var_280, nullptr);
        uint32_t r9_1 = 0xfde9;
        void* var_278;
        char var_268;
        
        if (*(var_278 + 0xc) != 0xfde9)
        {
            int32_t rax_7 = sub_14000b744();
            
            if (rax_7)
            {
                if (var_268)
                {
                    void* rax_9 = var_280;
                    *(rax_9 + 0x3a8) &= 0xfffffffd;
                }
                
                r9_1 = 0;
            }
            else
            {
                if (var_268 != rax_7)
                {
                    void* rax_8 = var_280;
                    *(rax_8 + 0x3a8) &= 0xfffffffd;
                }
                
                r9_1 = 1;
            }
        }
        else if (var_268)
        {
            void* rax_6 = var_280;
            *(rax_6 + 0x3a8) &= 0xfffffffd;
        }
        void var_288;
        __acrt_convert_wcs_mbs_cp<wchar_t,char,class <lambda_f788ae46380686e8b737efdd8c720d07>,struct __crt_win32_buffer_no_resizing>(
            &filename, &var_260, &var_288, r9_1);
        result = result_1;
    }
    else
    {
        sub_14000df24(GetLastError());
        result = 0;
    }
    
    __security_check_cookie(rax_1 ^ &var_2a8);
    return result;
}

uint64_t __acrt_convert_wcs_mbs_cp<wchar_t,char,class <lambda_f788ae46380686e8b737efdd8c720d07>,struct __crt_win32_buffer_no_resizing>(int16_t* arg1, void* arg2, int64_t arg3, uint32_t arg4)
{
    if (!arg1)
    {
        if (*(arg2 + 0x28))
            *(arg2 + 0x28) = 0;
        
        __builtin_memset(arg2 + 0x10, 0, 0x18);
    }
    else if (*arg1)
    {
        int64_t var_10_1 = 0;
        int64_t var_18_1 = 0;
        int32_t rax_4 = __acrt_WideCharToMultiByte(arg4, 0, arg1, 0xffffffff, 0, nullptr);
        
        if (!rax_4)
        {
            sub_14000df24(GetLastError());
            return *sub_14000dedc();
        }
        
        int64_t rcx_2 = *(arg2 + 0x18);
        
        if (rax_4 > rcx_2)
        {
            if (*(arg2 + 0x28))
                *(arg2 + 0x28) = 0;
            
        label_14001209a:
            *sub_14000dedc() = 0x22;
            *(arg2 + 0x28) = 0;
            *(arg2 + 0x18) = 0;
            return 0x22;
        }
        
        int64_t var_10_2 = 0;
        int64_t var_18_2 = 0;
        int64_t rax_9 =
            __acrt_WideCharToMultiByte(arg4, 0, arg1, 0xffffffff, *(arg2 + 0x10), rcx_2);
        
        if (!rax_9)
        {
            sub_14000df24(GetLastError());
            return *sub_14000dedc();
        }
        
        *(arg2 + 0x20) = rax_9 - 1;
    }
    else
    {
        if (!*(arg2 + 0x18))
        {
            if (*(arg2 + 0x28))
                *(arg2 + 0x28) = 0;
            
            goto label_14001209a;
        }
        
        **(arg2 + 0x10) = 0;
    }
    
    return 0;
}

int64_t _ismbblead(char arg1)
{
    /* tailcall */
    return x_ismbbtype_l(nullptr, arg1, 0, 4);
}

int64_t x_ismbbtype_l(int128_t* arg1, char arg2, int32_t arg3, char arg4)
{
    void* var_28;
    _LocaleUpdate::_LocaleUpdate(&var_28, arg1);
    uint64_t rdx_1 = arg2;
    int64_t* var_20;
    int64_t var_18;
    int64_t result;
    
    if (*(rdx_1 + var_18 + 0x19) & arg4 || (arg3 && arg3 & *(*var_20 + (rdx_1 << 1))))
        result = 1;
    else
        result = 0;
    
    char var_10;
    
    if (var_10)
    {
        void* rcx_2 = var_28;
        *(rcx_2 + 0x3a8) &= 0xfffffffd;
    }
    
    return result;
}

void* _recalloc_base(int64_t arg1, int64_t arg2, int64_t arg3)
{
    if (arg2 && -0x20 / arg2 < arg3)
    {
        *sub_14000dedc() = 0xc;
        return nullptr;
    }
    
    int64_t rdi_1;
    
    if (!arg1)
        rdi_1 = 0;
    else
        rdi_1 = _msize_base(arg1);
    
    uint64_t rbx_1 = arg2 * arg3;
    void* result = _realloc_base(arg1, rbx_1);
    
    if (result && rdi_1 < rbx_1)
        sub_14001c640(result + rdi_1, 0, rbx_1 - rdi_1);
    
    return result;
}

void* _recalloc(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return _recalloc_base(arg1, arg2, arg3);
}

int64_t __acrt_WideCharToMultiByte(uint32_t arg1, int32_t arg2, wchar16* arg3, int32_t arg4, int64_t arg5, int32_t* arg6)
{
    bool cond:0 = arg1 - 0xfde8 <= 1;
    uint64_t rdx;
    int32_t rax_9;
    bool cond:3_1;
    
    if (arg1 > 0xdeac)
    {
        if (arg1 != 0xdead && arg1 != 0xdeae && arg1 != 0xdeaf && arg1 != 0xdeb0 && arg1 != 0xdeb1
            && arg1 != 0xdeb2 && arg1 != 0xdeb3)
        {
            rax_9 = arg1 - 0xfde8;
            cond:3_1 = arg1 == 0xfde8;
            goto label_140012319;
        }
        
        rdx = 0;
    }
    else if (arg1 == 0xdeac)
        rdx = 0;
    else
    {
        bool cond:7_1;
        
        if (arg1 <= 0xc433)
        {
            if (arg1 != 0xc433 && arg1 != 0x2a && arg1 != 0xc42c && arg1 != 0xc42d
                && arg1 != 0xc42e)
            {
                cond:7_1 = arg1 == 0xc431;
                goto label_14001231e;
            }
            
            rdx = 0;
        }
        else if (arg1 == 0xc435 || arg1 == 0xd698)
            rdx = 0;
        else
        {
            rax_9 = arg1 - 0xdeaa;
            cond:3_1 = arg1 == 0xdeaa;
        label_140012319:
            
            if (cond:3_1)
                rdx = 0;
            else
            {
                cond:7_1 = rax_9 == 1;
            label_14001231e:
                
                rdx = cond:7_1 ? 0 : arg2 & 0xffffff7f;
            }
        }
    }
    int64_t r9 = arg5;
    int32_t* r8 = arg6;
    
    if (cond:0)
        r8 = nullptr;
    
    if (cond:0)
        r9 = 0;
    
    if (cond:0 && arg6)
        *arg6 = 0;
    
    arg6 = r8;
    arg5 = r9;
    /* tailcall */
    return WideCharToMultiByte(arg1, rdx, arg3, arg4);
}

int64_t __dcrt_get_narrow_environment_from_os()
{
    PWSTR penv = GetEnvironmentStringsW();
    int64_t result = 0;
    
    if (penv)
    {
        PWSTR penv_1 = penv;
        
        if (*penv)
        {
            do
            {
                int64_t rax = -1;
                
                do
                    rax += 1;
                 while (penv_1[rax]);
                
                penv_1 = &penv_1[rax + 1];
            } while (*penv_1);
        }
        
        int64_t var_10_1 = 0;
        int64_t var_18_1 = 0;
        int32_t rbp_4 = (penv_1 - penv + 2) >> 1;
        int32_t rax_1 = __acrt_WideCharToMultiByte(0, 0, penv, rbp_4, 0, nullptr);
        int64_t r14_1 = rax_1;
        
        if (rax_1)
        {
            int64_t result_1 = _malloc_base(r14_1);
            
            if (result_1)
            {
                int64_t var_10_2 = 0;
                int64_t var_18_2 = 0;
                
                if (__acrt_WideCharToMultiByte(0, 0, penv, rbp_4, result_1, r14_1))
                {
                    _free_base(0);
                    result = result_1;
                }
                else
                    _free_base(result_1);
                
                FreeEnvironmentStringsW(penv);
                return result;
            }
            
            _free_base(0);
        }
        
        FreeEnvironmentStringsW(penv);
    }
    
    return 0;
}

uint64_t j_common_set_variable_in_environment_nolock<char>(char* arg1, int32_t arg2)
{
    /* tailcall */
    return common_set_variable_in_environment_nolock<char>(arg1, arg2);
}

uint64_t common_set_variable_in_environment_nolock<char>(char* arg1, int32_t arg2)
{
    if (arg1)
    {
        char* rdi_1 = arg1;
        char* rax_1 = sub_1400184ec(arg1, 0x3d);
        
        if (rax_1 && rax_1 != arg1)
        {
            int64_t* r14_1 = data_14002a2f8;
            int64_t rbp;
            rbp = rax_1[1];
            char arg_8 = rbp;
            
            if (r14_1 == data_14002a310)
            {
                int64_t* rax_2 = copy_environment<char>(r14_1);
                r14_1 = rax_2;
                data_14002a2f8 = rax_2;
            }
            
            int32_t rbp_1;
            
            if (r14_1)
            {
            label_1400125da:
                char* rax_11 = *r14_1;
                void* r12_2 = rax_1 - arg1;
                int64_t* rbx_1 = r14_1;
                int64_t rbx_4;
                
                while (true)
                {
                    if (!rax_11)
                    {
                        rbx_4 = -(((rbx_1 - r14_1) >> 3));
                        break;
                    }
                    
                    if (!sub_140018570(arg1, rax_11, r12_2))
                    {
                        int64_t rax_10 = *rbx_1;
                        
                        if (*(r12_2 + rax_10) == 0x3d || !*(r12_2 + rax_10))
                        {
                            rbx_4 = (rbx_1 - r14_1) >> 3;
                            break;
                        }
                    }
                    
                    rbx_1 = &rbx_1[1];
                    rax_11 = *rbx_1;
                }
                
                if (rbx_4 >= 0 && *r14_1)
                {
                    _free_base(r14_1[rbx_4]);
                    
                    if (!rbp)
                    {
                        while (r14_1[rbx_4])
                        {
                            r14_1[rbx_4] = r14_1[rbx_4 + 1];
                            rbx_4 += 1;
                        }
                        
                        void* rax_13 = _recalloc_base(r14_1, rbx_4, 8);
                        _free_base(0);
                        
                        if (rax_13)
                            data_14002a2f8 = rax_13;
                    }
                    else
                    {
                        r14_1[rbx_4] = arg1;
                    label_1400126e5:
                        rdi_1 = nullptr;
                    }
                    
                    if (arg2)
                    {
                        int64_t rbp_2 = rbp | 0xffffffffffffffff;
                        int64_t r14_3 = rbp_2;
                        
                        do
                            r14_3 += 1;
                         while (arg1[r14_3]);
                        
                        char* rax_15 = _calloc_base(r14_3 + 2, 1);
                        
                        if (!rax_15)
                        {
                            _free_base(0);
                            _free_base(rdi_1);
                            return 0;
                        }
                        
                        int32_t rax_16;
                        int64_t rdx_4;
                        rax_16 = sub_14000b5d0(rax_15, r14_3 + 2, arg1);
                        
                        if (rax_16)
                        {
                            int64_t var_48 = 0;
                            _invoke_watson();
                            /* no return */
                        }
                        
                        char* rax_18 = rax_15 - arg1;
                        char temp0_1 = arg_8;
                        arg_8 = -(arg_8);
                        *(rax_18 + rax_1) = 0;
                        
                        if (!__acrt_SetEnvironmentVariableA(rax_15, 
                            (rdx_4 - rdx_4) & (&rax_1[1] + rax_18)))
                        {
                            *sub_14000dedc() = 0x2a;
                            _free_base(rax_15);
                            _free_base(rdi_1);
                            return rbp_2;
                        }
                        
                        _free_base(rax_15);
                    }
                    
                    _free_base(rdi_1);
                    return 0;
                }
                
                if (rbp)
                {
                    int64_t rbx_7 = -(rbx_4);
                    
                    if (rbx_7 + 2 < rbx_7 || rbx_7 + 2 >= 0x1fffffffffffffff)
                        rbp_1 = rbp | 0xffffffff;
                    else
                    {
                        void* rax_14 = _recalloc_base(r14_1, rbx_7 + 2, 8);
                        _free_base(0);
                        
                        if (rax_14)
                        {
                            *(rax_14 + (rbx_7 << 3)) = arg1;
                            *(rax_14 + (rbx_7 << 3) + 8) = 0;
                            data_14002a2f8 = rax_14;
                            goto label_1400126e5;
                        }
                        
                        rbp_1 = rbp | 0xffffffff;
                    }
                }
                else
                    rbp_1 = 0;
            }
            else if (arg2 && data_14002a300)
            {
                if (__dcrt_get_or_create_narrow_environment_nolock())
                {
                    r14_1 = data_14002a2f8;
                    
                    if (r14_1 == data_14002a310)
                    {
                        int64_t* rax_6 = copy_environment<char>(r14_1);
                        r14_1 = rax_6;
                        data_14002a2f8 = rax_6;
                    }
                    
                    goto label_1400125d1;
                }
                
                *sub_14000dedc() = 0x16;
                rbp_1 = rbp | 0xffffffff;
            }
            else if (!rbp)
                rbp_1 = 0;
            else
            {
                data_14002a2f8 = _calloc_base(1, 8);
                _free_base(0);
                r14_1 = data_14002a2f8;
                
                if (!r14_1)
                    rbp_1 = rbp | 0xffffffff;
                else
                {
                    if (data_14002a300)
                        goto label_1400125d1;
                    
                    data_14002a300 = _calloc_base(1, 8);
                    _free_base(0);
                    
                    if (!data_14002a300)
                        rbp_1 = rbp | 0xffffffff;
                    else
                    {
                        r14_1 = data_14002a2f8;
                    label_1400125d1:
                        
                        if (r14_1)
                            goto label_1400125da;
                        
                        rbp_1 = rbp | 0xffffffff;
                    }
                }
            }
            
            _free_base(arg1);
            return rbp_1;
        }
        
        *sub_14000dedc() = 0x16;
        _free_base(arg1);
    }
    else
        *sub_14000dedc() = 0x16;
    
    return -1;
}

int64_t copy_environment<char>(int64_t* arg1)
{
    int64_t* rdi = arg1;
    
    if (!arg1)
        return 0;
    
    int64_t rcx = 0;
    int64_t* rax_1 = rdi;
    
    if (*rdi)
    {
        do
        {
            rcx += 1;
            rax_1 = &rax_1[1];
        } while (*rax_1);
    }
    
    int64_t result = _calloc_base(rcx + 1, 8);
    
    if (!result)
    {
    label_1400128b7:
        abort();
        /* no return */
    }
    
    char* i = *rdi;
    
    if (i)
    {
        void* r14_2 = result - rdi;
        
        do
        {
            int64_t rsi_1 = -1;
            
            do
                rsi_1 += 1;
             while (i[rsi_1]);
            
            *(r14_2 + rdi) = _calloc_base(rsi_1 + 1, 1);
            _free_base(0);
            char* rcx_3 = *(r14_2 + rdi);
            
            if (!rcx_3)
                goto label_1400128b7;
            
            if (sub_14000b5d0(rcx_3, rsi_1 + 1, *rdi))
            {
                int64_t var_18 = 0;
                _invoke_watson();
                /* no return */
            }
            
            rdi = &rdi[1];
            i = *rdi;
        } while (i);
    }
    
    _free_base(0);
    return result;
}

int64_t _get_osfhandle(int32_t arg1)
{
    if (arg1 != 0xfffffffe)
    {
        if (arg1 >= 0 && arg1 < data_14002ab00)
        {
            int64_t rcx = arg1;
            uint64_t rdx_1 = (rcx & 0x3f) * 9;
            int64_t rax_5 = (&data_14002a700)[rcx >> 6];
            
            if (*(rax_5 + (rdx_1 << 3) + 0x38) & 1)
                return *(rax_5 + (rdx_1 << 3) + 0x28);
        }
        
        *sub_14000df00() = 0;
        *sub_14000dedc() = 9;
        _invalid_parameter_noinfo();
    }
    else
    {
        *sub_14000df00() = 0;
        *sub_14000dedc() = 9;
    }
    
    return -1;
}

int64_t _free_osfhnd(int32_t arg1)
{
    int64_t rbx = arg1;
    
    if (arg1 >= 0 && rbx < data_14002ab00)
    {
        uint64_t rsi_2 = rbx >> 6;
        uint64_t rdi_1 = (rbx & 0x3f) * 9;
        int64_t rax_3 = (&data_14002a700)[rsi_2];
        
        if (*(rax_3 + (rdi_1 << 3) + 0x38) & 1 && *(rax_3 + (rdi_1 << 3) + 0x28) != -1)
        {
            int32_t rax_4 = sub_14000aef4();
            
            if (rax_4 == 1)
            {
                if (!rbx)
                    SetStdHandle(STD_INPUT_HANDLE, nullptr);
                else if (rbx == rax_4)
                    SetStdHandle(STD_OUTPUT_HANDLE, nullptr);
                else if (rbx - rax_4 == rax_4)
                    SetStdHandle(STD_ERROR_HANDLE, nullptr);
            }
            
            *((&data_14002a700)[rsi_2] + (rdi_1 << 3) + 0x28) = -1;
            return 0;
        }
    }
    
    *sub_14000dedc() = 9;
    *sub_14000df00() = 0;
    return 0xffffffff;
}

void* __acrt_lowio_create_handle_array()
{
    void* result_1 = _calloc_base(0x40, 0x48);
    void* result = nullptr;
    
    if (result_1)
    {
        if (result_1 != result_1 + 0x1200)
        {
            int64_t* rdi_1 = result_1 + 0x30;
            
            do
            {
                InitializeCriticalSectionEx(&rdi_1[-6], 0xfa0, 0);
                rdi_1[-1] = -1;
                void* rcx_2 = rdi_1 + 0xe;
                *(rdi_1 + 0xd) &= 0xf8;
                int32_t i = 0;
                *rdi_1 = 0;
                rdi_1[1] = 0xa0a0000;
                *(rdi_1 + 0xc) = 0xa;
                
                do
                {
                    *rcx_2 = 0;
                    i += 1;
                    rcx_2 += 1;
                } while (i < 5);
                
                rdi_1 = &rdi_1[9];
            } while (&rdi_1[-6] != result_1 + 0x1200);
        }
        
        result = result_1;
    }
    
    _free_base(0);
    return result;
}

void __acrt_lowio_destroy_handle_array(CRITICAL_SECTION* arg1)
{
    if (!arg1)
        return;
    
    CRITICAL_SECTION* lpCriticalSection = arg1;
    
    if (arg1 != arg1 + 0x1200)
    {
        do
        {
            DeleteCriticalSection(lpCriticalSection);
            lpCriticalSection += 0x48;
        } while (lpCriticalSection != arg1 + 0x1200);
    }
    
    _free_base(arg1);
}

uint64_t __acrt_lowio_ensure_fh_exists(int32_t arg1)
{
    if (arg1 >= 0x2000)
    {
        *sub_14000dedc() = 9;
        _invalid_parameter_noinfo();
        return 9;
    }
    
    int32_t rdi_1 = 0;
    __vcrt_unlock(7);
    int64_t rbx_1 = 0;
    int32_t rax_2 = data_14002ab00;
    
    while (true)
    {
        int64_t var_18_1 = rbx_1;
        
        if (arg1 < rax_2)
            break;
        
        if (!(&data_14002a700)[rbx_1])
        {
            void* rax_3 = __acrt_lowio_create_handle_array();
            (&data_14002a700)[rbx_1] = rax_3;
            
            if (!rax_3)
            {
                rdi_1 = rax_3 + 0xc;
                break;
            }
            
            rax_2 = data_14002ab00 + 0x40;
            data_14002ab00 = rax_2;
        }
        
        rbx_1 += 1;
    }
    
    __vcrt_lock(7);
    return rdi_1;
}

int64_t __acrt_lowio_unlock_fh(int32_t arg1)
{
    int64_t rdx_2 = arg1;
    /* tailcall */
    return EnterCriticalSection((&data_14002a700)[rdx_2 >> 6] + (rdx_2 & 0x3f) * 0x48);
}

int64_t sub_140012bbc(int32_t arg1)
{
    int64_t rdx_2 = arg1;
    /* tailcall */
    return LeaveCriticalSection((&data_14002a700)[rdx_2 >> 6] + (rdx_2 & 0x3f) * 0x48);
}

int64_t sub_140012be4()
{
    if (!data_14002ab98)
        data_14002ab98 = 0x4000;
    
    return 0;
}

uint64_t _fwrite_nolock_internal(int16_t* arg1, int64_t arg2, uint64_t arg3, void** arg4, int64_t* arg5)
{
    int16_t* r13 = arg1;
    
    if (arg2 && arg3)
    {
        void* var_38_1;
        int64_t* var_30_1;
        int64_t* rax_1;
        
        if (arg4)
        {
            if (arg1)
            {
                if (arg3 > -1 / arg2)
                    goto label_140012c33;
                
                int32_t r15_1;
                
                if (!(*(arg4 + 0x14) & 0x4c0))
                    r15_1 = 0x1000;
                else
                    r15_1 = arg4[4];
                
                void* rdi_2 = arg2 * arg3;
                void* rsi_1 = rdi_2;
                bool cond:3_1 = !rdi_2;
                
                while (true)
                {
                    if (cond:3_1)
                        return arg3;
                    
                    int32_t rax_6;
                    
                    if (*(arg4 + 0x14) & 0xc0)
                        rax_6 = arg4[2];
                    
                    void* r14_1;
                    
                    if (!(*(arg4 + 0x14) & 0xc0) || !rax_6)
                    {
                        uint64_t r14_2 = r15_1;
                        
                        if (rsi_1 < r14_2)
                        {
                            if (__acrt_stdio_flush_and_write_narrow_nolock(*r13, arg4, arg5)
                                    == 0xffffffff)
                                break;
                            
                            r15_1 = arg4[4];
                            rsi_1 -= 1;
                            
                            if (r15_1 <= 0)
                            {
                                r15_1 = 1;
                                r14_1 = 1;
                            }
                            else
                                r14_1 = 1;
                            
                            goto label_140012dfa;
                        }
                        
                        if (*(arg4 + 0x14) & 0xc0 && __acrt_stdio_flush_nolock(arg4, arg5))
                            break;
                        
                        void* rax_12 = rsi_1;
                        
                        if (r15_1)
                            rax_12 = rsi_1 - COMBINE(0, rax_12) % r14_2;
                        
                        int32_t r14_3 = -2;
                        
                        if (rax_12 < 0xfffffffe)
                            r14_3 = rax_12;
                        
                        int32_t rax_14 = _write_internal(_fileno(arg4), r13, r14_3, arg5);
                        
                        if (rax_14 != 0xffffffff)
                        {
                            int32_t rcx_4 = rax_14;
                            
                            if (rax_14 > r14_3)
                                rcx_4 = r14_3;
                            
                            r14_1 = rcx_4;
                            rsi_1 -= r14_1;
                            
                            if (rax_14 >= r14_3)
                            {
                            label_140012dfa:
                                r13 += r14_1;
                                cond:3_1 = !rsi_1;
                                continue;
                            }
                        }
                    }
                    else if (rax_6 >= 0)
                    {
                        if (*(arg4 + 0x14) & 1)
                            break;
                        
                        int64_t rax_8 = arg4[2];
                        r14_1 = rsi_1;
                        
                        if (rsi_1 >= rax_8)
                            r14_1 = rax_8;
                        
                        sub_14001cb40(*arg4, r13, r14_1);
                        arg4[2] -= r14_1;
                        rsi_1 -= r14_1;
                        *arg4 += r14_1;
                        goto label_140012dfa;
                    }
                    *(arg4 + 0x14) |= 0x10;
                    break;
                }
                
                return COMBINE(0, rdi_2 - rsi_1) / arg2;
            }
            
            rax_1 = arg5;
            var_30_1 = rax_1;
            int64_t var_38;
            var_38_1 = var_38 & arg1;
        }
        else
        {
        label_140012c33:
            rax_1 = arg5;
            var_30_1 = rax_1;
            var_38_1 = nullptr;
        }
        
        rax_1[6] = 1;
        *(rax_1 + 0x2c) = 0x16;
        _invalid_parameter_internal(0, 0, 0, 0, var_38_1, var_30_1);
    }
    
    return 0;
}

int64_t sub_140012e10(int32_t* arg1, int64_t arg2, void* arg3, int64_t* arg4)
{
    int32_t result = __InternalCxxFrameHandler(arg1, arg2, arg3, arg4);
    
    if (arg1[1] & 0x66 || *arg1 != 0xe06d7363 || result != 1)
        return result;
    
    *(__vcrt_getptd() + 0x20) = arg1;
    *(__vcrt_getptd() + 0x28) = arg3;
    sub_14000b220();
    /* no return */
}

int64_t calloc(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return _calloc_base(arg1, arg2);
}

int64_t __vcrt_FlsAlloc(int64_t arg1)
{
    int64_t rax = try_get_function(0, "FlsAlloc", &data_1400203e8, &data_1400203f0);
    
    if (!rax)
        /* tailcall */
        return TlsAlloc();
    
    /* tailcall */
    return rax(arg1);
}

int64_t __vcrt_FlsFree(uint32_t arg1)
{
    int64_t rax = try_get_function(1, "FlsFree", &data_1400203f0, &data_1400203f8);
    
    if (!rax)
        /* tailcall */
        return TlsFree(arg1);
    
    /* tailcall */
    return rax(arg1);
}

int64_t __vcrt_FlsGetValue(uint32_t arg1)
{
    int64_t rax = try_get_function(2, "FlsGetValue", &data_1400203f8, &data_140020400);
    
    if (!rax)
        /* tailcall */
        return TlsGetValue(arg1);
    
    /* tailcall */
    return rax(arg1);
}

int64_t __vcrt_FlsSetValue(uint32_t arg1, int64_t arg2)
{
    int64_t rax = try_get_function(3, "FlsSetValue", &data_140020400, &data_140020408);
    
    if (!rax)
        return TlsSetValue(arg1, arg2);
    
    return rax(arg1, arg2);
}

int64_t __vcrt_InitializeCriticalSectionEx(CRITICAL_SECTION* arg1, uint32_t arg2, int32_t arg3)
{
    int64_t rax =
        try_get_function(4, "InitializeCriticalSectionEx", &data_140020408, &data_140020410);
    
    if (!rax)
        return InitializeCriticalSectionAndSpinCount(arg1, arg2);
    
    return rax(arg1, arg2, arg3);
}

int64_t try_get_function(int32_t arg1, PSTR arg2, int32_t* arg3, int64_t arg4)
{
    uint64_t rdi = arg1;
    int32_t* rbp = arg3;
    int64_t result = *((rdi << 3) + 0x14002abb8);
    
    if (result != -1)
    {
        if (result)
            return result;
        
        if (arg3 != arg4)
        {
            HMODULE rbx_1;
            
            while (true)
            {
                uint64_t rsi_1 = *rbp;
                rbx_1 = *((rsi_1 << 3) + 0x14002aba0);
                
                if (!rbx_1)
                {
                    int16_t* lpLibFileName = (&data_1400203d0)[rsi_1];
                    HMODULE rax =
                        LoadLibraryExW(lpLibFileName, nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
                    rbx_1 = rax;
                    
                    if (rax)
                    {
                    label_140013113:
                        int64_t temp0_3 = *((rsi_1 << 3) + 0x14002aba0);
                        *((rsi_1 << 3) + 0x14002aba0) = rbx_1;
                        
                        if (temp0_3)
                            FreeLibrary(rbx_1);
                        
                        break;
                    }
                    
                    if (GetLastError() != ERROR_INVALID_PARAMETER)
                    {
                        *((rsi_1 << 3) + 0x14002aba0);
                        *((rsi_1 << 3) + 0x14002aba0) = -1;
                    }
                    else if (!sub_140010e30(lpLibFileName, u"api-ms-", rbx_1 + 7))
                    {
                        *((rsi_1 << 3) + 0x14002aba0);
                        *((rsi_1 << 3) + 0x14002aba0) = -1;
                    }
                    else
                    {
                        HMODULE rax_3 = LoadLibraryExW(lpLibFileName, nullptr, 0);
                        rbx_1 = rax_3;
                        
                        if (rax_3)
                            goto label_140013113;
                        
                        *((rsi_1 << 3) + 0x14002aba0);
                        *((rsi_1 << 3) + 0x14002aba0) = -1;
                    }
                }
                else if (rbx_1 != -1)
                    break;
                
                rbp = &rbp[1];
                
                if (rbp == arg4)
                    goto label_1400130e2;
            }
            
            result = GetProcAddress(rbx_1, arg2);
            
            if (result)
            {
                *((rdi << 3) + 0x14002abb8);
                *((rdi << 3) + 0x14002abb8) = result;
                return result;
            }
        }
        
    label_1400130e2:
        *((rdi << 3) + 0x14002abb8);
        *((rdi << 3) + 0x14002abb8) = -1;
    }
    
    return 0;
}

void j_sub_14000d150(int64_t arg1)
{
    /* tailcall */
    return j_sub_14000d150(arg1);
}

uint64_t sub_140013150(int16_t* arg1)
{
    if (arg1)
    {
        int32_t rbx_1 = 0;
        int32_t rsi_1 = 0xe3;
        
        do
        {
            int32_t temp0_1;
            int32_t temp1_1;
            temp0_1 = HIGHD(rsi_1 + rbx_1);
            temp1_1 = LOWD(rsi_1 + rbx_1);
            int64_t rbp_1 = (temp1_1 - temp0_1) >> 1;
            int64_t r14_2 = rbp_1 * 2;
            int32_t rax_5 = sub_1400179e0(arg1, (&data_140021250)[r14_2], 0x55);
            
            if (!rax_5)
            {
                int64_t rax_7 = *((r14_2 << 3) + 0x140021258);
                
                if (rax_7 >= 0 && rax_7 < 0xe4)
                    return *(rax_7 * 0x10 + &data_140020410);
                
                break;
            }
            
            int32_t rcx_1 = rbp_1 - 1;
            
            if (rax_5 >= 0)
                rcx_1 = rsi_1;
            
            rsi_1 = rcx_1;
            
            if (rax_5 >= 0)
                rbx_1 = rbp_1 + 1;
        } while (rbx_1 <= rsi_1);
    }
    
    return 0;
}

int64_t __acrt_LCMapStringA(int128_t* arg1, int64_t arg2, int32_t arg3, char* arg4, int32_t arg5, int64_t arg6, int32_t arg7, uint32_t arg8, int32_t arg9)
{
    void* var_28;
    _LocaleUpdate::_LocaleUpdate(&var_28, arg1);
    void var_20;
    int64_t result =
        __acrt_LCMapStringA_stat(&var_20, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    char var_10;
    
    if (var_10)
    {
        void* rcx_2 = var_28;
        *(rcx_2 + 0x3a8) &= 0xfffffffd;
    }
    
    return result;
}

int64_t __acrt_LCMapStringA_stat(int64_t* arg1, int64_t arg2, int32_t arg3, char* arg4, int32_t arg5, int64_t arg6, int32_t arg7, uint32_t arg8, int32_t arg9)
{
    int64_t __saved_rbp_1;
    int64_t __saved_rbp = __saved_rbp_1;
    int64_t __saved_r12_1;
    int64_t __saved_r12 = __saved_r12_1;
    int64_t __saved_r13_1;
    int64_t __saved_r13 = __saved_r13_1;
    int64_t __saved_r14_1;
    int64_t __saved_r14 = __saved_r14_1;
    int64_t __saved_r15_1;
    int64_t __saved_r15 = __saved_r15_1;
    void var_88;
    void* rsp_1 = &var_88;
    int64_t __saved_rbx_1;
    int64_t __saved_rbx = __saved_rbx_1;
    int64_t __saved_rsi_1;
    int64_t __saved_rsi = __saved_rsi_1;
    int64_t __saved_rdi_1;
    int64_t __saved_rdi = __saved_rdi_1;
    void var_38;
    int64_t rax_1 = __security_cookie ^ &var_38;
    int64_t rdi = arg5;
    uint8_t* rsi = arg4;
    int64_t r13 = arg2;
    
    if (rdi > 0)
    {
        arg2 = rdi;
        int32_t rax_2 = __strncnt(arg4, arg2);
        bool cond:0_1 = rax_2 < rdi;
        rdi = rax_2 + 1;
        
        if (!cond:0_1)
            rdi = rax_2;
    }
    
    uint32_t r14 = arg8;
    
    if (!r14)
        r14 = *(*arg1 + 0xc);
    
    int32_t temp0 = arg9;
    arg9 = -(arg9);
    int32_t var_60 = 0;
    int64_t var_68 = 0;
    int32_t result = __acrt_MultiByteToWideChar(r14, ((arg2 - arg2) & 8) + 1, rsi, rdi);
    int64_t result_1 = result;
    
    if (result)
    {
        int64_t rax_5 = result_1 * 2;
        uint64_t rax_7 = (rax_5 - rax_5) & (rax_5 + 0x10);
        void* rbx_1;
        int64_t rsi_1;
        
        if (rax_7)
        {
            if (rax_7 > 0x400)
            {
                void* rax_9 = _malloc_base(rax_7);
                rbx_1 = rax_9;
                
                if (rax_9)
                {
                    *rax_9 = 0xdddd;
                    rbx_1 += 0x10;
                }
            }
            else
            {
                int64_t rcx_3 = rax_7 + 0xf;
                
                if (rcx_3 <= rax_7)
                    rcx_3 = 0xffffffffffffff0;
                
                int64_t rcx_4 = rcx_3 & 0xfffffffffffffff0;
                __chkstk(rcx_4);
                rsp_1 = &var_88 - rcx_4;
                rbx_1 = rsp_1 + 0x50;
                
                if (!rbx_1)
                    goto label_140013581;
                
                *rbx_1 = 0xcccc;
                rbx_1 += 0x10;
            }
            
            if (!rbx_1)
                goto label_140013581;
            
            *(rsp_1 + 0x28) = result_1;
            *(rsp_1 + 0x20) = rbx_1;
            
            if (!__acrt_MultiByteToWideChar(r14, MB_PRECOMPOSED, rsi, rdi))
                goto label_140013581;
            
            __builtin_memset(rsp_1 + 0x30, 0, 0x18);
            *(rsp_1 + 0x28) = 0;
            *(rsp_1 + 0x20) = 0;
            int32_t rax_11 = sub_14000b888(r13, arg3, rbx_1, result_1);
            rsi_1 = rax_11;
            
            if (!rax_11)
                goto label_140013581;
            
            if (0x400 & arg3)
            {
                if (!arg7)
                    goto label_14001358c;
                
                if (rsi_1 > arg7)
                    goto label_140013581;
                
                __builtin_memset(rsp_1 + 0x30, 0, 0x18);
                *(rsp_1 + 0x28) = arg7;
                *(rsp_1 + 0x20) = arg6;
                int32_t rax_14 = sub_14000b888(r13, arg3, rbx_1, result_1);
                rsi_1 = rax_14;
                
                if (rax_14)
                    goto label_14001358c;
                
                goto label_140013581;
            }
            
            int64_t rcx_10 = rsi_1 * 2;
            uint64_t rcx_12 = (rcx_10 - rcx_10) & (rcx_10 + 0x10);
            void* rdi_1;
            
            if (!rcx_12)
            {
                rdi_1 = nullptr;
            label_140013564:
                
                if (!rdi_1 || *(rdi_1 - 0x10) != 0xdddd)
                    rsi_1 = 0;
                else
                {
                    _free_base(rdi_1 - 0x10);
                    rsi_1 = 0;
                }
            }
            else if (rcx_12 > 0x400)
            {
                void* rax_18 = _malloc_base(rcx_12);
                rdi_1 = rax_18;
                
                if (rax_18)
                {
                    *rax_18 = 0xdddd;
                label_1400134ca:
                    rdi_1 += 0x10;
                }
                
                if (!rdi_1)
                    rsi_1 = 0;
                else
                {
                    __builtin_memset(rsp_1 + 0x30, 0, 0x18);
                    *(rsp_1 + 0x28) = rsi_1;
                    *(rsp_1 + 0x20) = rdi_1;
                    int64_t rdx_6 = 0;
                    
                    if (!sub_14000b888(r13, arg3, rbx_1, result_1))
                        goto label_140013564;
                    
                    uint64_t r9_5 = rsi_1;
                    *(rsp_1 + 0x38) = 0;
                    *(rsp_1 + 0x30) = 0;
                    uint64_t rcx_14 = r14;
                    
                    if (!arg7)
                    {
                        *(rsp_1 + 0x28) = 0;
                        *(rsp_1 + 0x20) = 0;
                        int32_t rax_21 = __acrt_WideCharToMultiByte(rcx_14, rdx_6, rdi_1, r9_5);
                        rsi_1 = rax_21;
                        
                        if (rax_21)
                            goto label_140013552;
                        
                        goto label_140013564;
                    }
                    
                    *(rsp_1 + 0x28) = arg7;
                    *(rsp_1 + 0x20) = arg6;
                    int32_t rax_23 = __acrt_WideCharToMultiByte(rcx_14, rdx_6, rdi_1, r9_5);
                    rsi_1 = rax_23;
                    
                    if (rax_23)
                    {
                    label_140013552:
                        
                        if (*(rdi_1 - 0x10) == 0xdddd)
                            _free_base(rdi_1 - 0x10);
                    }
                    else if (*(rdi_1 - 0x10) != 0xdddd)
                        rsi_1 = 0;
                    else
                    {
                        _free_base(rdi_1 - 0x10);
                        rsi_1 = 0;
                    }
                }
            }
            else
            {
                int64_t rax_16 = rcx_12 + 0xf;
                
                if (rax_16 <= rcx_12)
                    rax_16 = 0xffffffffffffff0;
                
                int64_t rax_17 = rax_16 & 0xfffffffffffffff0;
                __chkstk(rax_17);
                rsp_1 -= rax_17;
                rdi_1 = rsp_1 + 0x50;
                
                if (rdi_1)
                {
                    *rdi_1 = 0xcccc;
                    goto label_1400134ca;
                }
                
                rsi_1 = 0;
            }
            goto label_14001358c;
        }
        
        rbx_1 = nullptr;
    label_140013581:
        rsi_1 = 0;
        
        if (rbx_1)
        {
        label_14001358c:
            
            if (*(rbx_1 - 0x10) == 0xdddd)
                _free_base(rbx_1 - 0x10);
        }
        
        result = rsi_1;
    }
    
    __security_check_cookie(rax_1 ^ &var_38);
    return result;
}

uint64_t sub_1400135c4()
{
    return __acrt_initialize_multibyte() ^ 1;
}

uint64_t _commit(int32_t arg1)
{
    int32_t arg_8 = arg1;
    int64_t rdx = arg1;
    
    if (rdx != 0xfffffffe)
    {
        if (arg1 >= 0 && rdx < data_14002ab00
            && *((&data_14002a700)[rdx >> 6] + (rdx & 0x3f) * 0x48 + 0x38) & 1)
        {
            int32_t arg_18 = rdx;
            int32_t arg_20 = rdx;
            int32_t* var_18 = &arg_8;
            void arg_10;
            return __crt_seh_guarded_call<class <lambda_a37b2b86f63e897a80ea819b0eb08c01>,class <lambda_38ce7e780aa69e748d6df282ebc68efe>& __ptr64,class <lambda_99fb1378e971ab6e7edea83e3a7a83a2>,int32_t>::operator()<class <lambda_a37b2b86f63e897a80ea819b0eb08c01>,class <lambda_38ce7e780aa69e748d6df282ebc68efe>& __ptr64,class <lambda_99fb1378e971ab6e7edea83e3a7a83a2> >(
                &arg_10, &arg_20, &var_18, &arg_18);
        }
        
        *sub_14000dedc() = 9;
        _invalid_parameter_noinfo();
    }
    else
        *sub_14000dedc() = 9;
    
    return 0xffffffff;
}

uint64_t __crt_seh_guarded_call<class <lambda_a37b2b86f63e897a80ea819b0eb08c01>,class <lambda_38ce7e780aa69e748d6df282ebc68efe>& __ptr64,class <lambda_99fb1378e971ab6e7edea83e3a7a83a2>,int32_t>::operator()<class <lambda_a37b2b86f63e897a80ea819b0eb08c01>,class <lambda_38ce7e780aa69e748d6df282ebc68efe>& __ptr64,class <lambda_99fb1378e971ab6e7edea83e3a7a83a2> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __acrt_lowio_unlock_fh(*arg2);
    int64_t rcx_1 = **arg3;
    int32_t rbx_1;
    
    if (!(*((&data_14002a700)[rcx_1 >> 6] + (rcx_1 & 0x3f) * 0x48 + 0x38) & 1))
    {
        *sub_14000dedc() = 9;
        rbx_1 = -1;
    }
    else
    {
        rbx_1 = 0;
        
        if (!FlushFileBuffers(_get_osfhandle(rcx_1)))
        {
            *sub_14000df00() = GetLastError();
            *sub_14000dedc() = 9;
            rbx_1 = -1;
        }
    }
    
    sub_140012bbc(*arg4);
    return rbx_1;
}

uint64_t sub_1400136f8(int32_t arg1, int16_t* arg2, int32_t arg3, int64_t* arg4)
{
    int32_t rdi = 0;
    uint64_t r14 = arg3;
    int64_t r13 = arg1;
    
    if (arg3)
    {
        char var_78_1;
        uint64_t rax_2;
        int64_t rcx;
        int64_t r12_2;
        uint64_t r15_1;
        
        if (arg2)
        {
            r12_2 = r13 >> 6;
            r15_1 = (r13 & 0x3f) * 9;
            rcx = (&data_14002a700)[r12_2];
            rax_2 = *(rcx + (r15_1 << 3) + 0x39);
            var_78_1 = rax_2;
            rax_2 -= 1;
        }
        
        if (!arg2 || (rax_2 <= 1 && !(~r14 & 1)))
        {
            arg4[7] = 1;
            *(arg4 + 0x34) = 0;
            arg4[6] = 1;
            *(arg4 + 0x2c) = 0x16;
            _invalid_parameter_internal(0, 0, 0, 0, 0, arg4);
            return 0xffffffff;
        }
        
        if (*(rcx + (r15_1 << 3) + 0x38) & 0x20)
            j_common_lseek_nolock<int64_t>(r13, 0, FILE_END, arg4);
        
        int64_t var_60_1 = 0;
        int64_t var_70;
        int64_t* rax_14;
        
        if (!_isatty(r13) || *((&data_14002a700)[r12_2] + (r15_1 << 3) + 0x38) >= 0)
        {
        label_1400138ea:
            int64_t rdx_2 = (&data_14002a700)[r13 >> 6];
            uint64_t rcx_13 = (r13 & 0x3f) * 9;
            
            if (*(rdx_2 + (rcx_13 << 3) + 0x38) >= 0)
            {
                HANDLE hFile = *(rdx_2 + (rcx_13 << 3) + 0x28);
                var_70 = 0;
                int32_t var_68_1 = 0;
                
                if (!WriteFile(hFile, arg2, r14, &*var_70[4], nullptr))
                    var_70 = GetLastError();
                
                rdi = var_68_1;
                var_60_1 = var_70;
            }
            else
            {
                int32_t rcx_14 = var_78_1;
                
                if (!rcx_14)
                {
                    rax_14 = sub_140013fdc(&var_70, r13, arg2, r14);
                label_1400138cd:
                    rdi = rax_14[1];
                    var_60_1 = *rax_14;
                }
                else
                {
                    if (rcx_14 == 1)
                    {
                        rax_14 = sub_140014200(&var_70, r13, arg2, r14);
                        goto label_1400138cd;
                    }
                    
                    if (rcx_14 == 2)
                    {
                        rax_14 = sub_1400140e4(&var_70, r13, arg2, r14);
                        goto label_1400138cd;
                    }
                }
            }
        }
        else
        {
            if (!arg4[5])
                __crt_cached_ptd_host::update_locale_slow(arg4);
            
            if (!*(arg4[3] + 0x138) && !*((&data_14002a700)[r12_2] + (r15_1 << 3) + 0x39))
                goto label_1400138ea;
            
            enum CONSOLE_MODE mode[0x4];
            mode[0] = 0;
            
            if (!GetConsoleMode(*((&data_14002a700)[r12_2] + (r15_1 << 3) + 0x28), &mode))
                goto label_1400138ea;
            
            int32_t rcx_6 = var_78_1;
            
            if (!rcx_6)
            {
                rax_14 = sub_140013b48(&var_70, r13, arg2, r14, arg4);
                goto label_1400138cd;
            }
            
            if (rcx_6 == 1 || rcx_6 == 2)
            {
                void* r12_3 = arg2 + r14;
                var_70 = 0;
                int16_t* r15_2 = arg2;
                
                if (arg2 < r12_3)
                {
                    int32_t var_6c;
                    int32_t r14_1 = var_6c;
                    
                    while (true)
                    {
                        int16_t rax_10 = *r15_2;
                        var_78_1 = rax_10;
                        int16_t rcx_9 = var_78_1;
                        
                        if (sub_1400199a8(rax_10) == rcx_9)
                        {
                            r14_1 += 2;
                            int32_t var_6c_1 = r14_1;
                            
                            if (rcx_9 != 0xa)
                                goto label_14001389a;
                            
                            if (sub_1400199a8(0xd) == 0xd)
                            {
                                r14_1 += 1;
                                int32_t var_6c_2 = r14_1;
                                rdi += 1;
                            label_14001389a:
                                r15_2 = &r15_2[1];
                                
                                if (r15_2 >= r12_3)
                                    break;
                                
                                continue;
                            }
                        }
                        
                        var_70 = GetLastError();
                        break;
                    }
                }
                
                var_60_1 = var_70;
            }
        }
        
        if (var_60_1 >> 0x20)
            return *var_60_1[4] - rdi;
        
        int32_t rax_21 = var_60_1;
        
        if (rax_21)
        {
            if (rax_21 != 5)
                __acrt_errno_map_os_error_ptd(var_60_1, arg4);
            else
            {
                arg4[6] = 1;
                *(arg4 + 0x2c) = 9;
                arg4[7] = 1;
                *(arg4 + 0x34) = rax_21;
            }
            
            return 0xffffffff;
        }
        
        if (!(*((&data_14002a700)[r13 >> 6] + (r13 & 0x3f) * 0x48 + 0x38) & 0x40) || *arg2 != 0x1a)
        {
            *(arg4 + 0x34) = 0;
            arg4[6] = 1;
            *(arg4 + 0x2c) = 0x1c;
            arg4[7] = 1;
            return 0xffffffff;
        }
    }
    
    return 0;
}

uint64_t _write_internal(int32_t arg1, int16_t* arg2, int32_t arg3, int64_t* arg4)
{
    int32_t arg_8 = arg1;
    int64_t rsi = arg1;
    
    if (rsi != 0xfffffffe)
    {
        int32_t rax_2;
        
        if (arg1 < 0 || rsi >= data_14002ab00)
            rax_2 = 0;
        else
            rax_2 = 1;
        
        if (rax_2)
        {
            int64_t r15_2 = rsi >> 6;
            uint64_t r12_1 = (rsi & 0x3f) * 9;
            
            if (*((&data_14002a700)[r15_2] + (r12_1 << 3) + 0x38) & 1)
            {
                __acrt_lowio_unlock_fh(rsi);
                int32_t r14_1 = -1;
                
                if (*((&data_14002a700)[r15_2] + (r12_1 << 3) + 0x38) & 1)
                    r14_1 = sub_1400136f8(rsi, arg2, arg3, arg4);
                else
                {
                    arg4[6] = 1;
                    *(arg4 + 0x2c) = 9;
                    arg4[7] = 1;
                    *(arg4 + 0x34) = 0;
                }
                
                sub_140012bbc(rsi);
                return r14_1;
            }
        }
        
        arg4[7] = 1;
        *(arg4 + 0x34) = 0;
        arg4[6] = 1;
        *(arg4 + 0x2c) = 9;
        _invalid_parameter_internal(0, 0, 0, 0, 0, arg4);
    }
    else
    {
        arg4[7] = 1;
        *(arg4 + 0x34) = 0;
        arg4[6] = 1;
        *(arg4 + 0x2c) = 9;
    }
    
    return 0xffffffff;
}

int64_t* sub_140013b48(int64_t* arg1, int32_t arg2, char* arg3, int32_t arg4, int64_t* arg5)
{
    int64_t var_60 = -2;
    void var_108;
    int64_t rax_1 = __security_cookie ^ &var_108;
    char* rsi = arg3;
    int64_t r14 = arg2;
    int64_t r13_1 = r14 >> 6;
    int64_t var_90 = r13_1;
    uint64_t r15 = (r14 & 0x3f) * 9;
    HANDLE hFile = *((&data_14002a700)[r13_1] + (r15 << 3) + 0x28);
    void* r12_1 = &arg3[arg4];
    uint32_t rax_6 = GetConsoleOutputCP();
    int32_t rdi = 0;
    int64_t* r10 = arg5;
    
    if (!r10[5])
    {
        __crt_cached_ptd_host::update_locale_slow(r10);
        r10 = arg5;
    }
    
    int32_t rcx_2 = *(r10[3] + 0xc);
    int32_t var_9c = rcx_2;
    *arg1 = 0;
    arg1[1] = 0;
    
    if (arg3 < r12_1)
    {
        int64_t r11_2 = r14 >> 6;
        int64_t var_68_1 = r11_2;
        int32_t rdx = 0;
        
        while (true)
        {
            BOOL rax_7;
            rax_7 = *rsi;
            uint8_t buffer = rax_7;
            int32_t var_c4 = 0;
            int32_t r12_2 = 1;
            
            if (rcx_2 != 0xfde9)
            {
                int64_t r8_4 = (&data_14002a700)[r13_1];
                rcx_2 = *(r8_4 + (r15 << 3) + 0x3d);
                char* rdx_8;
                int64_t r8_5;
                
                if (!(rcx_2 & 4))
                {
                    uint64_t r9_4 = *rsi;
                    
                    if (*(*r10[3] + (r9_4 << 1)) >= 0)
                    {
                        r8_5 = 1;
                        rdx_8 = rsi;
                        goto label_140013e42;
                    }
                    
                    if (&rsi[1] >= r12_1)
                    {
                        *(r8_4 + (r15 << 3) + 0x3e) = r9_4;
                        int64_t rax_25 = (&data_14002a700)[r13_1];
                        *(rax_25 + (r15 << 3) + 0x3d) |= 4;
                        *(arg1 + 4) = rdx + 1;
                        break;
                    }
                    
                    if (_mbtowc_internal(&var_c4, rsi, 2, r10) == 0xffffffff)
                        break;
                    
                    rsi = &rsi[1];
                }
                else
                {
                    rax_7 = *(r8_4 + (r15 << 3) + 0x3e);
                    char var_50 = rax_7;
                    rax_7 = *rsi;
                    char var_4f_1 = rax_7;
                    rcx_2 &= 0xfb;
                    *(r8_4 + (r15 << 3) + 0x3d) = rcx_2;
                    r8_5 = 2;
                    rdx_8 = &var_50;
                label_140013e42:
                    
                    if (_mbtowc_internal(&var_c4, rdx_8, r8_5, r10) == 0xffffffff)
                        break;
                }
            }
            else
            {
                int32_t rdx_1 = 0;
                int64_t r14_1 = 0;
                void* rcx_4 = (r15 << 3) + 0x3e + (&data_14002a700)[r11_2];
                
                while (*rcx_4)
                {
                    rdx_1 += 1;
                    r14_1 += 1;
                    rcx_4 += 1;
                    
                    if (r14_1 >= 5)
                        break;
                }
                
                int32_t var_a8;
                
                if (r14_1 <= 0)
                {
                    int64_t r13_2 = *(*rsi + 0x1400299b0);
                    int32_t rcx_11 = r13_2 + 1;
                    void* i = r12_1 - rsi;
                    
                    if (rcx_11 > i)
                    {
                        if (i > 0)
                        {
                            char* r8_8 = nullptr;
                            
                            do
                            {
                                int64_t rax_18;
                                rax_18 = *(r8_8 + rsi);
                                r8_8[(r15 << 3) + (&data_14002a700)[var_90] + 0x3e] = rax_18;
                                rdi += 1;
                                r8_8 = &r8_8[1];
                            } while (rdi < i);
                        }
                        
                        *(arg1 + 4) += i;
                        break;
                    }
                    
                    var_a8 = 0;
                    char* var_78 = rsi;
                    int32_t rax_19;
                    rax_19 = rcx_11 == 4;
                    
                    if (sub_14000fb24(&var_c4, &var_78, rax_19 + 1, &var_a8, r10) == -1)
                        break;
                    
                    rsi = &rsi[r13_2];
                    r12_2 = rax_19 + 1;
                    r13_1 = var_90;
                }
                else
                {
                    int32_t r12_4 =
                        *(*((&data_14002a700)[r13_1] + (r15 << 3) + 0x3e) + 0x1400299b0) + 1;
                    uint64_t rax_10 = r12_4 - rdx_1;
                    var_a8 = rax_10;
                    void* i_1 = r12_1 - rsi;
                    void* r9 = rax_10;
                    
                    if (r9 > i_1)
                    {
                        if (i_1 > 0)
                        {
                            char* rsi_1 = rsi - r14_1;
                            
                            do
                            {
                                rax_10 = rsi_1[r14_1];
                                *(r14_1 + (r15 << 3) + (&data_14002a700)[r13_1] + 0x3e) = rax_10;
                                rdi += 1;
                                r14_1 += 1;
                            } while (rdi < i_1);
                        }
                        
                        *(arg1 + 4) += i_1;
                        break;
                    }
                    
                    int64_t rcx_6 = 0;
                    void* rdx_3 = (r15 << 3) + 0x3e + (&data_14002a700)[r11_2];
                    void var_58;
                    
                    do
                    {
                        rax_10 = *rdx_3;
                        *(&var_58 + rcx_6) = rax_10;
                        rcx_6 += 1;
                        rdx_3 += 1;
                    } while (rcx_6 < r14_1);
                    
                    if (r9 > 0)
                    {
                        sub_14001cb40(&var_58 + r14_1, rsi, r9);
                        r10 = arg5;
                    }
                    
                    int64_t rdx_5 = 0;
                    
                    do
                    {
                        *(rdx_5 + (r15 << 3) + (&data_14002a700)[r13_1] + 0x3e) = 0;
                        rdx_5 += 1;
                    } while (rdx_5 < r14_1);
                    
                    int64_t var_88 = 0;
                    void* var_80 = &var_58;
                    int32_t rax_12;
                    rax_12 = r12_4 == 4;
                    r12_2 = rax_12 + 1;
                    
                    if (sub_14000fb24(&var_c4, &var_80, rax_12 + 1, &var_88, r10) == -1)
                        break;
                    
                    rsi = &rsi[var_a8 - 1];
                }
            }
            
            rsi = &rsi[1];
            int64_t var_d0_1 = 0;
            int64_t var_d8_1 = 0;
            uint8_t buffer_1;
            uint32_t nNumberOfBytesToWrite =
                __acrt_WideCharToMultiByte(rax_6, 0, &var_c4, r12_2, &buffer_1, 5);
            
            if (!nNumberOfBytesToWrite)
                break;
            
            uint32_t numberOfBytesWritten = 0;
            
            if (WriteFile(hFile, &buffer_1, nNumberOfBytesToWrite, &numberOfBytesWritten, nullptr))
            {
                rdx = arg1[1] - arg3 + rsi;
                *(arg1 + 4) = rdx;
                
                if (numberOfBytesWritten < nNumberOfBytesToWrite)
                    break;
                
                if (buffer != 0xa)
                {
                label_140013f0b:
                    
                    if (rsi >= r12_1)
                        break;
                    
                    r10 = arg5;
                    r11_2 = var_68_1;
                    rcx_2 = var_9c;
                    continue;
                }
                else
                {
                    buffer = 0xd;
                    
                    if (WriteFile(hFile, &buffer, 1, &numberOfBytesWritten, nullptr))
                    {
                        if (numberOfBytesWritten < 1)
                            break;
                        
                        arg1[1] += 1;
                        *(arg1 + 4) += 1;
                        rdx = *(arg1 + 4);
                        goto label_140013f0b;
                    }
                }
            }
            
            *arg1 = GetLastError();
            break;
        }
    }
    
    __security_check_cookie(rax_1 ^ &var_108);
    return arg1;
}

int64_t* sub_140013fdc(int64_t* arg1, int32_t arg2, char* arg3, int32_t arg4)
{
    __chkstk(0x1450);
    void var_1468;
    int64_t rax_1 = __security_cookie ^ &var_1468;
    int64_t r10 = arg2;
    void* rbp_1 = &arg3[arg4];
    char* rsi = arg3;
    HANDLE hFile = *((&data_14002a700)[r10 >> 6] + (r10 & 0x3f) * 0x48 + 0x28);
    *arg1 = 0;
    arg1[1] = 0;
    
    if (arg3 < rbp_1)
    {
        do
        {
            uint8_t buffer[0x13ff];
            uint8_t (* rbx_1)[0x13ff] = &buffer;
            uint32_t rax_5;
            
            while (rsi < rbp_1)
            {
                rax_5 = *rsi;
                rsi = &rsi[1];
                
                if (rax_5 == 0xa)
                {
                    arg1[1] += 1;
                    *rbx_1 = 0xd;
                    rbx_1 = &(*rbx_1)[1];
                }
                
                *rbx_1 = rax_5;
                rbx_1 = &(*rbx_1)[1];
                void var_29;
                
                if (rbx_1 >= &var_29)
                    break;
            }
            
            uint32_t numberOfBytesWritten[0x4];
            numberOfBytesWritten[0] = 0;
            uint32_t nNumberOfBytesToWrite = rbx_1 - &buffer;
            
            if (!WriteFile(hFile, &buffer, nNumberOfBytesToWrite, &numberOfBytesWritten, nullptr))
            {
                *arg1 = GetLastError();
                break;
            }
            
            rax_5 = numberOfBytesWritten[0];
            *(arg1 + 4) += rax_5;
            
            if (rax_5 < nNumberOfBytesToWrite)
                break;
        } while (rsi < rbp_1);
    }
    
    __security_check_cookie(rax_1 ^ &var_1468);
    return arg1;
}

int64_t* sub_1400140e4(int64_t* arg1, int32_t arg2, int16_t* arg3, int32_t arg4)
{
    __chkstk(0x1450);
    void var_1468;
    int64_t rax_1 = __security_cookie ^ &var_1468;
    int64_t r10 = arg2;
    void* rbp_1 = arg4 + arg3;
    int16_t* rsi = arg3;
    HANDLE hFile = *((&data_14002a700)[r10 >> 6] + (r10 & 0x3f) * 0x48 + 0x28);
    *arg1 = 0;
    arg1[1] = 0;
    
    if (arg3 < rbp_1)
    {
        do
        {
            uint8_t buffer[0x13fe];
            uint8_t (* rbx_1)[0x13fe] = &buffer;
            
            while (rsi < rbp_1)
            {
                int16_t rax_5 = *rsi;
                rsi = &rsi[1];
                
                if (rax_5 == 0xa)
                {
                    arg1[1] += 2;
                    *rbx_1 = 0xd;
                    rbx_1 = &(*rbx_1)[2];
                }
                
                *rbx_1 = rax_5;
                rbx_1 = &(*rbx_1)[2];
                void var_2a;
                
                if (rbx_1 >= &var_2a)
                    break;
            }
            
            uint32_t numberOfBytesWritten[0x4];
            numberOfBytesWritten[0] = 0;
            int32_t nNumberOfBytesToWrite = ((rbx_1 - &buffer) >> 1) * 2;
            
            if (!WriteFile(hFile, &buffer, nNumberOfBytesToWrite, &numberOfBytesWritten, nullptr))
            {
                *arg1 = GetLastError();
                break;
            }
            
            uint32_t rax_7 = numberOfBytesWritten[0];
            *(arg1 + 4) += rax_7;
            
            if (rax_7 < nNumberOfBytesToWrite)
                break;
        } while (rsi < rbp_1);
    }
    
    __security_check_cookie(rax_1 ^ &var_1468);
    return arg1;
}

int64_t* sub_140014200(int64_t* arg1, int32_t arg2, int16_t* arg3, int32_t arg4)
{
    __chkstk(0x1470);
    void var_1498;
    int64_t rax_1 = __security_cookie ^ &var_1498;
    int64_t r10 = arg2;
    void* r14_1 = arg4 + arg3;
    int16_t* rdi = arg3;
    HANDLE hFile = *((&data_14002a700)[r10 >> 6] + (r10 & 0x3f) * 0x48 + 0x28);
    *arg1 = 0;
    arg1[1] = 0;
    
    if (arg3 < r14_1)
    {
        do
        {
            wchar16 var_1448[0x354];
            wchar16 (* r9)[0x354] = &var_1448;
            
            while (rdi < r14_1)
            {
                int16_t rax_5 = *rdi;
                rdi = &rdi[1];
                
                if (rax_5 == 0xa)
                {
                    *r9 = 0xd;
                    r9 = &(*r9)[1];
                }
                
                *r9 = rax_5;
                r9 = &(*r9)[1];
                void var_da0;
                
                if (r9 >= &var_da0)
                    break;
            }
            
            int64_t var_1460_1 = 0;
            int64_t var_1468_1 = 0;
            void var_d98;
            int32_t rax_6 = __acrt_WideCharToMultiByte(0xfde9, 0, &var_1448, (r9 - &var_1448) >> 1, 
                &var_d98, 0xd55);
            
            if (!rax_6)
            {
            label_140014343:
                *arg1 = GetLastError();
                break;
            }
            
            int32_t rsi_1 = 0;
            
            if (rax_6)
            {
                do
                {
                    uint32_t numberOfBytesWritten[0x4];
                    numberOfBytesWritten[0] = 0;
                    
                    if (!WriteFile(hFile, &var_d98 + rsi_1, rax_6 - rsi_1, &numberOfBytesWritten, 
                            nullptr))
                        goto label_140014343;
                    
                    rsi_1 += numberOfBytesWritten[0];
                } while (rsi_1 < rax_6);
            }
            
            *(arg1 + 4) = rdi - arg3;
        } while (rdi < r14_1);
    }
    
    __security_check_cookie(rax_1 ^ &var_1498);
    return arg1;
}

uint64_t _isatty(int32_t arg1)
{
    if (arg1 != 0xfffffffe)
    {
        if (arg1 >= 0 && arg1 < data_14002ab00)
        {
            int64_t rcx = arg1;
            return *((&data_14002a700)[rcx >> 6] + (rcx & 0x3f) * 0x48 + 0x38) & 0x40;
        }
        
        *sub_14000dedc() = 9;
        _invalid_parameter_noinfo();
    }
    else
        *sub_14000dedc() = 9;
    
    return 0;
}

uint64_t fclose(int32_t* arg1)
{
    void* var_48 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    
    if (!data_14002a1b8)
    {
        var_20 = 1;
        int128_t var_30_1 = *data_1400298c8;
    }
    
    int32_t rax = _fclose_internal(arg1, &var_48);
    
    if (var_20 == 2)
    {
        void* rcx = var_48;
        *(rcx + 0x3a8) &= 0xfffffffd;
    }
    
    int32_t var_1c;
    
    if (var_18)
        *(sub_1400028a0(&var_48) + 0x20) = var_1c;
    int32_t var_14;
    
    if (0)
        *(sub_1400028a0(&var_48) + 0x24) = var_14;
    return rax;
}

uint64_t _fclose_nolock_internal(int32_t* arg1, int64_t* arg2)
{
    if (!arg1)
    {
        arg2[6] = 1;
        *(arg2 + 0x2c) = 0x16;
        int64_t var_18;
        _invalid_parameter_internal(arg1, 0, 0, 0, var_18 & arg1, arg2);
        return 0xffffffff;
    }
    
    int32_t rsi_1 = -1;
    
    if (arg1[5] >> 0xd & 1)
    {
        rsi_1 = __acrt_stdio_flush_nolock(arg1, arg2);
        __acrt_stdio_free_buffer_nolock(arg1);
        
        if (_close_internal(_fileno(arg1), arg2) >= 0)
        {
            int64_t rcx_3 = *(arg1 + 0x28);
            
            if (rcx_3)
            {
                _free_base(rcx_3);
                *(arg1 + 0x28) = 0;
            }
        }
        else
            rsi_1 = -1;
    }
    
    __acrt_stdio_free_stream(arg1);
    return rsi_1;
}

uint64_t _fclose_internal(int32_t* arg1, int64_t* arg2)
{
    int32_t* arg_8 = arg1;
    
    if (arg1)
    {
        if (!(arg1[5] >> 0xc & 1))
        {
            sub_14000247c(arg1);
            int32_t rax_4 = _fclose_nolock_internal(arg1, arg2);
            sub_140002488(arg1);
            return rax_4;
        }
        
        __acrt_stdio_free_stream(arg1);
    }
    else
    {
        arg2[6] = 1;
        *(arg2 + 0x2c) = 0x16;
        int64_t var_18;
        _invalid_parameter_internal(arg1, 0, 0, 0, var_18 & arg1, arg2);
    }
    
    return 0xffffffff;
}

void* sub_140014590(int32_t (* arg1)[0x4], char arg2)
{
    void* result = nullptr;
    int32_t (* result_1)[0x4] = arg1;
    
    if (!arg2)
    {
        char (* rdx_1)[0x10] = arg1 & 0xfffffffffffffff0;
        int32_t i;
        
        for (i = _mm_movemask_epi8(__pcmpeqb_xmmdq_memdq({0}, *rdx_1))
                & 0xffffffff << (result_1 & 0xf); !i; 
                i = _mm_movemask_epi8(__pcmpeqb_xmmdq_memdq({0}, *rdx_1)))
            rdx_1 = &rdx_1[1];
        
        uint64_t rflags_1;
        int32_t temp0_5;
        temp0_5 = _bit_scan_forward(i);
        return &(*rdx_1)[temp0_5];
    }
    
    if (data_140029098 >= 2)
    {
        while (true)
        {
            bool c_1 = false;
            bool z_1 = !(result_1 & 0xf);
            
            if (z_1)
            {
                char zmm0[0x10] = arg2;
                
                while (true)
                {
                    int64_t rflags_4;
                    int32_t temp0_18;
                    temp0_18 = __pcmpistri_xmmdq_memdq_immb(zmm0, *result_1, 0x40);
                    
                    if (c_1)
                    {
                        int64_t r9 = temp0_18;
                        result = r9 + result_1;
                        z_1 = r9 == -(result_1);
                        int64_t rflags_5;
                        int32_t temp0_20;
                        temp0_20 = __pcmpistri_xmmdq_memdq_immb(zmm0, *result_1, 0x40);
                    }
                    
                    if (z_1)
                        break;
                    
                    int32_t (* result_2)[0x4] = result_1;
                    result_1 = &result_1[1];
                    c_1 = result_2 >= -0x10;
                    z_1 = result_2 == -0x10;
                }
                
                break;
            }
            
            if (*result_1 == arg2)
                result = result_1;
            
            if (!*result_1)
                break;
            
            result_1 += 1;
        }
    }
    else
    {
        uint32_t rax_4 = arg2;
        void* r10_2 = result_1 & 0xfffffffffffffff0;
        char zmm2[0x10] = *r10_2;
        int32_t r8_3 = 0xffffffff << (result_1 & 0xf);
        uint32_t temp0_7[0x4] = _mm_shuffle_epi32(_mm_shufflelo_epi16(rax_4 << 8 | rax_4, 0), 0);
        char temp0_8[0x10] = _mm_cmpeq_epi8(zmm2, {0});
        char temp0_9[0x10] = _mm_cmpeq_epi8(zmm2, temp0_7);
        uint32_t temp0_10 = _mm_movemask_epi8(temp0_8);
        int32_t r11_2 = _mm_movemask_epi8(temp0_9) & r8_3;
        int32_t i_1 = temp0_10 & r8_3;
        
        while (!i_1)
        {
            uint64_t rflags_2;
            int32_t temp0_12;
            temp0_12 = _bit_scan_reverse(r11_2);
            
            if (r11_2)
                result = temp0_12 + r10_2;
            
            r10_2 += 0x10;
            uint16_t zmm1[0x8] = *r10_2;
            i_1 = _mm_movemask_epi8(_mm_cmpeq_epi8(zmm1, {0}));
            r11_2 = _mm_movemask_epi8(_mm_cmpeq_epi8(zmm1, temp0_7));
        }
        
        int32_t rdx_6 = ((-(i_1) & i_1) - 1) & r11_2;
        uint64_t rflags_3;
        int32_t temp0_17;
        temp0_17 = _bit_scan_reverse(rdx_6);
        
        if (rdx_6)
            return temp0_17 + r10_2;
    }
    
    return result;
}

uint64_t __acrt_fp_strflt_to_string(char* arg1, int64_t arg2, int32_t arg3, int32_t* arg4, int32_t arg5, int32_t arg6, int64_t* arg7)
{
    int32_t rbx;
    
    if (arg1 && arg2)
    {
        int32_t rax_3 = 0;
        *arg1 = 0;
        
        if (arg3 > 0)
            rax_3 = arg3;
        
        if (arg2 > rax_3 + 1)
        {
            if (arg4)
            {
                char* rcx = *(arg4 + 8);
                char* rbx_1 = &arg1[1];
                char* rdx = rcx;
                *arg1 = 0x30;
                
                for (; arg3 > 0; arg3 -= 1)
                {
                    int64_t rax_5;
                    rax_5 = *rdx;
                    
                    if (!rax_5)
                        rax_5 = 0x30;
                    else
                        rdx = &rdx[1];
                    
                    *rbx_1 = rax_5;
                    rbx_1 = &rbx_1[1];
                }
                
                *rbx_1 = 0;
                
                if (arg3 >= 0 && should_round_up(rcx, rdx, *arg4, arg5, arg6))
                {
                    char rax_7;
                    
                    while (true)
                    {
                        rbx_1 -= 1;
                        rax_7 = *rbx_1;
                        
                        if (rax_7 != 0x39)
                            break;
                        
                        *rbx_1 = 0x30;
                    }
                    
                    *rbx_1 = rax_7 + 1;
                }
                
                if (*arg1 != 0x31)
                {
                    void* r8_1 = -ffffffffffffffff;
                    
                    do
                        r8_1 += 1;
                     while (*(r8_1 + arg1 + 1));
                    
                    sub_14001cb40(arg1, &arg1[1], r8_1 + 1);
                }
                else
                    arg4[1] += 1;
                
                return 0;
            }
            
            rbx = 0x16;
        }
        else
            rbx = 0x22;
    }
    else
        rbx = 0x16;
    
    *(arg7 + 0x2c) = rbx;
    arg7[6] = 1;
    _invalid_parameter_internal(0, 0, 0, 0, 0, arg7);
    return rbx;
}

void* should_round_up(int64_t arg1, char* arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    char* rbx = arg2;
    void* result;
    
    if (arg5)
    {
        result = __scrt_wide_argv_policy::configure_argv();
        uint64_t rcx;
        
        if (!result)
        {
            char temp0_1 = *rbx;
            rcx = result + 1;
            
            if (temp0_1 > 0x35)
                result = rcx;
            else if (temp0_1 < 0x35)
                result = 0;
            else
            {
                result = &rbx[1];
                
                if (arg4)
                {
                    char rdx;
                    
                    while (true)
                    {
                        rdx = *result;
                        
                        if (rdx != 0x30)
                            break;
                        
                        result += rcx;
                    }
                    
                    if (rdx)
                        result = rcx;
                    else if (rbx == arg1)
                        result = 0;
                    else
                    {
                        result = rbx[-1];
                        result &= rcx;
                    }
                }
                else
                    result = rcx;
            }
        }
        else if (result == 0x200)
        {
            rcx = 1;
            
            if (arg4)
            {
                while (true)
                {
                    result = *rbx;
                    
                    if (result != 0x30)
                        break;
                    
                    rbx = &rbx[1];
                }
                
                if (!result || arg3 == 0x2d)
                {
                    rcx = 0;
                    result = rcx;
                }
                else
                    result = rcx;
            }
            else if (arg3 != 0x2d)
                result = rcx;
            else
            {
                rcx = 0;
                result = rcx;
            }
        }
        else if (result != 0x100)
            result = 0;
        else
        {
            rcx = 1;
            
            if (arg4)
            {
                while (true)
                {
                    result = *rbx;
                    
                    if (result != 0x30)
                        break;
                    
                    rbx = &rbx[1];
                }
                
                if (!result || arg3 != 0x2d)
                {
                    rcx = 0;
                    result = rcx;
                }
                else
                    result = rcx;
            }
            else if (arg3 == 0x2d)
                result = rcx;
            else
            {
                rcx = 0;
                result = rcx;
            }
        }
    }
    else
        result = *arg2 >= 0x35;
    
    return result;
}

uint64_t sub_1400148a0(int64_t arg1, int32_t arg2, int32_t arg3, int32_t* arg4, char* arg5, int64_t arg6)
{
    void var_828;
    int64_t rax_1 = __security_cookie ^ &var_828;
    uint128_t zmm6 = arg1;
    int32_t var_7dc = arg3;
    int32_t var_7c0;
    fegetenv(&var_7c0);
    int32_t r15 = 1;
    char var_7b8;
    
    if ((var_7c0 & 0x1f) != 0x1f)
    {
        sub_14001a7e0(&var_7c0);
        var_7b8 = 1;
    }
    else
        var_7b8 = 0;
    
    *(arg4 + 8) = arg5;
    int64_t rdi = zmm6;
    int32_t rax_4 = 0x20;
    
    if (rdi < 0)
        rax_4 = 0x2d;
    
    int32_t var_7d8 = 0;
    *arg4 = rax_4;
    sub_14001a6e0(&var_7d8, 0, 0);
    int64_t rax_7 = rdi >> 0x34 & 0x7ff;
    char const* const r8;
    
    if (!rax_7)
    {
        if (0xfffffffffffff & rdi && !(var_7d8 & 0x1000000))
            goto label_140014a42;
        
        arg4[1] = 0;
        r8 = "0";
    label_1400149f8:
        
        if (sub_14000b5d0(arg5, arg6, r8))
        {
        label_140015b09:
            int64_t var_808 = 0;
            _invoke_watson();
            /* no return */
        }
    }
    else if (rax_7 != 0x7ff)
    {
    label_140014a42:
        int32_t var_7ec = 0;
        int32_t var_7cc_1 = 0x8001f;
        int64_t rdi_1 = rdi & 0x7fffffffffffffff;
        int32_t var_7d0;
        sub_14001a6e0(&var_7d0, 0, 0);
        sub_14001a6e0(&var_7ec, 0x8001f, var_7cc_1);
        double zmm0_1[0x2] = rdi_1;
        double rdx_2 = zmm0_1[0];
        var_7ec = arg2 + 1;
        uint64_t r8_3 = rdx_2 >> 0x34;
        int64_t rcx_8 = r8_3 & 0x7ff;
        int64_t rdi_4 = ((rdi_1 - rdi_1) & 0x10000000000000) + (rdx_2 & 0xfffffffffffff);
        int32_t r12_2 = 2 + 0xffffffff + 1 + (r8_3 & 0x7ff);
        int32_t rdx_4;
        double zmm0_3;
        zmm0_3 = sub_14001a840(log10(zmm0_1, zmm6));
        int32_t rcx_10 = zmm0_3;
        int32_t var_794 = rdi_4;
        int32_t rax_23 = (rcx_10 - 0x7fffffff) & 0xfffffffe;
        int32_t rax_24 = -(rax_23);
        uint32_t rdi_5 = rdi_4 >> 0x20;
        int32_t rax_26 = (rax_24 - rax_24) & rcx_10;
        uint32_t var_790_1 = rdi_5;
        uint64_t rax_28 = -(rdi_5);
        int32_t i_17 = -((rdx_4 - rdx_4)) + 1;
        int32_t i_10 = i_17;
        int32_t var_7e8_1;
        int32_t i_11;
        int32_t var_3f4;
        void* r9_1;
        int32_t i_2;
        
        if (r12_2 < 0x434)
        {
            if (r12_2 != 0x36)
            {
                rax_28 = 0;
                int32_t var_3f0_3 = 0x100000;
                var_3f4 = 0;
                int32_t var_3f8_5 = 2;
            }
            
            uint64_t rdi_11;
            
            if (r12_2 == 0x36 || !rdi_5)
            {
            label_140014edd:
                var_7e8_1 = 0;
                uint64_t rax_48 = (rax_28 - rax_28) & 4;
                uint64_t rflags_4;
                int32_t temp0_5;
                temp0_5 = __bsr_gprv_memv(*(&var_794 + rax_48));
                int32_t rax_50;
                
                rax_50 = !rax_48 ? 0 : temp0_5 + 1;
                
                int32_t r14_6;
                r14_6 = 0x20 - rax_50 < 1;
                i_2 = r14_6 + i_17;
                
                if (i_2 <= 0x73)
                {
                    int32_t rax_58 = i_2 - 1;
                    
                    if (rax_58 != 0xffffffff)
                    {
                        while (true)
                        {
                            uint64_t r10_6 = rax_58;
                            uint64_t r8_18 = rax_58 - 1;
                            int32_t r9_7;
                            
                            if (rax_58 >= i_17)
                                r9_7 = 0;
                            else
                                r9_7 = (&var_794)[r10_6];
                            
                            int32_t rcx_41;
                            
                            if (r8_18 >= i_17)
                                rcx_41 = 0;
                            else
                                rcx_41 = (&var_794)[r8_18];
                            
                            rax_58 = r8_18;
                            (&var_794)[r10_6] = rcx_41 >> 0x1f | (r9_7 * 2);
                            
                            if (r8_18 == 0xffffffff)
                                break;
                            
                            i_17 = i_10;
                        }
                    }
                }
                else
                    i_2 = 0;
                
                i_10 = i_2;
                rdi_11 = (0x435 - r12_2) >> 5;
                sub_14001c640(&var_3f4, 0, rdi_11 << 2);
                (&var_3f4)[rdi_11] = 1 << ((0x435 - r12_2) & 0x1f);
            }
            else
            {
                uint64_t r8_10 = 0;
                
                while (true)
                {
                    rax_28 = (&var_794)[r8_10];
                    
                    if ((&var_3f4)[r8_10] != rax_28)
                        goto label_140014edd;
                    
                    r8_10 = r8_10 + 1;
                    
                    if (r8_10 == 2)
                    {
                        var_7e8_1 = 0;
                        uint64_t rflags_3;
                        int32_t temp0_4;
                        temp0_4 = _bit_scan_reverse(rdi_5);
                        int32_t r14_5;
                        r14_5 = 0x20 < 2;
                        i_2 = r14_5 + i_17;
                        
                        if (i_2 <= 0x73)
                        {
                            int32_t rax_44 = i_2 - 1;
                            
                            if (rax_44 != 0xffffffff)
                            {
                                while (true)
                                {
                                    uint64_t r10_5 = rax_44;
                                    uint64_t r8_12 = rax_44 - 1;
                                    uint64_t r9_5;
                                    
                                    if (rax_44 >= i_17)
                                        r9_5 = 0;
                                    else
                                        r9_5 = (&var_794)[r10_5];
                                    
                                    int32_t rcx_28;
                                    
                                    if (r8_12 >= i_17)
                                        rcx_28 = 0;
                                    else
                                        rcx_28 = (&var_794)[r8_12];
                                    
                                    rax_44 = r8_12;
                                    (&var_794)[r10_5] = rcx_28 >> 0x1e | r9_5 << 2;
                                    
                                    if (r8_12 == 0xffffffff)
                                        break;
                                    
                                    i_17 = i_10;
                                }
                            }
                            
                            i_10 = i_2;
                        }
                        else
                        {
                            int32_t var_3f8_6 = 0;
                            i_10 = 0;
                            memcpy_s(&var_794, 0x1cc, &var_3f4, nullptr);
                            i_2 = i_10;
                        }
                        
                        rdi_11 = (0x436 - r12_2) >> 5;
                        sub_14001c640(&var_3f4, 0, rdi_11 << 2);
                        (&var_3f4)[rdi_11] = 1 << ((0x436 - r12_2) & 0x1f);
                        break;
                    }
                }
            }
            
            int32_t i_16 = rdi_11 + 1;
            r9_1 = i_16 << 2;
            i_11 = i_16;
            int32_t i_18 = i_16;
        }
        else
        {
            int32_t var_3f0_1 = 0x100000;
            var_3f4 = 0;
            int32_t var_3f8_1 = 2;
            
            if (!rdi_5)
            {
            label_140014c99:
                var_7e8_1 = 0;
                int32_t r11_4 = (r12_2 - 0x433) & 0x1f;
                uint32_t i = (r12_2 - 0x433) >> 5;
                int32_t rdi_8 = 1 << (0x20 - r11_4);
                uint64_t rflags_2;
                int32_t temp0_3;
                temp0_3 = __bsr_gprv_memv((&var_794)[i_17 - 1]);
                int32_t rcx_21;
                
                rcx_21 = rdi_8 == 1 ? 0 : temp0_3 + 1;
                
                if (i_17 + i <= 0x73)
                {
                    int32_t r14_3;
                    r14_3 = r11_4 > 0x20 - rcx_21;
                    i_2 = r14_3 + i_17 + i;
                }
                
                if (i_17 + i > 0x73 || i_2 > 0x73)
                {
                    int32_t var_3f8_4 = 0;
                    i_10 = 0;
                    memcpy_s(&var_794, 0x1cc, &var_3f4, nullptr);
                    i_2 = i_10;
                }
                else
                {
                    uint64_t r10_4 = i_2 - 1;
                    
                    if (r10_4 != i - 1)
                    {
                        while (true)
                        {
                            uint64_t rax_41 = r10_4 - i;
                            uint64_t rcx_23 = rax_41 - 1;
                            int32_t r9_2;
                            
                            if (rax_41 >= i_17)
                                r9_2 = 0;
                            else
                                r9_2 = (&var_794)[rax_41];
                            
                            int32_t rdx_11;
                            
                            if (rcx_23 >= i_17)
                                rdx_11 = 0;
                            else
                                rdx_11 = (&var_794)[rcx_23];
                            
                            (&var_794)[r10_4] = (rdx_11 & ~(rdi_8 - 1)) >> (0x20 - r11_4)
                                | (r9_2 & (rdi_8 - 1)) << r11_4;
                            r10_4 = r10_4 - 1;
                            
                            if (r10_4 == i - 1)
                                break;
                            
                            i_17 = i_10;
                        }
                        
                        r15 = 1;
                    }
                    
                    uint64_t rcx_26 = 0;
                    
                    if (i)
                    {
                        do
                        {
                            (&var_794)[rcx_26] = 0;
                            rcx_26 = rcx_26 + 1;
                        } while (rcx_26 != i);
                    }
                    
                    i_10 = i_2;
                }
                
                var_3f4 = 2;
            }
            else
            {
                uint64_t r8_5 = 0;
                
                while (true)
                {
                    if ((&var_3f4)[r8_5] != (&var_794)[r8_5])
                        goto label_140014c99;
                    
                    r8_5 = r8_5 + 1;
                    
                    if (r8_5 == 2)
                    {
                        var_7e8_1 = 0;
                        int32_t r11_2 = (r12_2 - 0x432) & 0x1f;
                        uint32_t i_1 = (r12_2 - 0x432) >> 5;
                        int32_t rdi_6 = 1 << (0x20 - r11_2);
                        uint64_t rflags_1;
                        int32_t temp0_2;
                        temp0_2 = __bsr_gprv_memv((&var_794)[i_17 - 1]);
                        int32_t rcx_13;
                        
                        rcx_13 = rdi_6 == 1 ? 0 : temp0_2 + 1;
                        
                        if (i_17 + i_1 <= 0x73)
                        {
                            int32_t r14_1;
                            r14_1 = r11_2 > 0x20 - rcx_13;
                            i_2 = r14_1 + i_17 + i_1;
                        }
                        
                        if (i_17 + i_1 > 0x73 || i_2 > 0x73)
                        {
                            int32_t var_3f8_2 = 0;
                            i_10 = 0;
                            memcpy_s(&var_794, 0x1cc, &var_3f4, nullptr);
                            i_2 = i_10;
                        }
                        else
                        {
                            uint64_t r9 = i_2 - 1;
                            
                            if (r9 != i_1 - 1)
                            {
                                while (true)
                                {
                                    uint64_t rax_35 = r9 - i_1;
                                    uint64_t rcx_15 = rax_35 - 1;
                                    int32_t r10_1;
                                    
                                    if (rax_35 >= i_17)
                                        r10_1 = 0;
                                    else
                                        r10_1 = (&var_794)[rax_35];
                                    
                                    int32_t rdx_7;
                                    
                                    if (rcx_15 >= i_17)
                                        rdx_7 = 0;
                                    else
                                        rdx_7 = (&var_794)[rcx_15];
                                    
                                    (&var_794)[r9] = (rdx_7 & ~(rdi_6 - 1)) >> (0x20 - r11_2)
                                        | (r10_1 & (rdi_6 - 1)) << r11_2;
                                    r9 = r9 - 1;
                                    
                                    if (r9 == i_1 - 1)
                                        break;
                                    
                                    i_17 = i_10;
                                }
                                
                                r15 = 1;
                            }
                            
                            uint64_t rcx_18 = 0;
                            
                            if (i_1)
                            {
                                do
                                {
                                    (&var_794)[rcx_18] = 0;
                                    rcx_18 = rcx_18 + 1;
                                } while (rcx_18 != i_1);
                            }
                            
                            i_10 = i_2;
                        }
                        
                        var_3f4 = 4;
                        break;
                    }
                }
            }
            
            int32_t var_3f0_2 = 0;
            r9_1 = 4;
            int32_t var_3f8_3 = 1;
            i_11 = 1;
        }
        
        int128_t var_5c4[0x1c];
        memcpy_s(&var_5c4, 0x1cc, &var_3f4, r9_1);
        int32_t rcx_36 = rax_26;
        int32_t i_4;
        int32_t var_224[0x73];
        
        if (rcx_36 < 0)
        {
            int32_t rcx_59 = -(rcx_36);
            uint32_t rax_75 = rcx_59 / 0xa;
            uint32_t var_7f0_1 = rax_75;
            
            if (rax_75)
            {
                while (true)
                {
                    uint32_t rcx_60 = rax_75;
                    
                    if (rax_75 > 0x26)
                        rcx_60 = 0x26;
                    
                    uint64_t rax_76 = rcx_60 - 1;
                    uint64_t rcx_61 = *((rax_76 << 2) + 0x14001ecf2);
                    uint64_t rsi_11 = *((rax_76 << 2) + 0x14001ecf3);
                    sub_14001c640(&var_3f4, 0, rcx_61 << 2);
                    sub_14001cb40(&(&var_3f4)[rcx_61], 
                        &data_14001e3e0 + (*((rax_76 << 2) + 0x14001ecf0) << 2), rsi_11 << 2);
                    uint64_t i_15 = rsi_11 + rcx_61;
                    int128_t* rax_79;
                    uint32_t r8_30;
                    
                    if (i_15 <= 1)
                    {
                        rax_79 = var_3f4;
                        
                        if (!rax_79)
                        {
                        label_140015525:
                            i_2 = 0;
                            i_10 = i_2;
                            rax_79 = 1;
                        }
                        else if (rax_79 == 1 || !i_2)
                            rax_79 = 1;
                        else
                        {
                            r8_30 = 0;
                            uint64_t r9_11 = 0;
                            
                            do
                            {
                                void* rcx_66 = (&var_794)[r9_11] * rax_79 + r8_30;
                                (&var_794)[r9_11] = rcx_66;
                                r8_30 = rcx_66 >> 0x20;
                                r9_11 = r9_11 + 1;
                            } while (r9_11 != i_2);
                            
                        label_14001556f:
                            
                            if (!r8_30)
                            {
                                i_2 = i_10;
                                rax_79 = 1;
                            }
                            else if (i_10 >= 0x73)
                            {
                                i_2 = 0;
                                i_10 = 0;
                                rax_79 = 0;
                            }
                            else
                            {
                                (&var_794)[i_10] = r8_30;
                                i_2 = i_10 + 1;
                                i_10 = i_2;
                                rax_79 = 1;
                            }
                        }
                    }
                    else if (i_2 > 1)
                    {
                        bool c_9 = i_15 < i_2;
                        int32_t i_3 = i_2;
                        int32_t* rcx_71 = &var_3f4;
                        
                        if (!c_9)
                            rcx_71 = &var_794;
                        
                        if (c_9)
                            i_3 = i_15;
                        
                        int32_t* var_7b0_1 = rcx_71;
                        rax_79 = c_9;
                        int32_t i_8 = i_3;
                        int32_t* rdx_29 = &var_794;
                        
                        if (!c_9)
                            rdx_29 = &var_3f4;
                        
                        int32_t* var_7c8_2 = rdx_29;
                        
                        if (rax_79)
                            i_15 = i_2;
                        
                        i_2 = 0;
                        uint64_t r10_13 = 0;
                        int32_t i_13 = 0;
                        
                        if (i_3)
                        {
                            do
                            {
                                uint64_t rsi_13 = rcx_71[r10_13];
                                
                                if (rsi_13)
                                {
                                    uint32_t j_9 = 0;
                                    int32_t j = r10_13;
                                    
                                    if (i_15)
                                    {
                                        int32_t rdi_19 = -(r10_13);
                                        
                                        while (j != 0x73)
                                        {
                                            uint64_t j_7 = j;
                                            
                                            if (j == i_2)
                                            {
                                                var_224[j_7] = 0;
                                                i_13 = j + 1;
                                            }
                                            
                                            uint64_t rax_82 = j + rdi_19;
                                            j += 1;
                                            int64_t rdx_33 =
                                                rdx_29[rax_82] * rsi_13 + j_9 + var_224[j_7];
                                            var_224[j_7] = rdx_33;
                                            i_2 = i_13;
                                            j_9 = rdx_33 >> 0x20;
                                            
                                            if (j + rdi_19 == i_15)
                                                break;
                                            
                                            rdx_29 = var_7c8_2;
                                        }
                                        
                                        if (j_9)
                                        {
                                            uint32_t j_1;
                                            
                                            do
                                            {
                                                if (j == 0x73)
                                                    goto label_140015892;
                                                
                                                uint64_t j_5 = j;
                                                
                                                if (j == i_2)
                                                {
                                                    var_224[j_5] = 0;
                                                    i_13 = j + 1;
                                                }
                                                
                                                j += 1;
                                                void* rcx_73 = var_224[j_5] + j_9;
                                                var_224[j_5] = rcx_73;
                                                i_2 = i_13;
                                                j_1 = rcx_73 >> 0x20;
                                                j_9 = j_1;
                                            } while (j_1);
                                        }
                                        
                                        i_3 = i_8;
                                    }
                                    
                                    if (j == 0x73)
                                        goto label_140015892;
                                    
                                    rcx_71 = var_7b0_1;
                                    rdx_29 = var_7c8_2;
                                }
                                else if (r10_13 == i_2)
                                {
                                    var_224[r10_13] &= rsi_13;
                                    i_2 = r10_13 + 1;
                                    i_13 = i_2;
                                }
                                
                                r10_13 = r10_13 + 1;
                            } while (r10_13 != i_3);
                        }
                        
                        void* r8_36 = i_2 << 2;
                        i_10 = i_2;
                        
                        if (!r8_36)
                            rax_79 = 1;
                        else
                        {
                            int128_t* rcx_74 = &var_794;
                            
                            if (r8_36 > 0x1cc)
                            {
                                sub_14001c640(rcx_74, 0, 0x1cc);
                                *sub_14000dedc() = 0x22;
                                _invalid_parameter_noinfo();
                            }
                            else
                                sub_14001cb40(rcx_74, &var_224, r8_36);
                            
                            i_2 = i_10;
                            rax_79 = 1;
                        }
                    }
                    else
                    {
                        uint64_t rbx_12 = var_794;
                        void* r8_33 = i_15 << 2;
                        i_2 = i_15;
                        i_10 = i_15;
                        
                        if (r8_33)
                        {
                            int128_t* rcx_67 = &var_794;
                            
                            if (r8_33 > 0x1cc)
                            {
                                sub_14001c640(rcx_67, 0, 0x1cc);
                                *sub_14000dedc() = 0x22;
                                _invalid_parameter_noinfo();
                            }
                            else
                                sub_14001cb40(rcx_67, &var_3f4, r8_33);
                            
                            i_2 = i_10;
                        }
                        
                        if (!rbx_12)
                            goto label_140015525;
                        
                        if (rbx_12 != 1 && i_2)
                        {
                            r8_30 = 0;
                            uint64_t r9_12 = 0;
                            
                            do
                            {
                                void* rcx_70 = (&var_794)[r9_12] * rbx_12 + r8_30;
                                (&var_794)[r9_12] = rcx_70;
                                r8_30 = rcx_70 >> 0x20;
                                r9_12 = r9_12 + 1;
                            } while (r9_12 != i_2);
                            
                            goto label_14001556f;
                        }
                        
                        rax_79 = 1;
                    }
                    
                    if (!rax_79)
                        break;
                    
                    rax_75 = var_7f0_1 - rcx_60;
                    bool cond:11_1 = var_7f0_1 != rcx_60;
                    var_7f0_1 = rax_75;
                    
                    if (!cond:11_1)
                        goto label_14001581d;
                }
                
                goto label_140015892;
            }
            
        label_14001581d:
            
            if (rcx_59 != rcx_59 / 0xa * 0xa)
            {
                int32_t rax_91 = *(((rcx_59 % 0xa - 1) << 2) + 0x14001ed88);
                
                if (!rax_91)
                {
                label_140015892:
                    i_2 = 0;
                    i_10 = i_2;
                }
                else if (rax_91 != 1 && i_2)
                {
                    uint32_t r8_37 = 0;
                    uint64_t r9_13 = 0;
                    
                    do
                    {
                        int64_t rcx_78 = (&var_794)[r9_13] * rax_91 + r8_37;
                        (&var_794)[r9_13] = rcx_78;
                        r8_37 = rcx_78 >> 0x20;
                        r9_13 = r9_13 + 1;
                    } while (r9_13 != i_2);
                    
                    if (!r8_37)
                        i_2 = i_10;
                    else
                    {
                        if (i_10 >= 0x73)
                            goto label_140015892;
                        
                        (&var_794)[i_10] = r8_37;
                        i_2 = i_10 + 1;
                        i_10 = i_2;
                    }
                }
            }
            
            i_4 = i_11;
        }
        else
        {
            i_4 = i_11;
            uint32_t rax_53 = rcx_36 / 0xa;
            uint32_t var_7f8_4 = rax_53;
            
            if (rax_53)
            {
                while (true)
                {
                    uint32_t rcx_37 = rax_53;
                    
                    if (rax_53 > 0x26)
                        rcx_37 = 0x26;
                    
                    uint64_t rax_54 = rcx_37 - 1;
                    uint64_t rcx_38 = *((rax_54 << 2) + 0x14001ecf2);
                    uint64_t rsi_8 = *((rax_54 << 2) + 0x14001ecf3);
                    sub_14001c640(&var_3f4, 0, rcx_38 << 2);
                    sub_14001cb40(&(&var_3f4)[rcx_38], 
                        &data_14001e3e0 + (*((rax_54 << 2) + 0x14001ecf0) << 2), rsi_8 << 2);
                    uint64_t i_14 = rsi_8 + rcx_38;
                    int128_t* rax_57;
                    uint32_t r8_19;
                    
                    if (i_14 <= 1)
                    {
                        rax_57 = var_3f4;
                        
                        if (!rax_57)
                        {
                        label_140015045:
                            i_4 = 0;
                            i_11 = i_4;
                            rax_57 = 1;
                        }
                        else if (rax_57 == 1 || !i_4)
                            rax_57 = 1;
                        else
                        {
                            r8_19 = 0;
                            uint64_t r9_8 = 0;
                            
                            do
                            {
                                void* rcx_46 = *(&var_5c4 + (r9_8 << 2)) * rax_57 + r8_19;
                                *(&var_5c4 + (r9_8 << 2)) = rcx_46;
                                r8_19 = rcx_46 >> 0x20;
                                r9_8 = r9_8 + 1;
                            } while (r9_8 != i_4);
                            
                        label_1400150e7:
                            
                            if (!r8_19)
                            {
                                i_4 = i_11;
                                rax_57 = 1;
                            }
                            else if (i_11 >= 0x73)
                            {
                                i_4 = 0;
                                i_11 = 0;
                                rax_57 = 0;
                            }
                            else
                            {
                                *(&var_5c4 + (i_11 << 2)) = r8_19;
                                i_4 = i_11 + 1;
                                i_11 = i_4;
                                rax_57 = 1;
                            }
                        }
                    }
                    else if (i_4 > 1)
                    {
                        bool c_8 = i_14 < i_4;
                        int32_t i_5 = i_4;
                        int32_t* rcx_51 = &var_3f4;
                        
                        if (!c_8)
                            rcx_51 = &var_5c4;
                        
                        if (c_8)
                            i_5 = i_14;
                        
                        int32_t* var_7c8_1 = rcx_51;
                        rax_57 = c_8;
                        int32_t i_9 = i_5;
                        int128_t (* rdx_18)[0x1c] = &var_5c4;
                        
                        if (!c_8)
                            rdx_18 = &var_3f4;
                        
                        var_7e8_1 = rdx_18;
                        
                        if (rax_57)
                            i_14 = i_4;
                        
                        i_4 = 0;
                        uint64_t r10_9 = 0;
                        int32_t i_12 = 0;
                        
                        if (i_5)
                        {
                            do
                            {
                                uint64_t rsi_10 = rcx_51[r10_9];
                                
                                if (rsi_10)
                                {
                                    uint32_t j_8 = 0;
                                    int32_t j_2 = r10_9;
                                    
                                    if (i_14)
                                    {
                                        int32_t rdi_16 = -(r10_9);
                                        
                                        while (j_2 != 0x73)
                                        {
                                            uint64_t j_6 = j_2;
                                            
                                            if (j_2 == i_4)
                                            {
                                                var_224[j_6] = 0;
                                                i_12 = j_2 + 1;
                                            }
                                            
                                            uint64_t rax_62 = j_2 + rdi_16;
                                            j_2 += 1;
                                            int64_t rdx_22 = *(rdx_18 + (rax_62 << 2)) * rsi_10
                                                + var_224[j_6] + j_8;
                                            var_224[j_6] = rdx_22;
                                            i_4 = i_12;
                                            j_8 = rdx_22 >> 0x20;
                                            
                                            if (j_2 + rdi_16 == i_14)
                                                break;
                                            
                                            rdx_18 = var_7e8_1;
                                        }
                                        
                                        if (j_8)
                                        {
                                            uint32_t j_3;
                                            
                                            do
                                            {
                                                if (j_2 == 0x73)
                                                    goto label_14001546a;
                                                
                                                uint64_t j_4 = j_2;
                                                
                                                if (j_2 == i_4)
                                                {
                                                    var_224[j_4] = 0;
                                                    i_12 = j_2 + 1;
                                                }
                                                
                                                j_2 += 1;
                                                void* rcx_53 = var_224[j_4] + j_8;
                                                var_224[j_4] = rcx_53;
                                                i_4 = i_12;
                                                j_3 = rcx_53 >> 0x20;
                                                j_8 = j_3;
                                            } while (j_3);
                                        }
                                        
                                        i_5 = i_9;
                                    }
                                    
                                    if (j_2 == 0x73)
                                        goto label_14001546a;
                                    
                                    rcx_51 = var_7c8_1;
                                    rdx_18 = var_7e8_1;
                                }
                                else if (r10_9 == i_4)
                                {
                                    var_224[r10_9] &= rsi_10;
                                    i_4 = r10_9 + 1;
                                    i_12 = i_4;
                                }
                                
                                r10_9 = r10_9 + 1;
                            } while (r10_9 != i_5);
                        }
                        
                        void* r8_25 = i_4 << 2;
                        i_11 = i_4;
                        
                        if (!r8_25)
                            rax_57 = 1;
                        else
                        {
                            int128_t* rcx_54 = &var_5c4;
                            
                            if (r8_25 > 0x1cc)
                            {
                                sub_14001c640(rcx_54, 0, 0x1cc);
                                *sub_14000dedc() = 0x22;
                                _invalid_parameter_noinfo();
                            }
                            else
                                sub_14001cb40(rcx_54, &var_224, r8_25);
                            
                            i_4 = i_11;
                            rax_57 = 1;
                        }
                    }
                    else
                    {
                        uint64_t rbx_10 = var_5c4[0];
                        void* r8_22 = i_14 << 2;
                        i_4 = i_14;
                        i_11 = i_14;
                        
                        if (r8_22)
                        {
                            int128_t* rcx_47 = &var_5c4;
                            
                            if (r8_22 > 0x1cc)
                            {
                                sub_14001c640(rcx_47, 0, 0x1cc);
                                *sub_14000dedc() = 0x22;
                                _invalid_parameter_noinfo();
                            }
                            else
                                sub_14001cb40(rcx_47, &var_3f4, r8_22);
                            
                            i_4 = i_11;
                        }
                        
                        if (!rbx_10)
                            goto label_140015045;
                        
                        if (rbx_10 != 1 && i_4)
                        {
                            r8_19 = 0;
                            uint64_t r9_9 = 0;
                            
                            do
                            {
                                void* rcx_50 = *(&var_5c4 + (r9_9 << 2)) * rbx_10 + r8_19;
                                *(&var_5c4 + (r9_9 << 2)) = rcx_50;
                                r8_19 = rcx_50 >> 0x20;
                                r9_9 = r9_9 + 1;
                            } while (r9_9 != i_4);
                            
                            goto label_1400150e7;
                        }
                        
                        rax_57 = 1;
                    }
                    
                    if (!rax_57)
                        goto label_14001546a;
                    
                    rax_53 = var_7f8_4 - rcx_37;
                    bool cond:12_1 = var_7f8_4 != rcx_37;
                    var_7f8_4 = rax_53;
                    
                    if (!cond:12_1)
                    {
                        rcx_36 = rax_26;
                        break;
                    }
                }
            }
            
            if (rcx_36 != rcx_36 / 0xa * 0xa)
            {
                int32_t rax_71 = *(((rcx_36 % 0xa - 1) << 2) + 0x14001ed88);
                
                if (!rax_71)
                {
                label_14001546a:
                    i_4 = 0;
                    i_11 = i_4;
                }
                else if (rax_71 != 1 && i_4)
                {
                    uint32_t r8_26 = 0;
                    uint64_t r9_10 = 0;
                    
                    do
                    {
                        int64_t rcx_58 = *(&var_5c4 + (r9_10 << 2)) * rax_71 + r8_26;
                        *(&var_5c4 + (r9_10 << 2)) = rcx_58;
                        r8_26 = rcx_58 >> 0x20;
                        r9_10 = r9_10 + 1;
                    } while (r9_10 != i_4);
                    
                    if (!r8_26)
                        i_4 = i_11;
                    else
                    {
                        if (i_11 >= 0x73)
                            goto label_14001546a;
                        
                        *(&var_5c4 + (i_11 << 2)) = r8_26;
                        i_4 = i_11 + 1;
                        i_11 = i_4;
                    }
                }
            }
        }
        void* rbx_13 = arg5;
        
        if (i_2)
        {
            uint32_t r8_39 = 0;
            uint64_t r9_14 = 0;
            
            do
            {
                uint64_t r8_40 = r8_39 + (&var_794)[r9_14] * 0xa;
                (&var_794)[r9_14] = r8_40;
                r9_14 = r9_14 + 1;
                r8_39 = r8_40 >> 0x20;
            } while (r9_14 != i_2);
            
            if (r8_39)
            {
                if (i_10 >= 0x73)
                    i_10 = 0;
                else
                {
                    (&var_794)[i_10] = r8_39;
                    i_10 += 1;
                }
            }
        }
        
        int32_t rax_97 = sub_140004ad0(&i_10, &i_11);
        int32_t r10_15 = rax_26;
        i_2 = 0x30;
        
        if (rax_97 == 0xa)
        {
            r10_15 += 1;
            *arg5 = 0x31;
            rbx_13 = &arg5[1];
            
            if (i_4)
            {
                uint32_t r8_41 = 0;
                uint64_t r9_15 = 0;
                
                do
                {
                    uint64_t r8_42 = r8_41 + *(&var_5c4 + (r9_15 << 2)) * 0xa;
                    *(&var_5c4 + (r9_15 << 2)) = r8_42;
                    r9_15 = r9_15 + 1;
                    r8_41 = r8_42 >> 0x20;
                } while (r9_15 != i_4);
                
                if (r8_41)
                {
                    if (i_11 >= 0x73)
                        i_11 = 0;
                    else
                    {
                        *(&var_5c4 + (i_11 << 2)) = r8_41;
                        i_11 += 1;
                    }
                }
            }
        }
        else if (rax_97)
        {
            rax_97 += 0x30;
            rbx_13 = &arg5[1];
            *arg5 = rax_97;
        }
        else
            r10_15 -= 1;
        
        arg4[1] = r10_15;
        int32_t rax_102 = var_7ec;
        
        if (r10_15 >= 0 && rax_102 <= 0x7fffffff && !var_7dc)
            rax_102 += r10_15;
        
        uint64_t rdi_20 = rax_102;
        
        if (arg6 - 1 < rdi_20)
            rdi_20 = arg6 - 1;
        
        void* rdi_21 = &arg5[rdi_20];
        char* rsi_14;
        rsi_14 = 0;
        int32_t i_6;
        
        if (rbx_13 == rdi_21)
        {
        label_140015aa0:
            i_6 = i_10;
        }
        else
        {
            while (true)
            {
                i_6 = i_10;
                
                if (!i_6)
                    break;
                
                uint32_t r8_43 = 0;
                uint64_t r10_16 = 0;
                
                do
                {
                    int64_t rcx_83 = (&var_794)[r10_16] * 0x3b9aca00 + r8_43;
                    (&var_794)[r10_16] = rcx_83;
                    r8_43 = rcx_83 >> 0x20;
                    r10_16 = r10_16 + 1;
                } while (r10_16 != i_6);
                
                if (r8_43)
                {
                    if (i_10 >= 0x73)
                        i_10 = 0;
                    else
                    {
                        (&var_794)[i_10] = r8_43;
                        i_10 += 1;
                    }
                }
                
                uint32_t r8_45 = sub_140004ad0(&i_10, &i_11);
                
                for (int32_t i_7 = 8; i_7 != 0xffffffff; i_7 -= 1)
                {
                    uint32_t rdx_40 = r8_45 / 0xa;
                    r8_45 -= rdx_40 * 0xa;
                    char rcx_85 = i_2 + r8_45;
                    r8_45 = rdx_40;
                    
                    if (rdi_21 - rbx_13 > i_7)
                        *(i_7 + rbx_13) = rcx_85;
                    else if (rcx_85 != 0x30)
                        rsi_14 = 1;
                }
                
                void* rax_112 = rdi_21 - rbx_13;
                
                if (rax_112 > 9)
                    rax_112 = 9;
                
                rbx_13 += rax_112;
                
                if (rbx_13 == rdi_21)
                    goto label_140015aa0;
            }
        }
        
        *rbx_13 = 0;
        
        if (i_6 || rsi_14)
            r15 = 0;
        
        var_7dc = 0;
        sub_14001a6e0(&var_7dc, var_7d0, var_7cc_1);
    }
    else
    {
        int64_t rax_9 = rdi & 0xfffffffffffff;
        int32_t rax_10;
        
        if (!rax_9)
            rax_10 = 1;
        else if (rdi >= 0 || rax_9 != 0x8000000000000)
            rax_10 = (~(rdi >> 0x33) & 1) | 2;
        else
            rax_10 = 4;
        
        arg4[1] = 1;
        
        if (rax_10 != 1)
        {
            if (rax_10 == 2)
            {
                r8 = "1#QNAN";
                goto label_1400149f8;
            }
            
            if (rax_10 == 3)
            {
                r8 = "1#SNAN";
                goto label_1400149f8;
            }
            
            if (rax_10 != 4)
                goto label_140014a42;
            
            r8 = "1#IND";
            goto label_1400149f8;
        }
        
        if (sub_14000b5d0(arg5, arg6, "1#INF"))
            goto label_140015b09;
        
        r15 = 0;
    }
    
    if (var_7b8)
        sub_14001a770(&var_7c0);
    
    __security_check_cookie(rax_1 ^ &var_828);
    return r15;
}

int64_t __crt_mbstring::__c32rtomb_utf8(char* arg1, uint32_t arg2, int64_t* arg3, void* arg4)
{
    char* r10 = arg1;
    
    if (!arg1)
        *arg3 = 0;
    else if (arg2)
    {
        if (arg2 & 0xffffff80)
        {
            char* i_2;
            
            if (!(arg2 & 0xfffff800))
            {
                i_2 = 1;
                arg1 = 0xc0;
            }
            else if (arg2 & 0xffff0000)
            {
                if (arg2 & 0xffe00000 || arg2 > 0x10ffff)
                    /* tailcall */
                    return __crt_mbstring::return_illegal_sequence(arg3, arg4);
                
                i_2 = 3;
                arg1 = 0xf0;
            }
            else
            {
                if (arg2 - 0xd800 <= 0x7ff)
                    /* tailcall */
                    return __crt_mbstring::return_illegal_sequence(arg3, arg4);
                
                i_2 = 2;
                arg1 = 0xe0;
            }
            
            char* i_1 = i_2;
            char* i;
            
            do
            {
                int32_t rax_1;
                rax_1 = arg2;
                arg2 u>>= 6;
                rax_1 &= 0x3f;
                rax_1 |= 0x80;
                *(i_1 + r10) = rax_1;
                i = i_1;
                i_1 -= 1;
            } while (i != 1);
            arg1 |= arg2;
            *r10 = arg1;
            /* tailcall */
            return __crt_mbstring::reset_and_return(&i_2[1], arg3);
        }
        
        *arg1 = arg2;
    }
    else
    {
        *arg1 = 0;
        *arg3 = 0;
    }
    
    return 1;
}

int64_t __crt_mbstring::return_illegal_sequence(int64_t* arg1, void* arg2)
{
    *arg1 = 0;
    *(arg2 + 0x30) = 1;
    *(arg2 + 0x2c) = 0x2a;
    return -1;
}

int64_t __crt_mbstring::reset_and_return(int64_t arg1, int64_t* arg2)
{
    *arg2 = 0;
    return arg1;
}

uint64_t __acrt_stdio_flush_and_write_narrow_nolock(char arg1, int32_t* arg2, int64_t* arg3)
{
    _fileno(arg2);
    
    if (!(arg2[5] & 6))
    {
        *(arg3 + 0x2c) = 9;
        arg3[6] = 1;
    }
    else if (!(arg2[5] >> 0xc & 1))
    {
        if (!(arg2[5] & 1))
            goto label_140015c54;
        
        char rax_5 = sub_140015cac(arg2);
        arg2[4] = 0;
        
        if (rax_5)
        {
            *arg2 = *(arg2 + 8);
            arg2[5] &= 0xfffffffe;
        label_140015c54:
            arg2[5] |= 2;
            arg2[5] &= 0xfffffff7;
            arg2[4] = 0;
            
            if (!(arg2[5] & 0x4c0) && !__acrt_should_use_temporary_buffer(arg2))
                __acrt_stdio_allocate_buffer_nolock(arg2);
            
            if (write_buffer_nolock<char>(arg1, arg2, arg3))
                return arg1;
        }
    }
    else
    {
        *(arg3 + 0x2c) = 0x22;
        arg3[6] = 1;
    }
    
    arg2[5] |= 0x10;
    return 0xffffffff;
}

HANDLE sub_140015cac(int64_t* arg1)
{
    HANDLE hFile;
    
    if (*(arg1 + 0x14) >> 3 & 1)
        hFile = 1;
    else if (!(*(arg1 + 0x14) & 0xc0) || *arg1 != arg1[1])
    {
        hFile = _get_osfhandle(arg1[3]);
        
        if (hFile == -1)
            hFile = 0;
        else
        {
            int64_t newFilePointer = 0;
            
            if (!SetFilePointerEx(hFile, 0, &newFilePointer, FILE_CURRENT))
                hFile = 0;
            else
            {
                int64_t fileSize = 0;
                
                if (!GetFileSizeEx(hFile, &fileSize))
                    hFile = 0;
                else
                    hFile = newFilePointer == fileSize;
            }
        }
    }
    else
        hFile = 0;
    
    return hFile;
}

uint64_t write_buffer_nolock<char>(char arg1, int32_t* arg2, int64_t* arg3)
{
    char arg_8 = arg1;
    int64_t r10 = _fileno(arg2);
    uint64_t result;
    
    if (!(arg2[5] & 0xc0))
        result = _write_internal(r10, &arg_8, 1, arg3) == 1;
    else
    {
        int32_t rbp_1 = 0;
        int16_t* rdx = *(arg2 + 8);
        int32_t rdi_2 = *arg2 - arg2[2];
        *arg2 = rdx + 1;
        arg2[4] = arg2[8] - 1;
        
        if (rdi_2 <= 0)
        {
            int64_t rdx_1;
            
            if (r10 + 2 <= 1)
                rdx_1 = &data_1400291e0;
            else
                rdx_1 = (&data_14002a700)[r10 >> 6] + (r10 & 0x3f) * 0x48;
            
            if (!(*(rdx_1 + 0x38) & 0x20))
                goto label_140015d9b;
            
            if (_lseeki64(r10, 0, FILE_END) != -1)
                goto label_140015d9b;
            
            arg2[5] |= 0x10;
            result = 1;
        }
        else
        {
            rbp_1 = _write_internal(r10, rdx, rdi_2, arg3);
        label_140015d9b:
            result = arg_8;
            **(arg2 + 8) = result;
            result = rbp_1 == rdi_2;
        }
    }
    
    return result;
}

int64_t sub_140015e2c(void* arg1, int64_t* arg2)
{
    /* tailcall */
    return sub_140015e34(arg1, arg2, *arg2);
}

uint64_t sub_140015e34(void* arg1, void* arg2, int64_t arg3)
{
    if (arg1)
    {
        int64_t r11_1 = *(arg1 + 0x18);
        int64_t r10_1 = *(arg2 + 8);
        
        if (r10_1 + r11_1)
        {
            int32_t r8 = *(arg1 + 0x14);
            uint64_t r9 = 0;
            
            if (r8)
            {
                while (arg3 >= *(r11_1 + (r9 << 3) + r10_1) + r10_1)
                {
                    r9 = r9 + 1;
                    
                    if (r9 >= r8)
                        break;
                }
                
                if (r9)
                    return *(r10_1 + ((r9 - 1) << 3) + r11_1 + 4);
            }
            
            return 0xffffffff;
        }
    }
    
    abort();
    /* no return */
}

int64_t __FrameHandler3::GetCurrentState(int64_t* arg1, int64_t* arg2, void* arg3)
{
    int32_t result = *(*(arg3 + 0x1c) + *arg1);
    
    if (result != 0xfffffffe)
        return result;
    
    return sub_140015e34(arg3, arg2, *arg2);
}

int64_t __FrameHandler3::SetState(int64_t* arg1, void* arg2, int32_t arg3)
{
    int64_t result = *arg1;
    *(*(arg2 + 0x1c) + result) = arg3;
    return result;
}

int64_t __FrameHandler3::SetUnwindTryBlock(int64_t* arg1, int64_t* arg2, void* arg3, int32_t arg4)
{
    int64_t arg_18;
    int64_t rcx = *sub_14000fe28(arg1, arg2, arg3, &arg_18);
    int64_t result = *(arg3 + 0x1c);
    arg_18 = rcx;
    
    if (arg4 > *(result + rcx + 4))
        *(result + rcx + 4) = arg4;
    
    return result;
}

uint64_t __GetUnwindTryBlock(int64_t* arg1, int64_t* arg2, void* arg3)
{
    int64_t arg_18;
    int64_t rcx = *sub_14000fe28(arg1, arg2, arg3, &arg_18);
    int64_t rax_1 = *(arg3 + 0x1c);
    arg_18 = rcx;
    return *(rax_1 + rcx + 4);
}

int64_t __FrameHandler3::FrameUnwindToState(int64_t* arg1, int64_t* arg2, void* arg3, int32_t arg4)
{
    int32_t arg_20 = arg4;
    void* arg_18 = arg3;
    int64_t* arg_8 = arg1;
    int64_t rax = _GetImageBase();
    int64_t var_40 = rax;
    int32_t i = __FrameHandler3::GetCurrentState(arg1, arg2, arg3);
    void* rax_2 = __vcrt_getptd();
    *(rax_2 + 0x30) += 1;
    
    while (i != 0xffffffff)
    {
        if (i <= arg4)
            break;
        
        if (i <= 0xffffffff || i >= *(arg3 + 4))
        {
            abort();
            /* no return */
        }
        
        int64_t rax_3 = _GetImageBase();
        int64_t r14_2 = i << 3;
        i = *(*(arg3 + 8) + r14_2 + rax_3);
        int32_t i_1 = i;
        int64_t rax_9;
        
        if (!*(_GetImageBase() + r14_2 + *(arg3 + 8) + 4))
            rax_9 = 0;
        else
        {
            int64_t rbx_3 = *(_GetImageBase() + r14_2 + *(arg3 + 8) + 4);
            rax_9 = _GetImageBase() + rbx_3;
        }
        
        if (rax_9)
        {
            __FrameHandler3::SetState(arg1, arg3, i);
            int64_t rbx_4 = *(arg3 + 8);
            int64_t rax_10;
            int512_t zmm0_1;
            rax_10 = _GetImageBase();
            int64_t rax_15;
            
            if (!*(rax_10 + r14_2 + rbx_4 + 4))
                rax_15 = 0;
            else
            {
                int64_t rbx_6 = *(_GetImageBase() + r14_2 + *(arg3 + 8) + 4);
                int64_t rax_14;
                rax_14 = _GetImageBase();
                rax_15 = rax_14 + rbx_6;
            }
            
            _CallSettingFrame(rax_15, arg1, zmm0_1);
            _SetImageBase(rax);
        }
        
        int32_t i_2 = i;
    }
    
    if (*(__vcrt_getptd() + 0x30) > 0)
    {
        void* rax_17 = __vcrt_getptd();
        *(rax_17 + 0x30) -= 1;
    }
    
    if (i == 0xffffffff || i <= arg4)
        return __FrameHandler3::SetState(arg1, arg3, i);
    
    abort();
    /* no return */
}

uint64_t __FrameHandler3::GetHandlerSearchState(int64_t* arg1, int64_t* arg2, void* arg3)
{
    int32_t rbx = sub_140015e2c(arg3, arg2);
    void arg_20;
    sub_14000fe28(arg1, arg2, arg3, &arg_20);
    
    if (rbx <= __GetUnwindTryBlock(arg1, arg2, arg3))
        rbx = __GetUnwindTryBlock(arg1, arg2, arg3);
    else
    {
        __FrameHandler3::SetState(&arg_20, arg3, rbx);
        __FrameHandler3::SetUnwindTryBlock(arg1, arg2, arg3, rbx);
    }
    
    return rbx;
}

int64_t sub_14001615c(void* arg1)
{
    int32_t var_88 = 0;
    int32_t arg_8 = 0;
    int64_t var_80 = 0;
    int64_t arg_20 = 0;
    int64_t r13 = *(__vcrt_getptd() + 0x28);
    int64_t var_68 = r13;
    int64_t rax_2 = *(__vcrt_getptd() + 0x20);
    int32_t* rsi = *(arg1 + 0x50);
    int32_t* var_50 = rsi;
    int32_t* arg_10 = rsi;
    void* rax_3 = *(arg1 + 0x48);
    void* rbx = *(arg1 + 0x40);
    int64_t rax_4 = *(arg1 + 0x30);
    int64_t* r14 = *(arg1 + 0x28);
    int64_t* var_58 = r14;
    __except_validate_context_record(rbx);
    *(__vcrt_getptd() + 0x20) = rsi;
    *(__vcrt_getptd() + 0x28) = rbx;
    void var_48;
    int64_t* rax_8;
    int512_t zmm0;
    rax_8 = _CreateFrameInfo(&var_48, *(*(__vcrt_getptd() + 0x20) + 0x28));
    int64_t* var_70 = rax_8;
    
    if (*(arg1 + 0x58))
    {
        arg_8 = 1;
        void* rax_9;
        rax_9 = __vcrt_getptd();
        arg_20 = *(rax_9 + 0x70);
    }
    
    int64_t result = _CallSettingFrame(rax_4, r14, zmm0);
    int64_t result_1 = result;
    _FindAndUnlinkFrame(rax_8);
    
    if (*rsi == 0xe06d7363 && rsi[6] == 4)
    {
        int32_t rax_10 = rsi[8];
        
        if (rax_10 == 0x19930520 || rax_10 - 0x19930521 <= 1)
        {
            int32_t rax_12;
            int64_t rdx_3;
            rax_12 = _IsExceptionObjectToBeDestroyed(*(rsi + 0x28));
            
            if (rax_12)
            {
                rdx_3 = 1;
                sub_140002128(rsi);
            }
        }
    }
    
    *(__vcrt_getptd() + 0x20) = rax_2;
    *(__vcrt_getptd() + 0x28) = r13;
    *(*(rax_3 + 0x1c) + *r14) = -2;
    return result;
}

void sub_14001625b(int32_t arg1, int32_t* arg2, int32_t* arg3) __noreturn
{
    int32_t arg_20 = 1;
    void* rax;
    int64_t rdx;
    rax = __vcrt_getptd();
    *(rax + 0x40) = 0;
    int32_t* rcx = arg2;
    
    if (arg1)
    {
        rdx = 1;
        sub_140002128(rcx);
        rcx = arg3;
    }
    
    RaiseException(*rcx, rcx[1], rcx[6], &rcx[8]);
    /* no return */
}

int64_t _CallMemberFunction1(int64_t, int64_t arg2)
{
    /* jump -> arg2 */
}

int64_t _CallMemberFunction2(int64_t, int64_t arg2, int64_t arg3, int32_t arg4)
{
    /* jump -> arg2 */
}

struct std::exception::VTable** std::exception::exception(struct std::exception::VTable** arg1, void* arg2)
{
    *arg1 = &std::exception::`vftable';
    *(arg1 + 8) = {0};
    sub_14001af40(arg2 + 8, &arg1[1]);
    return arg1;
}

char const* const get_unexpected_or_default(void* arg1)
{
    if (*(arg1 + 8))
        return *(arg1 + 8);
    
    return "Unknown exception";
}

struct std::exception::VTable** std::bad_typeid::`scalar deleting destructor'(struct std::exception::VTable** arg1, char arg2)
{
    *arg1 = &std::exception::`vftable';
    sub_14001afc0(&arg1[1]);
    
    if (arg2 & 1)
        j_sub_14000d150(arg1);
    
    return arg1;
}

struct std::exception::std::bad_exception::VTable** sub_1400163f0(struct std::exception::std::bad_exception::VTable** arg1)
{
    arg1[2] = 0;
    arg1[1] = "bad exception";
    *arg1 = &std::bad_exception::`vftable'{for `std::exception'};
    return arg1;
}

int64_t Concurrency::invalid_oversubscribe_operation::~invalid_oversubscribe_operation(struct std::exception::VTable** arg1)
{
    *arg1 = &std::exception::`vftable';
    /* tailcall */
    return sub_14001afc0(&arg1[1]);
}

struct std::exception::VTable** boost::exception_detail::error_info_injector<class boost::math::evaluation_error>::error_info_injector<class boost::math::evaluation_error>(struct std::exception::VTable** arg1, void* arg2)
{
    *arg1 = &std::exception::`vftable';
    *(arg1 + 8) = {0};
    sub_14001af40(arg2 + 8, &arg1[1]);
    *arg1 = &std::bad_exception::`vftable'{for `std::exception'};
    return arg1;
}

int64_t sub_140016464(int64_t* arg1, void* arg2, int32_t* arg3)
{
    int32_t* r9 = *arg1;
    *arg3 = 0;
    
    if (*r9 == 0xe06d7363)
    {
        if (r9[6] == 4)
        {
            int32_t rax_1 = r9[8];
            
            if ((rax_1 == 0x19930520 || rax_1 - 0x19930521 <= 1) && *(r9 + 0x28) == *(arg2 + 0x28))
                *arg3 = 1;
        }
        
        if (*r9 == 0xe06d7363 && r9[6] == 4)
        {
            int32_t rcx = r9[8];
            
            if ((rcx == 0x19930520 || rcx - 0x19930521 <= 1) && !*(r9 + 0x30))
            {
                *(__vcrt_getptd() + 0x40) = 1;
                *arg3 = 1;
                return 1;
            }
        }
    }
    
    return 0;
}

int32_t* sub_1400164fc(void* arg1, int32_t* arg2)
{
    void* rsi = arg1;
    
    if (!arg2)
    {
        abort();
        /* no return */
    }
    
    int64_t r12;
    r12 = 0;
    int32_t i = 0;
    
    if (*arg2 > 0)
    {
        do
        {
            int32_t* rdi_2 = *(*(rsi + 0x30) + 0xc) + _GetThrowImageBase() + 4;
            int32_t* arg_10 = rdi_2;
            int32_t j = *(_GetThrowImageBase() + *(*(rsi + 0x30) + 0xc));
            
            if (j > 0)
            {
                do
                {
                    int64_t rsi_1 = *rdi_2;
                    int64_t rax_5 = _GetThrowImageBase();
                    
                    if (sub_140016674(_GetImageBase() + i * 0x14 + arg2[1], rsi_1 + rax_5, 
                        *(arg1 + 0x30)))
                    {
                        r12 = 1;
                        break;
                    }
                    
                    j -= 1;
                    rdi_2 = &arg_10[1];
                    arg_10 = rdi_2;
                } while (j > 0);
                
                rsi = arg1;
            }
            
            i += 1;
        } while (i < *arg2);
    }
    
    int32_t* result;
    result = r12;
    return result;
}

int64_t sub_1400165e4(int32_t* arg1)
{
    int32_t rbp = 0;
    int32_t result;
    
    if (*arg1 <= 0)
    {
    label_140016651:
        result = 0;
    }
    else
    {
        int64_t rsi_1 = 0;
        
        while (true)
        {
            void* rax_5;
            
            if (!*(_GetImageBase() + rsi_1 + arg1[1] + 4))
                rax_5 = nullptr;
            else
            {
                int64_t rbx_3 = *(_GetImageBase() + rsi_1 + arg1[1] + 4);
                rax_5 = _GetImageBase() + rbx_3;
            }
            
            if (!sub_140002290(rax_5 + 8, &class std::bad_exception `RTTI Type Descriptor'.spare))
            {
                result = 1;
                break;
            }
            
            rbp += 1;
            rsi_1 += 0x14;
            
            if (rbp >= *arg1)
                goto label_140016651;
        }
    }
    
    return result;
}

int64_t j_sub_140016a48(int32_t* arg1, int64_t* arg2, void* arg3, int64_t* arg4, int32_t* arg5, int32_t arg6, int64_t arg7, char arg8)
{
    /* tailcall */
    return sub_140016a48(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

uint64_t sub_140016674(char* arg1, char* arg2, char* arg3)
{
    int64_t rbx = *(arg1 + 4);
    int32_t rdi = 0;
    
    if (rbx && _GetImageBase() != -(rbx))
    {
        int64_t rbx_1 = *(arg1 + 4);
        void* const rcx;
        
        if (!rbx_1)
            rcx = nullptr;
        else
            rcx = rbx_1 + _GetImageBase();
        
        if (*(rcx + 0x10) && (!(*arg1 & 0x80) || !(*arg2 & 0x10)))
        {
            int64_t rbp_1 = *(arg1 + 4);
            int64_t rbx_2;
            
            if (!rbp_1)
                rbx_2 = 0;
            else
                rbx_2 = _GetImageBase() + rbp_1;
            
            int64_t rax_6 = _GetThrowImageBase();
            
            if (rbx_2 != *(arg2 + 4) + rax_6)
            {
                int64_t rbx_3 = *(arg1 + 4);
                void* const rbp_2;
                
                if (!rbx_3)
                    rbp_2 = nullptr;
                else
                    rbp_2 = rbx_3 + _GetImageBase();
                
                if (strcmp(rbp_2 + 0x10, *(arg2 + 4) + 0x10 + _GetThrowImageBase()))
                    return 0;
            }
            
            if ((!(*arg2 & 2) || *arg1 & 8) && (!(*arg3 & 1) || *arg1 & 1)
                    && (!(*arg3 & 4) || *arg1 & 4) && (!(*arg3 & 2) || *arg1 & 2))
                rdi = 1;
            
            return rdi;
        }
    }
    
    return 1;
}

uint64_t sub_140016794(void* arg1, int64_t* arg2, char* arg3, char* arg4)
{
    int64_t* rsi = arg2;
    int32_t rdi = 0;
    int64_t r15 = *(arg3 + 4);
    void* rdx;
    
    if (!r15)
        rdx = nullptr;
    else
        rdx = r15 + _GetImageBase();
    
    if (rdx)
    {
        int64_t r15_1 = *(arg3 + 4);
        void* rcx;
        
        if (!r15_1)
            rcx = nullptr;
        else
            rcx = r15_1 + _GetImageBase();
        
        if (*(rcx + 0x10) && (*(arg3 + 8) || *arg3 < 0))
        {
            if (*arg3 >= 0)
                rsi = *(arg3 + 8) + *rsi;
            
            int64_t* rax;
            
            if (*arg3 & 0x80 && *arg4 & 0x10)
                rax = data_14002a148;
            
            if (*arg3 & 0x80 && *arg4 & 0x10 && rax)
            {
                int64_t rax_4 = rax();
                
                if (!rax_4 || !rsi)
                {
                    abort();
                    /* no return */
                }
                
                *rsi = rax_4;
                *rsi = __AdjustPointer(rax_4, &arg4[8]);
            }
            else if (*arg3 & 8)
            {
                int64_t rcx_1 = *(arg1 + 0x28);
                
                if (!rcx_1 || !rsi)
                {
                    abort();
                    /* no return */
                }
                
                *rsi = rcx_1;
                *rsi = __AdjustPointer(rcx_1, &arg4[8]);
            }
            else if (!(*arg4 & 1))
            {
                int64_t rbx_1 = *(arg4 + 0x18);
                void* rcx_3;
                
                if (!rbx_1)
                    rcx_3 = nullptr;
                else
                    rcx_3 = rbx_1 + _GetThrowImageBase();
                
                if (rcx_3)
                {
                    void* rcx_6;
                    
                    if (*(arg1 + 0x28) && rsi)
                    {
                        int64_t rbx_3 = *(arg4 + 0x18);
                        
                        if (!rbx_3)
                            rcx_6 = nullptr;
                        else
                            rcx_6 = rbx_3 + _GetThrowImageBase();
                    }
                    
                    if (!*(arg1 + 0x28) || !rsi || !rcx_6)
                    {
                        abort();
                        /* no return */
                    }
                    
                    rax = *arg4;
                    rax &= 4;
                    char temp0_1 = rax;
                    rax = -(rax);
                    rdi = -((rcx_6 - rcx_6)) + 1;
                    int32_t var_28_1 = -((rcx_6 - rcx_6)) + 1;
                }
                else
                {
                    if (!*(arg1 + 0x28) || !rsi)
                    {
                        abort();
                        /* no return */
                    }
                    
                    sub_14001cb40(rsi, __AdjustPointer(*(arg1 + 0x28), &arg4[8]), *(arg4 + 0x14));
                }
            }
            else
            {
                int32_t* rdx_1 = *(arg1 + 0x28);
                
                if (!rdx_1 || !rsi)
                {
                    abort();
                    /* no return */
                }
                
                sub_14001cb40(rsi, rdx_1, *(arg4 + 0x14));
                
                if (*(arg4 + 0x14) == 8 && *rsi)
                    *rsi = __AdjustPointer(*rsi, &arg4[8]);
            }
            
            return rdi;
        }
    }
    
    return 0;
}

int64_t sub_140016988(void* arg1, int64_t* arg2, int32_t* arg3, char* arg4)
{
    int64_t rbx = 0;
    int64_t* rdi;
    
    if (*arg3 >= 0)
        rdi = arg3[2] + *arg2;
    else
        rdi = arg2;
    
    int32_t rax = sub_140016794(arg1, arg2, arg3, arg4);
    int32_t result = rax - 1;
    
    if (rax == 1)
    {
        int64_t rax_3 = __AdjustPointer(*(arg1 + 0x28), &arg4[8]);
        int64_t rsi_2 = *(arg4 + 0x18);
        
        if (rsi_2)
            rbx = _GetThrowImageBase() + rsi_2;
        
        return _CallMemberFunction1(rdi, rbx, rax_3);
    }
    
    if (result != 1)
        return result;
    
    int64_t rax_1 = __AdjustPointer(*(arg1 + 0x28), &arg4[8]);
    int64_t rsi_1 = *(arg4 + 0x18);
    
    if (rsi_1)
        rbx = _GetThrowImageBase() + rsi_1;
    
    return _CallMemberFunction2(rdi, rbx, rax_1, 1);
}

void sub_140016a42() __noreturn
{
    abort();
    /* no return */
}

int64_t sub_140016a48(int32_t* arg1, int64_t* arg2, void* arg3, int64_t* arg4, int32_t* arg5, int32_t arg6, int64_t arg7, char arg8)
{
    __except_validate_context_record(arg3);
    
    if (*(__vcrt_getptd() + 0x40) || *arg1 == 0xe06d7363)
    {
    label_140016acd:
        
        if (!(arg1[1] & 0x66))
        {
            if (arg5[3])
            {
            label_140016bbc:
                
                if (*arg1 == 0xe06d7363 && arg1[6] >= 3 && arg1[8] > 0x19930522)
                {
                    int64_t rbp_2 = *(*(arg1 + 0x30) + 8);
                    
                    if (rbp_2)
                    {
                        int64_t rax_12 = _GetThrowImageBase();
                        
                        if (rax_12 != -(rbp_2))
                        {
                            int64_t var_30;
                            var_30 = arg8;
                            int32_t var_38;
                            var_38 = arg7;
                            char var_40;
                            var_40 = arg6;
                            return (rax_12 + rbp_2)(arg1, arg2, arg3, arg4, arg5, var_40, var_38, 
                                var_30);
                        }
                    }
                }
                
                int32_t rax_15;
                rax_15 = arg8;
                FindHandler<class __FrameHandler3>(arg1, arg2, arg3, arg4, arg5, rax_15, arg6, 
                    arg7);
            }
            else
            {
                if ((*arg5 & 0x1fffffff) >= 0x19930521)
                {
                    int64_t rbp_1 = arg5[8];
                    
                    if (rbp_1 && _GetImageBase() != -(rbp_1))
                        goto label_140016bbc;
                }
                
                if ((*arg5 & 0x1fffffff) >= 0x19930522 && arg5[9] & 4)
                    goto label_140016bbc;
            }
        }
        else if (arg5[1] && !arg6)
        {
            if (!(arg1[1] & 0x20))
                __FrameHandler3::FrameUnwindToEmptyState(arg2, arg4, arg5);
            else if (*arg1 == 0x80000026)
            {
                int32_t rax_3 = sub_140015e34(arg5, arg4, arg4[4]);
                
                if (rax_3 < 0xffffffff || rax_3 >= arg5[1])
                {
                    abort();
                    /* no return */
                }
                
                __FrameHandler3::FrameUnwindToState(arg2, arg4, arg5, rax_3);
            }
            else if (*arg1 != 0x80000029)
                __FrameHandler3::FrameUnwindToEmptyState(arg2, arg4, arg5);
            else
            {
                int32_t r9 = arg1[0xe];
                
                if (r9 < 0xffffffff || r9 >= arg5[1])
                {
                    abort();
                    /* no return */
                }
                
                __FrameHandler3::FrameUnwindToState(*(arg1 + 0x28), arg4, arg5, r9);
            }
        }
    }
    else
    {
        bool cond:0_1;
        
        if (*arg1 != 0x80000029)
        {
            cond:0_1 = *arg1 == 0x80000026;
        label_140016ab6:
            
            if (cond:0_1 || (*arg5 & 0x1fffffff) < 0x19930522 || !(arg5[9] & 1))
                goto label_140016acd;
        }
        else
        {
            if (arg1[6] == 0xf)
            {
                cond:0_1 = *(arg1 + 0x60) == 0x19930520;
                goto label_140016ab6;
            }
            
            if ((*arg5 & 0x1fffffff) < 0x19930522 || !(arg5[9] & 1))
                goto label_140016acd;
        }
    }
    
    return 1;
}

void* FindHandler<class __FrameHandler3>(int32_t* arg1, int64_t* arg2, int64_t arg3, int64_t* arg4, int32_t* arg5, char arg6, int32_t arg7, int64_t arg8)
{
    void var_168;
    int64_t rax_1 = __security_cookie ^ &var_168;
    int64_t* r12 = arg2;
    int64_t r15 = arg3;
    int64_t var_100 = arg3;
    int32_t* rdi = arg1;
    int64_t var_e0 = arg8;
    char var_108 = 0;
    int32_t rax_2 = __FrameHandler3::GetHandlerSearchState(r12, arg4, arg5);
    int32_t rbx = rax_2;
    
    if (rax_2 >= 0xffffffff && rax_2 < arg5[1])
    {
        uint128_t var_c8;
        void* result;
        
        if (*rdi != 0xe06d7363 || rdi[6] != 4)
        {
        label_140016de4:
            int64_t var_a8_1 = arg4[1];
            int32_t* var_b0 = arg5;
            int32_t rax_15;
            
            if (*rdi == 0xe06d7363 && rdi[6] == 4)
                rax_15 = rdi[8];
            
            if (*rdi == 0xe06d7363 && rdi[6] == 4
                && (rax_15 == 0x19930520 || rax_15 - 0x19930521 <= 1))
            {
                int32_t var_140;
                
                if (arg5[3] > 0)
                {
                    var_140 = arg7;
                    uint128_t var_90;
                    __FrameHandler3::GetRangeOfTrysToCheck(&var_90, &var_b0, rbx, arg4, arg5);
                    uint128_t zmm1_1 = var_90;
                    int96_t var_a0_1 = zmm1_1;
                    int32_t var_78;
                    
                    if (_mm_bsrli_si128(zmm1_1, 8) < var_78)
                    {
                        int32_t r15_1 = *var_a0_1[8];
                        void* r9_1 = zmm1_1;
                        void* var_e8_1 = r9_1;
                        
                        do
                        {
                            int64_t rax_22 = *(r9_1 + 8);
                            int64_t r8_2 = *(*var_a0_1 + 0x10) + r15_1 * 0x14;
                            uint128_t zmm0_1 = *(r8_2 + rax_22);
                            int64_t rcx_6 = *(r8_2 + rax_22 + 0x10);
                            int32_t var_b8_1 = rcx_6;
                            var_c8 = zmm0_1;
                            
                            if (zmm0_1 <= rbx && rbx <= zmm0_1 >> 0x20)
                            {
                                int64_t rcx_7 = rcx_6 + arg4[1];
                                uint64_t r12_1 = 0;
                                int64_t var_d0_1 = rcx_7;
                                uint32_t rax_27 = _mm_bsrli_si128(zmm0_1, 8) >> 0x20;
                                
                                if (!rax_27)
                                {
                                label_140016fd8:
                                    r12 = arg2;
                                }
                                else
                                {
                                    while (true)
                                    {
                                        uint64_t rax_28 = r12_1 * 5;
                                        uint128_t var_70 = *(rcx_7 + (rax_28 << 2));
                                        int32_t var_60_1 = *(rcx_7 + (rax_28 << 2) + 0x10);
                                        int32_t* var_f8_1 =
                                            _GetThrowImageBase() + 4 + *(*(rdi + 0x30) + 0xc);
                                        int32_t r13_1 =
                                            *(_GetThrowImageBase() + *(*(rdi + 0x30) + 0xc));
                                        
                                        if (r13_1 > 0)
                                        {
                                            int32_t* rax_34 = var_f8_1;
                                            
                                            while (true)
                                            {
                                                char* rbx_5 = *rax_34 + _GetThrowImageBase();
                                                
                                                if (sub_140016674(&var_70, rbx_5, *(rdi + 0x30)))
                                                {
                                                    int32_t rax_36;
                                                    rax_36 = arg6;
                                                    r12 = arg2;
                                                    char var_110_1 = rax_36;
                                                    rax_36 = var_108;
                                                    char var_118_1 = rax_36;
                                                    int64_t var_120_1 = var_e0;
                                                    int32_t var_138;
                                                    var_138 = rbx_5;
                                                    var_140 = &var_70;
                                                    sub_140017168(rdi, r12, var_100, arg4, arg5, 
                                                        var_140, var_138, &var_c8, arg7);
                                                    r9_1 = var_e8_1;
                                                    rbx = rax_2;
                                                    break;
                                                }
                                                
                                                r13_1 -= 1;
                                                rax_34 = &var_f8_1[1];
                                                var_f8_1 = rax_34;
                                                
                                                if (r13_1 <= 0)
                                                    goto label_140016f5b;
                                            }
                                            
                                            break;
                                        }
                                        
                                    label_140016f5b:
                                        r12_1 = r12_1 + 1;
                                        
                                        if (r12_1 == rax_27)
                                        {
                                            rbx = rax_2;
                                            r9_1 = var_e8_1;
                                            goto label_140016fd8;
                                        }
                                        
                                        rcx_7 = var_d0_1;
                                    }
                                }
                            }
                            
                            r15_1 += 1;
                        } while (r15_1 < var_78);
                    }
                }
                
                if ((*arg5 & 0x1fffffff) < 0x19930521)
                    goto label_1400170ee;
                
                int64_t rbx_6 = arg5[8];
                int64_t rax_42;
                
                if (rbx_6)
                    rax_42 = _GetImageBase();
                
                if (rbx_6 && rax_42 != -(rbx_6))
                {
                label_14001702b:
                    
                    if (arg5[9] & 4)
                    {
                        *(__vcrt_getptd() + 0x20) = rdi;
                        *(__vcrt_getptd() + 0x28) = var_100;
                        sub_14000b220();
                        /* no return */
                    }
                    
                    int64_t rbx_7 = arg5[8];
                    int32_t* rdx_8;
                    
                    if (!rbx_7)
                        rdx_8 = nullptr;
                    else
                        rdx_8 = rbx_7 + _GetImageBase();
                    
                    if (!sub_1400164fc(rdi, rdx_8))
                    {
                        char var_118_2 = arg6;
                        int64_t* var_120_2 = arg4;
                        int32_t* var_130;
                        var_130 = 0xffffffff;
                        var_140 = arg5;
                        __FrameHandler4::UnwindNestedFrames(r12, rdi, var_100, 
                            sub_14000fe28(r12, arg4, arg5, &var_e0), 0, var_140, 0xffffffff, 
                            var_130, 0);
                    }
                }
                else if (arg5[9] & 4 && !__FrameHandler3::ExecutionInCatch(arg4, arg5))
                    goto label_14001702b;
                
                goto label_1400170ee;
            }
            
            if (arg5[3] <= 0)
                goto label_1400170ee;
            
            if (!arg6)
            {
                sub_140017240(rdi, r12, r15, arg4, arg5, rbx, arg7, arg8);
            label_1400170ee:
                result = __vcrt_getptd();
                
                if (!*(result + 0x38))
                {
                    __security_check_cookie(rax_1 ^ &var_168);
                    return result;
                }
            }
        }
        else
        {
            int32_t rax_3 = rdi[8];
            
            if ((rax_3 != 0x19930520 && rax_3 - 0x19930521 > 1) || *(rdi + 0x30))
                goto label_140016de4;
            
            result = __vcrt_getptd();
            
            if (!*(result + 0x20))
            {
                __security_check_cookie(rax_1 ^ &var_168);
                return result;
            }
            
            rdi = *(__vcrt_getptd() + 0x20);
            var_108 = 1;
            r15 = *(__vcrt_getptd() + 0x28);
            var_100 = r15;
            _SetThrowImageBase(*(rdi + 0x38));
            
            if (rdi)
            {
                int32_t rax_7;
                
                if (*rdi == 0xe06d7363 && rdi[6] == 4)
                    rax_7 = rdi[8];
                
                if (*rdi != 0xe06d7363 || rdi[6] != 4
                    || (rax_7 != 0x19930520 && rax_7 - 0x19930521 > 1) || *(rdi + 0x30))
                {
                    if (*(__vcrt_getptd() + 0x38))
                    {
                        int32_t* rbx_1 = *(__vcrt_getptd() + 0x38);
                        *(__vcrt_getptd() + 0x38) = 0;
                        
                        if (!sub_1400164fc(rdi, rbx_1))
                        {
                            char rax_13;
                            int64_t rdx_2;
                            rax_13 = sub_1400165e4(rbx_1);
                            
                            if (!rax_13)
                            {
                                sub_14000b220();
                                /* no return */
                            }
                            
                            rdx_2 = 1;
                            sub_140002128(rdi);
                            sub_1400163f0(&var_c8);
                            sub_14001afe8(&var_c8, &data_140028838);
                            /* no return */
                        }
                        
                        rbx = rax_2;
                    }
                    
                    goto label_140016de4;
                }
            }
        }
    }
    
    abort();
    /* no return */
}

int64_t sub_140017168(void* arg1, int64_t* arg2, int64_t arg3, int64_t* arg4, void* arg5, int32_t* arg6, char* arg7, int32_t* arg8, char arg9)
{
    void arg_10;
    int64_t* rax = sub_14000fe28(arg2, arg4, arg5, &arg_10);
    
    if (arg7)
        sub_140016988(arg1, rax, arg6, arg7);
    
    char var_48 = arg9;
    int64_t* var_50 = arg4;
    return __FrameHandler4::UnwindNestedFrames(arg2, arg1, arg3, rax, _GetImageBase() + arg6[3], 
        arg5, *arg8, arg8[2], arg6);
}

void sub_140017240(int32_t* arg1, int64_t* arg2, int64_t arg3, int64_t* arg4, void* arg5, int32_t arg6, int32_t arg7, int64_t arg8)
{
    if (*arg1 == 0x80000003)
        return;
    
    int32_t var_c0;
    
    if (*(__vcrt_getptd() + 0x10))
    {
        int64_t rax_2 = EncodePointer(nullptr);
        
        if (*(__vcrt_getptd() + 0x10) != rax_2 && *arg1 != 0xe0434f4d && *arg1 != 0xe0434352)
        {
            var_c0 = arg6;
            int64_t var_c8_1 = arg8;
            int32_t var_d0_1 = arg7;
            void* var_d8_1 = arg5;
            sub_1400102bc(arg1);
        }
    }
    
    int64_t var_90_1 = arg4[1];
    void* var_98 = arg5;
    
    if (*(arg5 + 0xc) <= 0)
    {
        abort();
        /* no return */
    }
    
    int32_t var_d0_2 = arg7;
    uint128_t var_60;
    __FrameHandler3::GetRangeOfTrysToCheck(&var_60, &var_98, arg6, arg4, arg5);
    uint128_t zmm1_1 = var_60;
    int96_t var_88_1 = zmm1_1;
    int32_t var_48;
    
    if (_mm_bsrli_si128(zmm1_1, 8) >= var_48)
        return;
    
    int32_t rbx_2 = *var_88_1[8];
    void* r9_2 = zmm1_1;
    void* arg_8 = r9_2;
    
    do
    {
        int64_t rax_9 = *(r9_2 + 8);
        int64_t r8_2 = *(*var_88_1 + 0x10) + rbx_2 * 0x14;
        uint128_t zmm0_1 = *(r8_2 + rax_9);
        int64_t rdx_3 = *(r8_2 + rax_9 + 0x10);
        int32_t var_68_1 = rdx_3;
        uint128_t var_78 = zmm0_1;
        
        if (zmm0_1 <= arg6 && arg6 <= (zmm0_1 >> 0x20))
        {
            char* r15_3 = arg4[1] - 0x14 + rdx_3 + (_mm_bsrli_si128(zmm0_1, 8) >> 0x20) * 0x14;
            int64_t r12_1 = *(r15_3 + 4);
            
            if (!r12_1)
            {
            label_14001740c:
                
                if (!(*r15_3 & 0x40))
                {
                    char var_a0_1 = 0;
                    char var_a8_1 = 1;
                    int64_t var_b0_1 = arg8;
                    var_c0 = &var_78;
                    var_d0_2 = r15_3;
                    sub_140017168(arg1, arg2, arg3, arg4, arg5, var_d0_2, nullptr, var_c0, arg7);
                }
            }
            else
            {
                if (_GetImageBase() == -(r12_1))
                    goto label_14001740c;
                
                int64_t r12_2 = *(r15_3 + 4);
                uint64_t rax;
                
                if (!r12_2)
                    rax = 0;
                else
                    rax = _GetImageBase() + r12_2;
                
                if (!*(rax + 0x10))
                    goto label_14001740c;
            }
        }
        
        r9_2 = arg_8;
        rbx_2 += 1;
    } while (rbx_2 < var_48);
}

uint64_t sub_1400174a4(int64_t* arg1)
{
    uint32_t rdi_1;
    
    if (!arg1)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        rdi_1 = -1;
    }
    else if (!(*(arg1 + 0x14) >> 0xd & 1) || *(arg1 + 0x14) >> 0xc & 1)
        rdi_1 = -1;
    else if (!(*(arg1 + 0x14) >> 1 & 1))
    {
        *(arg1 + 0x14) |= 1;
        
        if (!(*(arg1 + 0x14) & 0x4c0))
            __acrt_stdio_allocate_buffer_nolock(arg1);
        
        char* rdi_2 = arg1[1];
        int32_t rbx_1 = arg1[4];
        *arg1 = rdi_2;
        int32_t rax_10 = _read(_fileno(arg1), rdi_2, rbx_1);
        arg1[2] = rax_10;
        
        if (rax_10 + 1 > 1)
        {
            if (!(*(arg1 + 0x14) & 6))
            {
                int32_t rax_16 = _fileno(arg1);
                int32_t rax_17;
                
                if (rax_16 != 0xffffffff)
                    rax_17 = _fileno(arg1);
                
                void* rax_22;
                
                if (rax_16 == 0xffffffff || rax_17 == 0xfffffffe)
                    rax_22 = &data_1400291e0;
                else
                {
                    int64_t rbx_3 = _fileno(arg1) >> 6;
                    uint64_t rax_20 = _fileno(arg1) & 0x3f;
                    rax_22 = (&data_14002a700)[rbx_3] + rax_20 * 0x48;
                }
                
                rax_22 = *(rax_22 + 0x38);
                rax_22 &= 0x82;
                
                if (rax_22 == 0x82)
                    *(arg1 + 0x14) |= 0x20;
            }
            
            if (arg1[4] == 0x200 && *(arg1 + 0x14) >> 6 & 1 && !(*(arg1 + 0x14) >> 8 & 1))
                arg1[4] = 0x1000;
            
            char* rax_27 = *arg1;
            arg1[2] -= 1;
            rdi_1 = *rax_27;
            *arg1 = &rax_27[1];
        }
        else
        {
            int32_t rax_11 = -(rax_10);
            *(arg1 + 0x14) |= ((rax_11 - rax_11) & 8) + 8;
            arg1[2] = 0;
            rdi_1 = -1;
        }
    }
    else
    {
        *(arg1 + 0x14) |= 0x10;
        rdi_1 = -1;
    }
    
    return rdi_1;
}

int64_t __acrt_stdio_allocate_buffer_nolock(int64_t* arg1)
{
    data_14002a160 += 1;
    int32_t rdi = 0x1000;
    arg1[1] = _calloc_base(0x1000, 1);
    _free_base(0);
    
    if (!arg1[1])
    {
        *(arg1 + 0x14) |= 0x400;
        rdi = 2;
        arg1[1] = arg1 + 0x1c;
    }
    else
        *(arg1 + 0x14) |= 0x40;
    
    arg1[4] = rdi;
    int64_t result = arg1[1];
    arg1[2] = 0;
    *arg1 = result;
    return result;
}

uint64_t __acrt_fenv_get_status(int32_t arg1 @ mxcsr) __pure
{
    int32_t rdx_1 = arg1 & 0x3f;
    int32_t r8_8 = (((rdx_1 >> 2 & 8) | (rdx_1 & 0x10)) >> 2 | (rdx_1 & 8)) >> 1
        | (((rdx_1 & 2) << 3 | (rdx_1 & 4)) * 2) | (rdx_1 & 1) << 4;
    return r8_8 << 0x18 | r8_8;
}

int64_t sub_1400176e0(int32_t arg1, int32_t arg2 @ mxcsr) __pure
{
    int32_t rdx_1 = arg1 >> 0x18 & 0x3f;
    int32_t rax_3 = rdx_1 & 2;
    int32_t rax_4 = -(rax_3);
    int32_t rax_8 = rdx_1 & 4;
    int32_t rax_9 = -(rax_8);
    int32_t rax_13 = rdx_1 & 8;
    int32_t rax_14 = -(rax_13);
    int32_t rcx_4 = ((arg1 - arg1) & 0x20) | ((rax_4 - rax_4) & 0x10) | ((rax_9 - rax_9) & 8)
        | ((rax_14 - rax_14) & 4);
    int32_t rax_17;
    rax_17 = TEST_BITD(rdx_1, 4);
    int32_t result = (arg2 & 0xffffffc0) | ((rcx_4 | rax_17 | ((rax_17 - rax_17) & 2)) & 0x3f);
    int32_t result_1 = result;
    return result;
}

uint64_t sub_140017760(int32_t arg1 @ mxcsr) __pure
{
    int16_t rax = arg1 & 0x8040;
    int32_t r8;
    
    if (rax == 0x8000)
        r8 = 0xc00;
    else if (rax != 0x40)
    {
        r8 = 0;
        
        if (rax == 0x8040)
            r8 = 0x400;
    }
    else
        r8 = 0x800;
    
    int32_t rax_2 = arg1 & 0x6000;
    int32_t rcx;
    
    if (!rax_2)
        rcx = 0;
    else if (rax_2 == 0x2000)
        rcx = 0x100;
    else if (rax_2 == 0x4000)
        rcx = 0x200;
    else
    {
        rcx = 0x300;
        
        if (rax_2 != 0x6000)
            rcx = 0;
    }
    
    uint64_t rdx_12 = (
        ((((arg1 >> 2 & 0x400) | (arg1 & 0x800)) >> 2 | (arg1 & 0x400)) >> 2 | (arg1 & 0x200)) >> 3
        | (arg1 & 0x180)) >> 3 | r8 | rcx;
    return ((rdx_12 & 0xffffff00) | rdx_12 << 2) << 0x16 | rdx_12;
}

int64_t sub_140017840(int32_t arg1, int32_t arg2 @ mxcsr) __pure
{
    int32_t rcx = arg1 & 0xc00;
    int32_t rdx_3 = (arg1 >> 0x18 & 0x3f) | (arg1 >> 0x16 & 0x300);
    int16_t rdi = 0x400;
    int16_t r11 = 0x800;
    int16_t r9;
    
    if (rcx == 0x400)
        r9 = -0x7fc0;
    else if (rcx == 0x800)
        r9 = 0x40;
    else if (rcx == 0xc00)
        r9 = -0x8000;
    else
        r9 = 0;
    
    int16_t rbx = 0x100;
    int16_t r10 = 0x200;
    int32_t rax_4 = rdx_3 & 0x300;
    int16_t r8;
    
    if (!rax_4)
        r8 = 0;
    else if (rax_4 == 0x100)
        r8 = 0x2000;
    else if (rax_4 == 0x200)
        r8 = 0x4000;
    else if (rax_4 != 0x300)
        r8 = 0;
    else
        r8 = 0x6000;
    
    int16_t rcx_1;
    
    rcx_1 = !TEST_BITD(rdx_3, 0) ? 0 : 0x1000;
    
    if (!TEST_BITD(rdx_3, 1))
        r11 = 0;
    
    if (!TEST_BITD(rdx_3, 2))
        rdi = 0;
    
    if (!TEST_BITD(rdx_3, 3))
        r10 = 0;
    
    int16_t rax_5;
    
    rax_5 = !TEST_BITD(rdx_3, 4) ? 0 : 0x80;
    
    if (!TEST_BITD(rdx_3, 5))
        rbx = 0;
    
    int32_t result =
        (arg2 & 0xffff003f) | ((r8 | rcx_1 | r11 | rdi | r10 | rax_5 | rbx | r9) & 0xffc0);
    int32_t result_1 = result;
    return result;
}

uint64_t sub_140017970(int32_t arg1) __pure
{
    return arg1 & 0x300;
}

void __chkstk(int64_t arg1 @ rax)
{
    void arg_8;
    void* r10 = &arg_8 - arg1;
    
    if (&arg_8 < arg1)
        r10 = nullptr;
    
    TEB* gsbase;
    void* StackLimit = gsbase->NtTib.StackLimit;
    
    if (r10 >= StackLimit)
        return;
    
    r10 &= 0xf000;
    
    do
    {
        StackLimit -= 0x1000;
        *StackLimit = 0;
    } while (r10 != StackLimit);
}

uint64_t sub_1400179e0(int16_t* arg1, int16_t* arg2, int64_t arg3)
{
    int64_t i_1 = arg3;
    int16_t* r11 = arg2;
    int16_t* r10 = arg1;
    
    if (!arg3)
        return 0;
    
    uint32_t rcx;
    uint32_t r8;
    int64_t i;
    
    do
    {
        rcx = *r10;
        r10 = &r10[1];
        r8 = *r11;
        r11 = &r11[1];
        
        if (rcx != r8)
        {
            uint32_t rdx = rcx + 0x20;
            
            if (rcx - 0x41 > 0x19)
                rdx = rcx;
            
            rcx = rdx;
            uint32_t rdx_1 = r8 + 0x20;
            
            if (r8 - 0x41 > 0x19)
                rdx_1 = r8;
            
            r8 = rdx_1;
        }
        
        if (rcx != r8)
            break;
        
        if (!rcx)
            break;
        
        i = i_1;
        i_1 -= 1;
    } while (i != 1);
    return rcx - r8;
}

uint64_t sub_140017a50(char* arg1, int64_t arg2, void* arg3, void (* arg4)())
{
    void var_468;
    int64_t rax_1 = __security_cookie ^ &var_468;
    char* r13 = arg1;
    uint64_t result;
    
    if (arg1)
    {
        if (arg3 && arg4)
            goto label_140017aa9;
        
        *sub_14000dedc() = 0x16;
        result = _invalid_parameter_noinfo();
    }
    else if (!arg2 && arg3 && arg4)
    {
    label_140017aa9:
        sub_14001a6bc(arg4);
        int128_t var_438[0x1f];
        sub_14001c640(&var_438, 0, 0x1f0);
        int128_t var_248[0x1f];
        result = sub_14001c640(&var_248, 0, 0x1f0);
        
        if (arg2 >= 2)
        {
            char* r15_3 = (arg2 - 1) * arg3 + r13;
            int64_t rcx_3 = 0;
            int64_t var_448_1 = 0;
            
            while (true)
            {
                result = COMBINE(0, r15_3 - r13) / arg3;
                
                if (result + 1 > 8)
                {
                    void* rbx_5 = ((result + 1) >> 1) * arg3;
                    char* rdi_2 = rbx_5 + r13;
                    
                    if (arg4(r13, rdi_2) > 0)
                    {
                        void* i_12 = arg3;
                        char* r8 = rdi_2;
                        
                        if (r13 != rdi_2)
                        {
                            void* i;
                            
                            do
                            {
                                void* rdx_6 = r8 - rbx_5;
                                char rcx_8 = *rdx_6;
                                *rdx_6 = *r8;
                                *r8 = rcx_8;
                                r8 = &r8[1];
                                i = i_12;
                                i_12 -= 1;
                            } while (i != 1);
                        }
                    }
                    
                    if (arg4(r13, r15_3) > 0)
                    {
                        void* i_9 = arg3;
                        char* rdx_8 = r15_3;
                        
                        if (r13 != r15_3)
                        {
                            void* r9_1 = r13 - r15_3;
                            void* i_1;
                            
                            do
                            {
                                char rcx_10 = *(r9_1 + rdx_8);
                                *(r9_1 + rdx_8) = *rdx_8;
                                *rdx_8 = rcx_10;
                                rdx_8 = &rdx_8[1];
                                i_1 = i_9;
                                i_9 -= 1;
                            } while (i_1 != 1);
                        }
                    }
                    
                    if (arg4(rdi_2, r15_3) > 0)
                    {
                        void* i_10 = arg3;
                        char* rdx_10 = r15_3;
                        
                        if (rdi_2 != r15_3)
                        {
                            void* r9_3 = rdi_2 - r15_3;
                            void* i_2;
                            
                            do
                            {
                                char rcx_12 = *(r9_3 + rdx_10);
                                *(r9_3 + rdx_10) = *rdx_10;
                                *rdx_10 = rcx_12;
                                rdx_10 = &rdx_10[1];
                                i_2 = i_10;
                                i_10 -= 1;
                            } while (i_2 != 1);
                        }
                    }
                    
                    char* rbx_6 = r13;
                    char* rsi_2 = r15_3;
                    char* rbp_1;
                    
                    while (true)
                    {
                        if (rdi_2 > rbx_6)
                        {
                            while (true)
                            {
                                rbx_6 += arg3;
                                
                                if (rbx_6 >= rdi_2)
                                    break;
                                
                                if (arg4(rbx_6, rdi_2) > 0)
                                    goto label_140017ccb;
                            }
                        }
                        
                        int32_t i_3;
                        
                        do
                        {
                            rbx_6 += arg3;
                            
                            if (rbx_6 > r15_3)
                                break;
                            
                            i_3 = arg4(rbx_6, rdi_2);
                        } while (i_3 <= 0);
                    label_140017ccb:
                        int32_t i_4;
                        
                        do
                        {
                            rbp_1 = rsi_2;
                            rsi_2 -= arg3;
                            
                            if (rsi_2 <= rdi_2)
                                break;
                            
                            i_4 = arg4(rsi_2, rdi_2);
                        } while (i_4 > 0);
                        
                        if (rsi_2 < rbx_6)
                            break;
                        
                        void* i_11 = arg3;
                        char* rdx_14 = rsi_2;
                        
                        if (rsi_2 != rbx_6)
                        {
                            void* r9_5 = rbx_6 - rsi_2;
                            void* i_5;
                            
                            do
                            {
                                char rcx_16 = *(r9_5 + rdx_14);
                                *(r9_5 + rdx_14) = *rdx_14;
                                *rdx_14 = rcx_16;
                                rdx_14 = &rdx_14[1];
                                i_5 = i_11;
                                i_11 -= 1;
                            } while (i_5 != 1);
                        }
                        
                        char* rax_13 = rbx_6;
                        
                        if (rdi_2 != rsi_2)
                            rax_13 = rdi_2;
                        
                        rdi_2 = rax_13;
                    }
                    
                    if (rdi_2 < rbp_1)
                    {
                        while (true)
                        {
                            rbp_1 -= arg3;
                            
                            if (rbp_1 <= rdi_2)
                                break;
                            
                            if (arg4(rbp_1, rdi_2))
                                goto label_140017d45;
                        }
                    }
                    
                    int32_t i_6;
                    
                    do
                    {
                        rbp_1 -= arg3;
                        
                        if (rbp_1 <= r13)
                            break;
                        
                        i_6 = arg4(rbp_1, rdi_2);
                    } while (!i_6);
                label_140017d45:
                    result = rbp_1 - r13;
                    rcx_3 = var_448_1;
                    
                    if (result < r15_3 - rbx_6)
                    {
                        if (rbx_6 < r15_3)
                        {
                            *(&var_438 + (rcx_3 << 3)) = rbx_6;
                            *(&var_248 + (rcx_3 << 3)) = r15_3;
                            rcx_3 += 1;
                            var_448_1 = rcx_3;
                        }
                        
                        if (r13 < rbp_1)
                        {
                            r15_3 = rbp_1;
                            continue;
                        }
                    }
                    else
                    {
                        if (r13 < rbp_1)
                        {
                            *(&var_438 + (rcx_3 << 3)) = r13;
                            *(&var_248 + (rcx_3 << 3)) = rbp_1;
                            rcx_3 += 1;
                            var_448_1 = rcx_3;
                        }
                        
                        if (rbx_6 < r15_3)
                        {
                            r13 = rbx_6;
                            continue;
                        }
                    }
                }
                else if (r15_3 > r13)
                {
                    char* rsi_1 = arg3 + r13;
                    
                    do
                    {
                        char* rbx_2 = r13;
                        char* rdi_1 = rsi_1;
                        
                        if (rsi_1 <= r15_3)
                        {
                            do
                            {
                                result = arg4(rdi_1, rbx_2);
                                char* rcx_5 = rdi_1;
                                
                                if (result <= 0)
                                    rcx_5 = rbx_2;
                                
                                rdi_1 += arg3;
                                rbx_2 = rcx_5;
                            } while (rdi_1 <= r15_3);
                        }
                        
                        void* i_8 = arg3;
                        char* rdx_3 = r15_3;
                        
                        if (rbx_2 != r15_3)
                        {
                            char* rbx_3 = rbx_2 - r15_3;
                            void* i_7;
                            
                            do
                            {
                                result = *rdx_3;
                                char rcx_6 = *(rbx_3 + rdx_3);
                                *(rbx_3 + rdx_3) = result;
                                *rdx_3 = rcx_6;
                                rdx_3 = &rdx_3[1];
                                i_7 = i_8;
                                i_8 -= 1;
                            } while (i_7 != 1);
                        }
                        
                        r15_3 -= arg3;
                    } while (r15_3 > r13);
                    
                    rcx_3 = var_448_1;
                }
                
                int64_t temp3_1 = rcx_3;
                rcx_3 -= 1;
                var_448_1 = rcx_3;
                
                if (temp3_1 - 1 < 0)
                    break;
                
                r13 = *(&var_438 + (rcx_3 << 3));
                r15_3 = *(&var_248 + (rcx_3 << 3));
            }
        }
    }
    else
    {
        *sub_14000dedc() = 0x16;
        result = _invalid_parameter_noinfo();
    }
    
    __security_check_cookie(rax_1 ^ &var_468);
    return result;
}

uint64_t sub_140017df0(char* arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    int64_t rbx = arg2;
    char* r11 = arg1;
    
    if (!arg4)
    {
        if (arg1)
            goto label_140017e27;
        
        if (!arg2)
            return 0;
    }
    else if (r11)
    {
    label_140017e27:
        
        if (rbx)
        {
            if (!arg4)
            {
                *arg1 = arg4;
                return 0;
            }
            
            if (arg3)
            {
                char* r10_1 = arg3 - r11;
                int64_t i_2 = arg4;
                
                if (arg4 != -1)
                {
                    int64_t i_3;
                    int64_t i;
                    
                    do
                    {
                        char rax_6 = *(r10_1 + arg1);
                        i_3 = i_2;
                        *arg1 = rax_6;
                        arg1 = &arg1[1];
                        
                        if (!rax_6)
                            return 0;
                        
                        int64_t temp0_1 = arg2;
                        arg2 -= 1;
                        
                        if (temp0_1 == 1)
                            break;
                        
                        i = i_2;
                        i_2 -= 1;
                    } while (i != 1);
                    int64_t i_4 = i_3 - 1;
                    
                    if (!arg2)
                        i_4 = i_3;
                    
                    if (!i_4)
                        *arg1 = i_4;
                }
                else
                {
                    int64_t i_1;
                    
                    do
                    {
                        char rax_5 = *(r10_1 + arg1);
                        *arg1 = rax_5;
                        arg1 = &arg1[1];
                        
                        if (!rax_5)
                            return 0;
                        
                        i_1 = arg2;
                        arg2 -= 1;
                    } while (i_1 != 1);
                }
                
                if (arg2)
                    return 0;
                
                if (arg4 == -1)
                {
                    r11[rbx - 1] = arg2;
                    return arg2 + 0x50;
                }
                
                *r11 = 0;
                *sub_14000dedc() = 0x22;
                _invalid_parameter_noinfo();
                return 0x22;
            }
            
            *arg1 = arg3;
        }
    }
    
    *sub_14000dedc() = 0x16;
    _invalid_parameter_noinfo();
    return 0x16;
}

char* sub_140017f20(char* arg1, char* arg2)
{
    uint64_t r10_1 = arg2 & 0xf;
    int128_t* rbx_1 = arg2 - r10_1;
    char* result = arg1;
    uint128_t zmm1 = *rbx_1;
    
    if (r10_1 - 1 <= 0xe)
        switch (r10_1)
        {
            case 1:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 1);
                break;
            }
            case 2:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 2);
                break;
            }
            case 3:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 3);
                break;
            }
            case 4:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 4);
                break;
            }
            case 5:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 5);
                break;
            }
            case 6:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 6);
                break;
            }
            case 7:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 7);
                break;
            }
            case 8:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 8);
                break;
            }
            case 9:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 9);
                break;
            }
            case 0xa:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 0xa);
                break;
            }
            case 0xb:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 0xb);
                break;
            }
            case 0xc:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 0xc);
                break;
            }
            case 0xd:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 0xd);
                break;
            }
            case 0xe:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 0xe);
                break;
            }
            case 0xf:
            {
                zmm1 = _mm_bsrli_si128(zmm1, 0xf);
                break;
            }
        }
    
    uint32_t temp0_17 = _mm_movemask_epi8(_mm_cmpeq_epi8({0}, zmm1));
    
    if (temp0_17)
    {
        uint64_t rflags_1;
        int32_t temp0_18;
        temp0_18 = _bit_scan_forward(temp0_17);
        int32_t rdi;
        
        if (r10_1)
            rdi = temp0_18 < 0x10 - r10_1;
        else
            rdi = 1;
        
        uint64_t rax_5 = 0xf - temp0_18;
        
        if (rax_5 <= 0xf)
            switch (rax_5)
            {
                case 0:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 1), 1);
                    break;
                }
                case 1:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 2), 2);
                    break;
                }
                case 2:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 3), 3);
                    break;
                }
                case 3:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 4), 4);
                    break;
                }
                case 4:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 5), 5);
                    break;
                }
                case 5:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 6), 6);
                    break;
                }
                case 6:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 7), 7);
                    break;
                }
                case 7:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 8), 8);
                    break;
                }
                case 8:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 9), 9);
                    break;
                }
                case 9:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 0xa), 0xa);
                    break;
                }
                case 0xa:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 0xb), 0xb);
                    break;
                }
                case 0xb:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 0xc), 0xc);
                    break;
                }
                case 0xc:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 0xd), 0xd);
                    break;
                }
                case 0xd:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 0xe), 0xe);
                    break;
                }
                case 0xe:
                {
                    zmm1 = _mm_bsrli_si128(_mm_slli_si128(zmm1, 0xf), 0xf);
                    break;
                }
                case 0xf:
                {
                    zmm1 = {0};
                    break;
                }
            }
        
        if (!rdi)
            goto label_1400180e8;
    }
    else if (r10_1)
    {
    label_1400180e8:
        char zmm2[0x10] = rbx_1[1];
        uint32_t temp0_50 = _mm_movemask_epi8(_mm_cmpeq_epi8(zmm2, {0}));
        int32_t temp0_51;
        uint64_t rflags_2;
        
        if (temp0_50)
            temp0_51 = _bit_scan_forward(temp0_50);
        
        if (!temp0_50 || temp0_51 - r10_1 + 0x10 > 0x10)
            /* tailcall */
            return sub_1400182e0(result, arg2);
        
        uint64_t r9_1 = 0xf - temp0_51;
        
        if (r9_1 <= 0xf)
            switch (r9_1)
            {
                case 0:
                {
                    zmm2 = _mm_slli_si128(zmm2, 1);
                    break;
                }
                case 1:
                {
                    zmm2 = _mm_slli_si128(zmm2, 2);
                    break;
                }
                case 2:
                {
                    zmm2 = _mm_slli_si128(zmm2, 3);
                    break;
                }
                case 3:
                {
                    zmm2 = _mm_slli_si128(zmm2, 4);
                    break;
                }
                case 4:
                {
                    zmm2 = _mm_slli_si128(zmm2, 5);
                    break;
                }
                case 5:
                {
                    zmm2 = _mm_slli_si128(zmm2, 6);
                    break;
                }
                case 6:
                {
                    zmm2 = _mm_slli_si128(zmm2, 7);
                    break;
                }
                case 7:
                {
                    zmm2 = _mm_slli_si128(zmm2, 8);
                    break;
                }
                case 8:
                {
                    zmm2 = _mm_slli_si128(zmm2, 9);
                    break;
                }
                case 9:
                {
                    zmm2 = _mm_slli_si128(zmm2, 0xa);
                    break;
                }
                case 0xa:
                {
                    zmm2 = _mm_slli_si128(zmm2, 0xb);
                    break;
                }
                case 0xb:
                {
                    zmm2 = _mm_slli_si128(zmm2, 0xc);
                    break;
                }
                case 0xc:
                {
                    zmm2 = _mm_slli_si128(zmm2, 0xd);
                    break;
                }
                case 0xd:
                {
                    zmm2 = _mm_slli_si128(zmm2, 0xe);
                    break;
                }
                case 0xe:
                {
                    zmm2 = _mm_slli_si128(zmm2, 0xf);
                    break;
                }
                case 0xf:
                {
                    zmm2 = {0};
                    break;
                }
            }
        
        zmm1 = _mm_or_ps(zmm1, zmm2);
    }
    else if (*(rbx_1 + 1))
        /* tailcall */
        return sub_1400182e0(arg1, arg2);
    
    char i = *result;
    
    while (i)
    {
        char zmm0[0x10] = i;
        zmm0 = _mm_unpacklo_epi8(zmm0, zmm0[0]);
        
        if (_mm_movemask_epi8(_mm_cmpeq_epi8(
                _mm_shuffle_epi32(_mm_unpacklo_epi8(zmm0, zmm0[0]), 0), zmm1)))
            return result;
        
        i = result[1];
        result = &result[1];
    }
    
    return 0;
}

char* sub_1400182e0(char* arg1, char* arg2)
{
    int128_t var_38;
    int64_t rax_1 = __security_cookie ^ &var_38;
    char i = *arg2;
    char* result = arg1;
    __builtin_memset(&var_38, 0, 0x20);
    
    while (i)
    {
        var_38 |= 1 << (i % 0x20);
        i = arg2[1];
        arg2 = &arg2[1];
    }
    
    char i_1 = *result;
    
    while (i_1)
    {
        if (*(&var_38 + (i_1 >> 3)) >> (i_1 & 7) & 1)
        {
            __security_check_cookie(rax_1 ^ &var_38);
            return result;
        }
        
        i_1 = result[1];
        result = &result[1];
    }
    
    __security_check_cookie(rax_1 ^ &var_38);
    return 0;
}

int64_t _mbsdec(int64_t arg1, void* arg2)
{
    /* tailcall */
    return _mbsdec_l(arg1, arg2, nullptr);
}

char* _mbsdec_l(int64_t arg1, void* arg2, int128_t* arg3)
{
    if (!arg1 || !arg2)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    else if (arg1 < arg2)
    {
        void* var_28;
        _LocaleUpdate::_LocaleUpdate(&var_28, arg3);
        char* result = arg2 - 1;
        void* var_18;
        
        if (*(var_18 + 8))
        {
            do
            {
                result -= 1;
                
                if (arg1 > result)
                    break;
            } while (*(*result + var_18 + 0x19) & 4);
            
            result = arg2 - ((arg2 - result) & 1) - 1;
        }
        
        char var_10;
        
        if (var_10)
        {
            void* rcx_5 = var_28;
            *(rcx_5 + 0x3a8) &= 0xfffffffd;
        }
        
        return result;
    }
    
    return nullptr;
}

int64_t _msize_base(int64_t arg1)
{
    if (arg1)
        /* tailcall */
        return HeapSize(data_14002a6f0, HEAP_NONE, arg1);
    
    *sub_14000dedc() = 0x16;
    _invalid_parameter_noinfo();
    return -1;
}

int64_t j__msize_base(int64_t arg1)
{
    /* tailcall */
    return _msize_base(arg1);
}

int64_t _realloc_base(int64_t arg1, uint64_t arg2)
{
    if (!arg1)
        return _malloc_base(arg2);
    
    if (arg2)
    {
        if (arg2 <= -0x20)
        {
            int32_t i;
            
            do
            {
                int64_t result = HeapReAlloc(data_14002a6f0, HEAP_NONE, arg1, arg2);
                
                if (result)
                    return result;
                
                if (!sub_14000af50())
                    break;
                
                i = sub_14000d650();
            } while (i);
        }
        
        *sub_14000dedc() = 0xc;
    }
    else
        _free_base(arg1);
    
    return 0;
}

char* sub_1400184ec(int64_t arg1, char arg2)
{
    uint32_t rax_2 = arg2;
    int128_t* r8_1 = arg1 & 0xfffffffffffffff0;
    uint32_t r10_2 = rax_2 << 8 | rax_2;
    uint128_t zmm2 = *r8_1;
    uint128_t zmm0 = zmm2;
    uint32_t temp0_1[0x4] = _mm_shuffle_epi32(_mm_shufflelo_epi16(r10_2, 0), 0);
    zmm2 = _mm_cmpeq_epi8(zmm2, {0});
    int32_t i;
    uint32_t zmm1[0x4];
    
    for (i = _mm_movemask_epi8(_mm_or_ps(_mm_cmpeq_epi8(zmm0, temp0_1), zmm2))
        & 0xffffffff << (arg1 & 0xf); !i; 
        i = _mm_movemask_epi8(_mm_or_ps(_mm_cmpeq_epi8(zmm1, temp0_1), zmm0)))
    {
        r8_1 = &r8_1[1];
        zmm0 = *r8_1;
        zmm1 = zmm0;
        zmm0 = _mm_cmpeq_epi8(zmm0, {0});
    }
    
    uint64_t rflags;
    int32_t temp0_10;
    temp0_10 = _bit_scan_forward(i);
    char* result = temp0_10 + r8_1;
    
    if (*result == r10_2)
        return result;
    
    return nullptr;
}

uint64_t sub_140018570(char* arg1, char* arg2, uint64_t arg3)
{
    void* rsi = arg2;
    char* r14 = arg1;
    
    if (!data_14002a1b8)
        return sub_14001b090(arg1, arg2, arg3);
    
    char var_10_1 = 0;
    void** rax_1 = __vcrt_getptd();
    int64_t var_20 = rax_1[0x12];
    int64_t var_18 = rax_1[0x11];
    __acrt_update_locale_info(rax_1, &var_20);
    sub_14000e5d8(rax_1, &var_18);
    void** rax_4 = rax_1;
    int32_t rcx_2 = rax_4[0x75];
    uint32_t rcx_3;
    
    if (rcx_2 & 2)
        rcx_3 = var_10_1;
    else
    {
        rax_4[0x75] = rcx_2 | 2;
        rcx_3 = 1;
        rax_4 = rax_1;
        var_10_1 = 1;
    }
    
    int32_t rbx_1;
    
    if (!arg3)
    {
        if (rcx_3)
            rax_4[0x75] &= 0xfffffffd;
        
        rbx_1 = 0;
    }
    else if (r14 && rsi)
    {
        rbx_1 = 0x7fffffff;
        
        if (arg3 <= 0x7fffffff)
        {
            int64_t rax_8 = var_20;
            int64_t rdx_2 = *(rax_8 + 0x130);
            
            if (rdx_2)
            {
                int32_t rax_11 = __acrt_CompareStringA(&var_20, rdx_2, 0x1001, r14, arg3, rsi, 
                    arg3, *(rax_8 + 0x14));
                
                if (rax_11)
                    rbx_1 = rax_11 - 2;
                else
                    *sub_14000dedc() = 0x16;
                
                goto label_1400186e4;
            }
            
            int32_t rax_9 = sub_14001b120(r14, rsi, arg3, &var_20);
            
            if (var_10_1)
                rax_1[0x75] &= 0xfffffffd;
            
            rbx_1 = rax_9;
        }
        else
        {
            *sub_14000dedc() = 0x16;
            _invalid_parameter_noinfo();
        label_1400186e4:
            
            if (var_10_1)
                rax_1[0x75] &= 0xfffffffd;
        }
    }
    else
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        
        if (var_10_1)
            rax_1[0x75] &= 0xfffffffd;
        
        rbx_1 = 0x7fffffff;
    }
    
    return rbx_1;
}

uint64_t __acrt_SetEnvironmentVariableA(char* arg1, char* arg2)
{
    int64_t var_48;
    __builtin_memset(&var_48, 0, 0x29);
    PWSTR lpValue = nullptr;
    int64_t var_78;
    __builtin_memset(&var_78, 0, 0x29);
    void* var_98;
    _LocaleUpdate::_LocaleUpdate(&var_98, nullptr);
    uint32_t rbx = 0xfde9;
    void* var_90;
    char var_80;
    uint32_t r9;
    
    if (*(var_90 + 0xc) != 0xfde9)
    {
        if (sub_14000b744())
        {
            if (var_80)
            {
                void* rax_4 = var_98;
                *(rax_4 + 0x3a8) &= 0xfffffffd;
            }
            
            r9 = 0;
        }
        else
        {
            if (var_80)
            {
                void* rax_3 = var_98;
                *(rax_3 + 0x3a8) &= 0xfffffffd;
            }
            
            r9 = 1;
        }
    }
    else
    {
        if (var_80)
        {
            void* rax_1 = var_98;
            *(rax_1 + 0x3a8) &= 0xfffffffd;
        }
        
        r9 = 0xfde9;
    }
    
    void arg_18;
    int32_t rax_5 = sub_1400116d4(arg1, &var_48, &arg_18, r9);
    int32_t rax_11;
    
    if (!rax_5)
    {
        _LocaleUpdate::_LocaleUpdate(&var_98, nullptr);
        
        if (*(var_90 + 0xc) != 0xfde9)
        {
            if (sub_14000b744())
            {
                if (var_80)
                {
                    void* rax_10 = var_98;
                    *(rax_10 + 0x3a8) &= 0xfffffffd;
                }
                
                rbx = 0;
            }
            else
            {
                if (var_80)
                {
                    void* rax_9 = var_98;
                    *(rax_9 + 0x3a8) &= 0xfffffffd;
                }
                
                rbx = 1;
            }
        }
        else if (var_80)
        {
            void* rax_7 = var_98;
            *(rax_7 + 0x3a8) &= 0xfffffffd;
        }
        
        rax_11 = sub_1400116d4(arg2, &var_78, &arg_18, rbx);
        PWSTR lpValue_1;
        lpValue = lpValue_1;
    }
    
    PWSTR lpName;
    BOOL rbx_1;
    
    if (rax_5 || rax_11)
        rbx_1 = 0;
    else
        rbx_1 = SetEnvironmentVariableW(lpName, lpValue);
    
    char var_50;
    
    if (var_50)
        _free_base(lpValue);
    
    char var_20;
    
    if (var_20)
        _free_base(lpName);
    
    return rbx_1;
}

void j_sub_14000d150(int64_t arg1)
{
    /* tailcall */
    return j_sub_14000d150(arg1);
}

int32_t* memcpy(int32_t* arg1, int32_t* arg2, void* arg3)
{
    int32_t* result = arg1;
    
    if (arg3 > 0xf)
    {
        int256_t zmm2;
        
        if (arg3 <= 0x20)
        {
            int256_t zmm1;
            zmm1 = *arg2;
            zmm2 = *(arg2 + arg3 - 0x10);
            *arg1 = zmm1;
            *(arg1 + arg3 - 0x10) = zmm2;
            return result;
        }
        
        void* r9_7 = arg2 + arg3;
        
        if (arg1 <= arg2)
            r9_7 = arg1;
        
        if (arg1 < r9_7)
            /* tailcall */
            return sub_14001b700(arg1, arg2, arg3, result);
        
        if (arg3 < 0x180000 && arg3 >= 0x2000)
            /* tailcall */
            return memcpy_repmovs(arg1, arg2, arg3);
        
        int256_t zmm0 = *arg2;
        int256_t zmm5 = *(arg2 + arg3 - 0x20);
        
        if (arg3 > 0x100)
        {
            void* r9_11 = (arg1 & 0x1f) - 0x20;
            arg1 -= r9_11;
            arg2 -= r9_11;
            arg3 += r9_11;
            
            if (arg3 > 0x100)
            {
                int256_t zmm3;
                int256_t zmm4;
                
                if (arg3 > 0x180000)
                {
                    do
                    {
                        zmm2 = *(arg2 + 0x20);
                        zmm3 = *(arg2 + 0x40);
                        zmm4 = *(arg2 + 0x60);
                        *arg1 = *arg2;
                        *(arg1 + 0x20) = zmm2;
                        *(arg1 + 0x40) = zmm3;
                        *(arg1 + 0x60) = zmm4;
                        zmm2 = *(arg2 + 0xa0);
                        zmm3 = *(arg2 + 0xc0);
                        zmm4 = *(arg2 + 0xe0);
                        *(arg1 + 0x80) = *(arg2 + 0x80);
                        *(arg1 + 0xa0) = zmm2;
                        *(arg1 + 0xc0) = zmm3;
                        *(arg1 + 0xe0) = zmm4;
                        arg1 = &arg1[0x40];
                        arg2 = &arg2[0x40];
                        arg3 -= 0x100;
                    } while (arg3 >= 0x100);
                    
                    void* r9_15 = (arg3 + 0x1f) & 0xffffffffffffffe0;
                    
                    switch (r9_15 >> 5)
                    {
                        case 1:
                        {
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                        case 2:
                        {
                            *(arg1 + r9_15 - 0x40) = *(arg2 + r9_15 - 0x40);
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                        case 3:
                        {
                            goto label_140018cba;
                        }
                        case 4:
                        {
                            goto label_140018cac;
                        }
                        case 5:
                        {
                            goto label_140018c9b;
                        }
                        case 6:
                        {
                            goto label_140018c87;
                        }
                        case 7:
                        {
                            goto label_140018c73;
                        }
                        case 8:
                        {
                            *(arg1 + r9_15 - 0x100) = *(arg2 + r9_15 - 0x100);
                        label_140018c73:
                            *(arg1 + r9_15 - 0xe0) = *(arg2 + r9_15 - 0xe0);
                        label_140018c87:
                            *(arg1 + r9_15 - 0xc0) = *(arg2 + r9_15 - 0xc0);
                        label_140018c9b:
                            *(arg1 + r9_15 - 0xa0) = *(arg2 + r9_15 - 0xa0);
                        label_140018cac:
                            *(arg1 + r9_15 - 0x80) = *(arg2 + r9_15 - 0x80);
                        label_140018cba:
                            *(arg1 + r9_15 - 0x60) = *(arg2 + r9_15 - 0x60);
                            *(arg1 + r9_15 - 0x40) = *(arg2 + r9_15 - 0x40);
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                    }
                    
                    *result = zmm0;
                    _mm256_zeroupper();
                    return result;
                }
                
                do
                {
                    zmm2 = *(arg2 + 0x20);
                    zmm3 = *(arg2 + 0x40);
                    zmm4 = *(arg2 + 0x60);
                    *arg1 = *arg2;
                    *(arg1 + 0x20) = zmm2;
                    *(arg1 + 0x40) = zmm3;
                    *(arg1 + 0x60) = zmm4;
                    zmm2 = *(arg2 + 0xa0);
                    zmm3 = *(arg2 + 0xc0);
                    zmm4 = *(arg2 + 0xe0);
                    *(arg1 + 0x80) = *(arg2 + 0x80);
                    *(arg1 + 0xa0) = zmm2;
                    *(arg1 + 0xc0) = zmm3;
                    *(arg1 + 0xe0) = zmm4;
                    arg1 = &arg1[0x40];
                    arg2 = &arg2[0x40];
                    arg3 -= 0x100;
                } while (arg3 >= 0x100);
            }
        }
        
        void* r9_13 = (arg3 + 0x1f) & 0xffffffffffffffe0;
        
        switch (r9_13 >> 5)
        {
            case 1:
            {
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
            case 2:
            {
                *(arg1 + r9_13 - 0x40) = *(arg2 + r9_13 - 0x40);
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
            case 3:
            {
                goto label_140018b8a;
            }
            case 4:
            {
                goto label_140018b7c;
            }
            case 5:
            {
                goto label_140018b6b;
            }
            case 6:
            {
                goto label_140018b57;
            }
            case 7:
            {
                goto label_140018b43;
            }
            case 8:
            {
                *(arg1 + r9_13 - 0x100) = *(arg2 + r9_13 - 0x100);
            label_140018b43:
                *(arg1 + r9_13 - 0xe0) = *(arg2 + r9_13 - 0xe0);
            label_140018b57:
                *(arg1 + r9_13 - 0xc0) = *(arg2 + r9_13 - 0xc0);
            label_140018b6b:
                *(arg1 + r9_13 - 0xa0) = *(arg2 + r9_13 - 0xa0);
            label_140018b7c:
                *(arg1 + r9_13 - 0x80) = *(arg2 + r9_13 - 0x80);
            label_140018b8a:
                *(arg1 + r9_13 - 0x60) = *(arg2 + r9_13 - 0x60);
                *(arg1 + r9_13 - 0x40) = *(arg2 + r9_13 - 0x40);
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
        }
        
        *result = zmm0;
        _mm256_zeroupper();
        return result;
    }
    
    switch (arg3)
    {
        case nullptr:
        {
            return result;
            break;
        }
        case 1:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 2:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 3:
        {
            char r8_4 = *(arg2 + 2);
            *result = *arg2;
            *(result + 2) = r8_4;
            return result;
            break;
        }
        case 4:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 5:
        {
            char r8_10 = arg2[1];
            *result = *arg2;
            result[1] = r8_10;
            return result;
            break;
        }
        case 6:
        {
            int16_t r8_9 = arg2[1];
            *result = *arg2;
            result[1] = r8_9;
            return result;
            break;
        }
        case 7:
        {
            int16_t r8_2 = arg2[1];
            char r9_4 = *(arg2 + 6);
            *result = *arg2;
            result[1] = r8_2;
            *(result + 6) = r9_4;
            return result;
            break;
        }
        case 8:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 9:
        {
            char rcx_8 = arg2[2];
            *result = *arg2;
            result[2] = rcx_8;
            return result;
            break;
        }
        case 0xa:
        {
            int16_t rcx_7 = arg2[2];
            *result = *arg2;
            result[2] = rcx_7;
            return result;
            break;
        }
        case 0xb:
        {
            int16_t rcx_1 = arg2[2];
            char r9_3 = *(arg2 + 0xa);
            *result = *arg2;
            result[2] = rcx_1;
            *(result + 0xa) = r9_3;
            return result;
            break;
        }
        case 0xc:
        {
            int32_t rcx_9 = arg2[2];
            *result = *arg2;
            result[2] = rcx_9;
            return result;
            break;
        }
        case 0xd:
        {
            int32_t rcx_6 = arg2[2];
            char r9_6 = arg2[3];
            *result = *arg2;
            result[2] = rcx_6;
            result[3] = r9_6;
            return result;
            break;
        }
        case 0xe:
        {
            int32_t rcx_4 = arg2[2];
            int16_t r9_5 = arg2[3];
            *result = *arg2;
            result[2] = rcx_4;
            result[3] = r9_5;
            return result;
            break;
        }
        case 0xf:
        {
            int32_t rcx = arg2[2];
            int16_t r9_2 = arg2[3];
            char r10 = *(arg2 + 0xe);
            *result = *arg2;
            result[2] = rcx;
            result[3] = r9_2;
            *(result + 0xe) = r10;
            return result;
            break;
        }
    }
}

int32_t* sub_140018d00(int32_t* arg1, int32_t* arg2, void* arg3)
{
    int32_t* result = arg1;
    
    if (arg3 > 0xf)
    {
        int256_t zmm2;
        
        if (arg3 <= 0x20)
        {
            int256_t zmm1;
            zmm1 = *arg2;
            zmm2 = *(arg2 + arg3 - 0x10);
            *arg1 = zmm1;
            *(arg1 + arg3 - 0x10) = zmm2;
            return result;
        }
        
        void* r9_7 = arg2 + arg3;
        
        if (arg1 <= arg2)
            r9_7 = arg1;
        
        if (arg1 < r9_7)
            /* tailcall */
            return sub_14001b810(arg1, arg2, arg3, result);
        
        if (arg3 < 0x180000 && arg3 >= 0x2000)
            /* tailcall */
            return sub_14001b7f0(arg1, arg2, arg3);
        
        int256_t zmm0 = *arg2;
        int256_t zmm5 = *(arg2 + arg3 - 0x20);
        
        if (arg3 > 0x100)
        {
            void* r9_11 = (arg1 & 0x1f) - 0x20;
            arg1 -= r9_11;
            arg2 -= r9_11;
            arg3 += r9_11;
            
            if (arg3 > 0x100)
            {
                int256_t zmm3;
                int256_t zmm4;
                
                if (arg3 > 0x180000)
                {
                    do
                    {
                        zmm2 = *(arg2 + 0x20);
                        zmm3 = *(arg2 + 0x40);
                        zmm4 = *(arg2 + 0x60);
                        *arg1 = *arg2;
                        *(arg1 + 0x20) = zmm2;
                        *(arg1 + 0x40) = zmm3;
                        *(arg1 + 0x60) = zmm4;
                        zmm2 = *(arg2 + 0xa0);
                        zmm3 = *(arg2 + 0xc0);
                        zmm4 = *(arg2 + 0xe0);
                        *(arg1 + 0x80) = *(arg2 + 0x80);
                        *(arg1 + 0xa0) = zmm2;
                        *(arg1 + 0xc0) = zmm3;
                        *(arg1 + 0xe0) = zmm4;
                        arg1 = &arg1[0x40];
                        arg2 = &arg2[0x40];
                        arg3 -= 0x100;
                    } while (arg3 >= 0x100);
                    
                    void* r9_15 = (arg3 + 0x1f) & 0xffffffffffffffe0;
                    
                    switch (r9_15 >> 5)
                    {
                        case 1:
                        {
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                        case 2:
                        {
                            *(arg1 + r9_15 - 0x40) = *(arg2 + r9_15 - 0x40);
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                        case 3:
                        {
                            goto label_1400190ea;
                        }
                        case 4:
                        {
                            goto label_1400190dc;
                        }
                        case 5:
                        {
                            goto label_1400190cb;
                        }
                        case 6:
                        {
                            goto label_1400190b7;
                        }
                        case 7:
                        {
                            goto label_1400190a3;
                        }
                        case 8:
                        {
                            *(arg1 + r9_15 - 0x100) = *(arg2 + r9_15 - 0x100);
                        label_1400190a3:
                            *(arg1 + r9_15 - 0xe0) = *(arg2 + r9_15 - 0xe0);
                        label_1400190b7:
                            *(arg1 + r9_15 - 0xc0) = *(arg2 + r9_15 - 0xc0);
                        label_1400190cb:
                            *(arg1 + r9_15 - 0xa0) = *(arg2 + r9_15 - 0xa0);
                        label_1400190dc:
                            *(arg1 + r9_15 - 0x80) = *(arg2 + r9_15 - 0x80);
                        label_1400190ea:
                            *(arg1 + r9_15 - 0x60) = *(arg2 + r9_15 - 0x60);
                            *(arg1 + r9_15 - 0x40) = *(arg2 + r9_15 - 0x40);
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                    }
                    
                    *result = zmm0;
                    _mm256_zeroupper();
                    return result;
                }
                
                do
                {
                    zmm2 = *(arg2 + 0x20);
                    zmm3 = *(arg2 + 0x40);
                    zmm4 = *(arg2 + 0x60);
                    *arg1 = *arg2;
                    *(arg1 + 0x20) = zmm2;
                    *(arg1 + 0x40) = zmm3;
                    *(arg1 + 0x60) = zmm4;
                    zmm2 = *(arg2 + 0xa0);
                    zmm3 = *(arg2 + 0xc0);
                    zmm4 = *(arg2 + 0xe0);
                    *(arg1 + 0x80) = *(arg2 + 0x80);
                    *(arg1 + 0xa0) = zmm2;
                    *(arg1 + 0xc0) = zmm3;
                    *(arg1 + 0xe0) = zmm4;
                    arg1 = &arg1[0x40];
                    arg2 = &arg2[0x40];
                    arg3 -= 0x100;
                } while (arg3 >= 0x100);
            }
        }
        
        void* r9_13 = (arg3 + 0x1f) & 0xffffffffffffffe0;
        
        switch (r9_13 >> 5)
        {
            case 1:
            {
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
            case 2:
            {
                *(arg1 + r9_13 - 0x40) = *(arg2 + r9_13 - 0x40);
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
            case 3:
            {
                goto label_140018fba;
            }
            case 4:
            {
                goto label_140018fac;
            }
            case 5:
            {
                goto label_140018f9b;
            }
            case 6:
            {
                goto label_140018f87;
            }
            case 7:
            {
                goto label_140018f73;
            }
            case 8:
            {
                *(arg1 + r9_13 - 0x100) = *(arg2 + r9_13 - 0x100);
            label_140018f73:
                *(arg1 + r9_13 - 0xe0) = *(arg2 + r9_13 - 0xe0);
            label_140018f87:
                *(arg1 + r9_13 - 0xc0) = *(arg2 + r9_13 - 0xc0);
            label_140018f9b:
                *(arg1 + r9_13 - 0xa0) = *(arg2 + r9_13 - 0xa0);
            label_140018fac:
                *(arg1 + r9_13 - 0x80) = *(arg2 + r9_13 - 0x80);
            label_140018fba:
                *(arg1 + r9_13 - 0x60) = *(arg2 + r9_13 - 0x60);
                *(arg1 + r9_13 - 0x40) = *(arg2 + r9_13 - 0x40);
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
        }
        
        *result = zmm0;
        _mm256_zeroupper();
        return result;
    }
    
    switch (arg3)
    {
        case nullptr:
        {
            return result;
            break;
        }
        case 1:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 2:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 3:
        {
            char r8_4 = *(arg2 + 2);
            *result = *arg2;
            *(result + 2) = r8_4;
            return result;
            break;
        }
        case 4:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 5:
        {
            char r8_10 = arg2[1];
            *result = *arg2;
            result[1] = r8_10;
            return result;
            break;
        }
        case 6:
        {
            int16_t r8_9 = arg2[1];
            *result = *arg2;
            result[1] = r8_9;
            return result;
            break;
        }
        case 7:
        {
            int16_t r8_2 = arg2[1];
            char r9_4 = *(arg2 + 6);
            *result = *arg2;
            result[1] = r8_2;
            *(result + 6) = r9_4;
            return result;
            break;
        }
        case 8:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 9:
        {
            char rcx_8 = arg2[2];
            *result = *arg2;
            result[2] = rcx_8;
            return result;
            break;
        }
        case 0xa:
        {
            int16_t rcx_7 = arg2[2];
            *result = *arg2;
            result[2] = rcx_7;
            return result;
            break;
        }
        case 0xb:
        {
            int16_t rcx_1 = arg2[2];
            char r9_3 = *(arg2 + 0xa);
            *result = *arg2;
            result[2] = rcx_1;
            *(result + 0xa) = r9_3;
            return result;
            break;
        }
        case 0xc:
        {
            int32_t rcx_9 = arg2[2];
            *result = *arg2;
            result[2] = rcx_9;
            return result;
            break;
        }
        case 0xd:
        {
            int32_t rcx_6 = arg2[2];
            char r9_6 = arg2[3];
            *result = *arg2;
            result[2] = rcx_6;
            result[3] = r9_6;
            return result;
            break;
        }
        case 0xe:
        {
            int32_t rcx_4 = arg2[2];
            int16_t r9_5 = arg2[3];
            *result = *arg2;
            result[2] = rcx_4;
            result[3] = r9_5;
            return result;
            break;
        }
        case 0xf:
        {
            int32_t rcx = arg2[2];
            int16_t r9_2 = arg2[3];
            char r10 = *(arg2 + 0xe);
            *result = *arg2;
            result[2] = rcx;
            result[3] = r9_2;
            *(result + 0xe) = r10;
            return result;
            break;
        }
    }
}

int32_t* sub_140019130(int32_t* arg1, int32_t* arg2, void* arg3)
{
    int32_t* result = arg1;
    
    if (arg3 > 0xf)
    {
        int128_t zmm2;
        
        if (arg3 <= 0x20)
        {
            zmm2 = *(arg2 + arg3 - 0x10);
            *arg1 = *arg2;
            *(arg1 + arg3 - 0x10) = zmm2;
            return result;
        }
        
        int32_t* r9_7 = arg2 + arg3;
        
        if (arg1 <= arg2)
            r9_7 = arg1;
        
        if (arg1 < r9_7)
            /* tailcall */
            return sub_14001b700(arg1, arg2, arg3, result);
        
        if (arg3 >= 0x800)
            /* tailcall */
            return memcpy_repmovs(arg1, arg2, arg3);
        
        int128_t zmm0 = *arg2;
        int128_t zmm5 = *(arg2 + arg3 - 0x10);
        
        if (arg3 > 0x80)
        {
            void* r9_11 = (arg1 & 0xf) - 0x10;
            arg1 -= r9_11;
            arg2 -= r9_11;
            arg3 += r9_11;
            
            if (arg3 > 0x80)
            {
                do
                {
                    zmm2 = *(arg2 + 0x10);
                    int128_t zmm3 = *(arg2 + 0x20);
                    int128_t zmm4 = *(arg2 + 0x30);
                    *arg1 = *arg2;
                    *(arg1 + 0x10) = zmm2;
                    *(arg1 + 0x20) = zmm3;
                    *(arg1 + 0x30) = zmm4;
                    zmm2 = *(arg2 + 0x50);
                    zmm3 = *(arg2 + 0x60);
                    zmm4 = *(arg2 + 0x70);
                    *(arg1 + 0x40) = *(arg2 + 0x40);
                    *(arg1 + 0x50) = zmm2;
                    *(arg1 + 0x60) = zmm3;
                    *(arg1 + 0x70) = zmm4;
                    arg1 = &arg1[0x20];
                    arg2 = &arg2[0x20];
                    arg3 -= 0x80;
                } while (arg3 >= 0x80);
            }
        }
        
        void* r9_13 = (arg3 + 0xf) & 0xfffffffffffffff0;
        
        switch (jump_table_14002f160[r9_13 >> 4])
        {
            case 0x19359:
            {
                *(arg1 + r9_13 - 0x80) = *(arg2 + r9_13 - 0x80);
            label_14001936e:
                *(arg1 + r9_13 - 0x70) = *(arg2 + r9_13 - 0x70);
            label_14001937c:
                *(arg1 + r9_13 - 0x60) = *(arg2 + r9_13 - 0x60);
            label_14001938a:
                *(arg1 + r9_13 - 0x50) = *(arg2 + r9_13 - 0x50);
            label_140019398:
                *(arg1 + r9_13 - 0x40) = *(arg2 + r9_13 - 0x40);
            label_1400193a6:
                *(arg1 + r9_13 - 0x30) = *(arg2 + r9_13 - 0x30);
                *(arg1 + r9_13 - 0x20) = *(arg2 + r9_13 - 0x20);
                *(arg1 + arg3 - 0x10) = zmm5;
                break;
            }
            case 0x19367:
            {
                goto label_14001936e;
            }
            case 0x19375:
            {
                goto label_14001937c;
            }
            case 0x19383:
            {
                goto label_14001938a;
            }
            case 0x19391:
            {
                goto label_140019398;
            }
            case 0x1939f:
            {
                goto label_1400193a6;
            }
            case 0x193ad:
            {
                *(arg1 + r9_13 - 0x20) = *(arg2 + r9_13 - 0x20);
                *(arg1 + arg3 - 0x10) = zmm5;
                break;
            }
            case 0x193bb:
            {
                *(arg1 + arg3 - 0x10) = zmm5;
                break;
            }
        }
        
        *result = zmm0;
        return result;
    }
    
    switch (arg3)
    {
        case nullptr:
        {
            return result;
            break;
        }
        case 1:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 2:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 3:
        {
            char r8_4 = *(arg2 + 2);
            *result = *arg2;
            *(result + 2) = r8_4;
            return result;
            break;
        }
        case 4:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 5:
        {
            char r8_10 = arg2[1];
            *result = *arg2;
            result[1] = r8_10;
            return result;
            break;
        }
        case 6:
        {
            int16_t r8_9 = arg2[1];
            *result = *arg2;
            result[1] = r8_9;
            return result;
            break;
        }
        case 7:
        {
            int16_t r8_2 = arg2[1];
            char r9_4 = *(arg2 + 6);
            *result = *arg2;
            result[1] = r8_2;
            *(result + 6) = r9_4;
            return result;
            break;
        }
        case 8:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 9:
        {
            char rcx_8 = arg2[2];
            *result = *arg2;
            result[2] = rcx_8;
            return result;
            break;
        }
        case 0xa:
        {
            int16_t rcx_7 = arg2[2];
            *result = *arg2;
            result[2] = rcx_7;
            return result;
            break;
        }
        case 0xb:
        {
            int16_t rcx_1 = arg2[2];
            char r9_3 = *(arg2 + 0xa);
            *result = *arg2;
            result[2] = rcx_1;
            *(result + 0xa) = r9_3;
            return result;
            break;
        }
        case 0xc:
        {
            int32_t rcx_9 = arg2[2];
            *result = *arg2;
            result[2] = rcx_9;
            return result;
            break;
        }
        case 0xd:
        {
            int32_t rcx_6 = arg2[2];
            char r9_6 = arg2[3];
            *result = *arg2;
            result[2] = rcx_6;
            result[3] = r9_6;
            return result;
            break;
        }
        case 0xe:
        {
            int32_t rcx_4 = arg2[2];
            int16_t r9_5 = arg2[3];
            *result = *arg2;
            result[2] = rcx_4;
            result[3] = r9_5;
            return result;
            break;
        }
        case 0xf:
        {
            int32_t rcx = arg2[2];
            int16_t r9_2 = arg2[3];
            char r10 = *(arg2 + 0xe);
            *result = *arg2;
            result[2] = rcx;
            result[3] = r9_2;
            *(result + 0xe) = r10;
            return result;
            break;
        }
    }
}

int32_t* sub_1400193e0(int32_t* arg1, int32_t* arg2, void* arg3)
{
    if (arg3 > 0xf)
    {
        int128_t zmm2;
        
        if (arg3 <= 0x20)
        {
            zmm2 = *(arg2 + arg3 - 0x10);
            *arg1 = *arg2;
            *(arg1 + arg3 - 0x10) = zmm2;
            return arg1;
        }
        
        int32_t* r9_7 = arg2 + arg3;
        
        if (arg1 <= arg2)
            r9_7 = arg1;
        
        if (arg1 < r9_7)
            /* tailcall */
            return sub_14001b810(arg1, arg2, arg3, arg1);
        
        if (arg3 >= 0x800)
            /* tailcall */
            return sub_14001b7f0(arg1, arg2, arg3);
        
        int512_t zmm0;
        zmm0 = *arg2;
        int512_t zmm5;
        zmm5 = *(arg2 + arg3 - 0x10);
        
        if (arg3 > 0x80)
        {
            void* rcx_17 = arg1 - ((arg1 & 0xf) - 0x10);
            void* rdx_1 = arg2 - ((arg1 & 0xf) - 0x10);
            arg3 += (arg1 & 0xf) - 0x10;
            
            if (arg3 > 0x80)
            {
                do
                {
                    zmm2 = *(rdx_1 + 0x10);
                    int128_t zmm3 = *(rdx_1 + 0x20);
                    int128_t zmm4 = *(rdx_1 + 0x30);
                    *rcx_17 = *rdx_1;
                    *(rcx_17 + 0x10) = zmm2;
                    *(rcx_17 + 0x20) = zmm3;
                    *(rcx_17 + 0x30) = zmm4;
                    zmm2 = *(rdx_1 + 0x50);
                    zmm3 = *(rdx_1 + 0x60);
                    zmm4 = *(rdx_1 + 0x70);
                    *(rcx_17 + 0x40) = *(rdx_1 + 0x40);
                    *(rcx_17 + 0x50) = zmm2;
                    *(rcx_17 + 0x60) = zmm3;
                    *(rcx_17 + 0x70) = zmm4;
                    rcx_17 += 0x80;
                    rdx_1 += 0x80;
                    arg3 -= 0x80;
                } while (arg3 >= 0x80);
            }
        }
        
        /* jump -> &__dos_header.e_magic[
            *((((arg3 + 0xf) & 0xfffffffffffffff0) >> 4 << 2) + 0x14002f1d0)] */
    }
    
    switch (arg3)
    {
        case nullptr:
        {
            return arg1;
            break;
        }
        case 1:
        {
            *arg1 = *arg2;
            return arg1;
            break;
        }
        case 2:
        {
            *arg1 = *arg2;
            return arg1;
            break;
        }
        case 3:
        {
            char r8_4 = *(arg2 + 2);
            *arg1 = *arg2;
            *(arg1 + 2) = r8_4;
            return arg1;
            break;
        }
        case 4:
        {
            *arg1 = *arg2;
            return arg1;
            break;
        }
        case 5:
        {
            char r8_10 = arg2[1];
            *arg1 = *arg2;
            arg1[1] = r8_10;
            return arg1;
            break;
        }
        case 6:
        {
            int16_t r8_9 = arg2[1];
            *arg1 = *arg2;
            arg1[1] = r8_9;
            return arg1;
            break;
        }
        case 7:
        {
            int16_t r8_2 = arg2[1];
            char r9_4 = *(arg2 + 6);
            *arg1 = *arg2;
            arg1[1] = r8_2;
            *(arg1 + 6) = r9_4;
            return arg1;
            break;
        }
        case 8:
        {
            *arg1 = *arg2;
            return arg1;
            break;
        }
        case 9:
        {
            char rcx_8 = arg2[2];
            *arg1 = *arg2;
            arg1[2] = rcx_8;
            return arg1;
            break;
        }
        case 0xa:
        {
            int16_t rcx_7 = arg2[2];
            *arg1 = *arg2;
            arg1[2] = rcx_7;
            return arg1;
            break;
        }
        case 0xb:
        {
            int16_t rcx_1 = arg2[2];
            char r9_3 = *(arg2 + 0xa);
            *arg1 = *arg2;
            arg1[2] = rcx_1;
            *(arg1 + 0xa) = r9_3;
            return arg1;
            break;
        }
        case 0xc:
        {
            int32_t rcx_9 = arg2[2];
            *arg1 = *arg2;
            arg1[2] = rcx_9;
            return arg1;
            break;
        }
        case 0xd:
        {
            int32_t rcx_6 = arg2[2];
            char r9_6 = arg2[3];
            *arg1 = *arg2;
            arg1[2] = rcx_6;
            arg1[3] = r9_6;
            return arg1;
            break;
        }
        case 0xe:
        {
            int32_t rcx_4 = arg2[2];
            int16_t r9_5 = arg2[3];
            *arg1 = *arg2;
            arg1[2] = rcx_4;
            arg1[3] = r9_5;
            return arg1;
            break;
        }
        case 0xf:
        {
            int32_t rcx = arg2[2];
            int16_t r9_2 = arg2[3];
            char r10 = *(arg2 + 0xe);
            *arg1 = *arg2;
            arg1[2] = rcx;
            arg1[3] = r9_2;
            *(arg1 + 0xe) = r10;
            return arg1;
            break;
        }
    }
}

char* __strncnt(char* arg1, int64_t arg2)
{
    char* result = nullptr;
    
    if (*arg1)
    {
        while (result != arg2)
        {
            result = &result[1];
            
            if (!*(result + arg1))
                break;
        }
    }
    
    return result;
}

int64_t _lseeki64(int32_t arg1, int64_t arg2, enum SET_FILE_POINTER_MOVE_METHOD arg3)
{
    void* var_48 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    
    if (!data_14002a1b8)
    {
        var_20 = 1;
        int128_t var_30_1 = *data_1400298c8;
    }
    
    int64_t result = common_lseek<int64_t>(arg1, arg2, arg3, &var_48);
    
    if (var_20 == 2)
    {
        void* rcx = var_48;
        *(rcx + 0x3a8) &= 0xfffffffd;
    }
    
    int32_t var_1c;
    
    if (var_18)
        *(sub_1400028a0(&var_48) + 0x20) = var_1c;
    int32_t var_14;
    
    if (0)
        *(sub_1400028a0(&var_48) + 0x24) = var_14;
    return result;
}

int64_t _lseeki64_nolock(int32_t arg1, int64_t arg2, enum SET_FILE_POINTER_MOVE_METHOD arg3)
{
    void* var_48 = nullptr;
    char var_38 = 0;
    char var_20 = 0;
    char var_18 = 0;
    
    if (!data_14002a1b8)
    {
        var_20 = 1;
        int128_t var_30_1 = *data_1400298c8;
    }
    
    int64_t result = common_lseek_nolock<int64_t>(arg1, arg2, arg3, &var_48);
    
    if (var_20 == 2)
    {
        void* rcx = var_48;
        *(rcx + 0x3a8) &= 0xfffffffd;
    }
    
    int32_t var_1c;
    
    if (var_18)
        *(sub_1400028a0(&var_48) + 0x20) = var_1c;
    int32_t var_14;
    
    if (0)
        *(sub_1400028a0(&var_48) + 0x24) = var_14;
    return result;
}

int64_t j_common_lseek_nolock<int64_t>(int32_t arg1, int64_t arg2, enum SET_FILE_POINTER_MOVE_METHOD arg3, void* arg4)
{
    /* tailcall */
    return common_lseek_nolock<int64_t>(arg1, arg2, arg3, arg4);
}

int64_t common_lseek<int64_t>(int32_t arg1, int64_t arg2, enum SET_FILE_POINTER_MOVE_METHOD arg3, int64_t* arg4)
{
    int32_t arg_8 = arg1;
    int64_t rsi = arg1;
    
    if (rsi != 0xfffffffe)
    {
        int32_t rax_2;
        
        if (arg1 < 0 || rsi >= data_14002ab00)
            rax_2 = 0;
        else
            rax_2 = 1;
        
        if (rax_2)
        {
            int64_t r15_2 = rsi >> 6;
            uint64_t r12_1 = (rsi & 0x3f) * 9;
            
            if (*((&data_14002a700)[r15_2] + (r12_1 << 3) + 0x38) & 1)
            {
                __acrt_lowio_unlock_fh(rsi);
                int64_t result = -1;
                
                if (*((&data_14002a700)[r15_2] + (r12_1 << 3) + 0x38) & 1)
                    result = common_lseek_nolock<int64_t>(rsi, arg2, arg3, arg4);
                else
                {
                    arg4[6] = 1;
                    *(arg4 + 0x2c) = 9;
                    arg4[7] = 1;
                    *(arg4 + 0x34) = 0;
                }
                
                sub_140012bbc(rsi);
                return result;
            }
        }
        
        arg4[7] = 1;
        *(arg4 + 0x34) = 0;
        arg4[6] = 1;
        *(arg4 + 0x2c) = 9;
        _invalid_parameter_internal(0, 0, 0, 0, 0, arg4);
    }
    else
    {
        arg4[7] = 1;
        *(arg4 + 0x34) = 0;
        arg4[6] = 1;
        *(arg4 + 0x2c) = 9;
    }
    
    return -1;
}

int64_t common_lseek_nolock<int64_t>(int32_t arg1, int64_t arg2, enum SET_FILE_POINTER_MOVE_METHOD arg3, void* arg4)
{
    int64_t rdi = arg1;
    HANDLE hFile = _get_osfhandle(rdi);
    
    if (hFile != -1)
    {
        int64_t newFilePointer[0x2];
        newFilePointer[0] = 0;
        
        if (SetFilePointerEx(hFile, arg2, &newFilePointer, arg3))
        {
            int64_t result = newFilePointer[0];
            
            if (result != -1)
            {
                uint64_t rdx_4 = (rdi & 0x3f) * 9;
                int64_t rcx_5 = (&data_14002a700)[rdi >> 6];
                *(rcx_5 + (rdx_4 << 3) + 0x38) &= 0xfd;
                return result;
            }
        }
        else
            __acrt_errno_map_os_error_ptd(GetLastError(), arg4);
    }
    else
    {
        *(arg4 + 0x30) = 1;
        *(arg4 + 0x2c) = 9;
    }
    
    return -1;
}

uint64_t sub_1400199a8(int16_t arg1)
{
    int16_t arg_8 = arg1;
    
    if (__dcrt_lowio_ensure_console_output_initialized())
    {
        int32_t arg_10 = 0;
        
        if (__dcrt_write_console_w(&arg_8, 1, &arg_10))
            return arg_8;
    }
    
    return 0xffff;
}

uint64_t _read(int32_t arg1, char* arg2, int32_t arg3)
{
    int32_t arg_8 = arg1;
    int64_t rsi = arg1;
    
    if (rsi != 0xfffffffe)
    {
        int32_t rax_3;
        
        if (arg1 < 0 || rsi >= data_14002ab00)
            rax_3 = 0;
        else
            rax_3 = 1;
        
        uint64_t r13_1;
        int64_t r15_2;
        
        if (rax_3)
        {
            r15_2 = rsi >> 6;
            r13_1 = (rsi & 0x3f) * 9;
        }
        
        if (!rax_3 || !(*((&data_14002a700)[r15_2] + (r13_1 << 3) + 0x38) & 1))
        {
            *sub_14000df00() = 0;
            *sub_14000dedc() = 9;
        }
        else
        {
            if (arg3 <= 0x7fffffff)
            {
                __acrt_lowio_unlock_fh(rsi);
                int32_t rbx_1 = -1;
                
                if (*((&data_14002a700)[r15_2] + (r13_1 << 3) + 0x38) & 1)
                    rbx_1 = _read_nolock(rsi, arg2, arg3);
                else
                {
                    *sub_14000dedc() = 9;
                    *sub_14000df00() = 0;
                }
                
                sub_140012bbc(rsi);
                return rbx_1;
            }
            
            *sub_14000df00() = 0;
            *sub_14000dedc() = 0x16;
        }
        
        _invalid_parameter_noinfo();
    }
    else
    {
        *sub_14000df00() = 0;
        *sub_14000dedc() = 9;
    }
    
    return 0xffffffff;
}

uint64_t _read_nolock(int32_t arg1, char* arg2, int32_t arg3)
{
    int64_t r13 = arg1;
    uint64_t r12 = arg3;
    
    if (r13 != 0xfffffffe)
    {
        uint64_t var_58_1;
        char var_50_1;
        int64_t rax_5;
        uint64_t r8_1;
        uint64_t r14_1;
        
        if (arg1 >= 0 && r13 < data_14002ab00)
        {
            var_50_1 = 1;
            r8_1 = r13 >> 6;
            var_58_1 = r8_1;
            r14_1 = (r13 & 0x3f) * 9;
            rax_5 = (&data_14002a700)[r8_1];
        }
        
        if (arg1 < 0 || r13 >= data_14002ab00 || !(*(rax_5 + (r14_1 << 3) + 0x38) & 1))
        {
            *sub_14000df00() = 0;
            *sub_14000dedc() = 9;
        }
        else
        {
            if (r12 <= 0x7fffffff)
            {
                if (!r12 || *(rax_5 + (r14_1 << 3) + 0x38) & 2)
                    return 0;
                
                if (arg2)
                {
                    HANDLE rcx = *(rax_5 + (r14_1 << 3) + 0x28);
                    char* lpBuffer_2 = nullptr;
                    int32_t r10_1 = *(rax_5 + (r14_1 << 3) + 0x39);
                    char arg_8 = r10_1;
                    int32_t rdi_2;
                    uint32_t nNumberOfBytesToRead;
                    char* lpBuffer;
                    
                    if (r10_1 != 1)
                    {
                        if (r10_1 == 2 && !(1 & ~r12))
                            goto label_140019c07;
                        
                        nNumberOfBytesToRead = r12;
                        lpBuffer = arg2;
                    label_140019ca4:
                        int64_t rax_18 = (&data_14002a700)[r8_1];
                        int32_t rdi_1 = 0;
                        char* lpBuffer_1 = lpBuffer;
                        
                        if (*(rax_18 + (r14_1 << 3) + 0x38) & 0x48)
                        {
                            rax_18 = *(rax_18 + (r14_1 << 3) + 0x3a);
                            
                            if (rax_18 != 0xa && nNumberOfBytesToRead)
                            {
                                *lpBuffer = rax_18;
                                nNumberOfBytesToRead -= 1;
                                lpBuffer = &lpBuffer[1];
                                rdi_1 = 1;
                                *((&data_14002a700)[r8_1] + (r14_1 << 3) + 0x3a) = 0xa;
                                
                                if (r10_1)
                                {
                                    uint64_t rcx_2;
                                    rcx_2 = *((&data_14002a700)[r8_1] + (r14_1 << 3) + 0x3b);
                                    
                                    if (rcx_2 != 0xa && nNumberOfBytesToRead)
                                    {
                                        *lpBuffer = rcx_2;
                                        rdi_1 = 2;
                                        lpBuffer = &lpBuffer[1];
                                        nNumberOfBytesToRead -= 1;
                                        *((&data_14002a700)[r8_1] + (r14_1 << 3) + 0x3b) = 0xa;
                                        
                                        if (r10_1 == 1)
                                        {
                                            rcx_2 =
                                                *((&data_14002a700)[r8_1] + (r14_1 << 3) + 0x3c);
                                            
                                            if (rcx_2 != 0xa && nNumberOfBytesToRead)
                                            {
                                                *lpBuffer = rcx_2;
                                                rdi_1 = 3;
                                                lpBuffer = &lpBuffer[1];
                                                nNumberOfBytesToRead -= 1;
                                                *((&data_14002a700)[r8_1] + (r14_1 << 3) + 0x3c) =
                                                    0xa;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        enum CONSOLE_MODE mode = 0;
                        uint32_t arg_20;
                        
                        if (!_isatty(r13)
                            || *((&data_14002a700)[var_58_1] + (r14_1 << 3) + 0x38) >= 0)
                        {
                        label_140019dd5:
                            var_50_1 = 0;
                        label_140019dea:
                            arg_20 = 0;
                            
                            if (!ReadFile(rcx, lpBuffer, nNumberOfBytesToRead, &arg_20, nullptr)
                                || arg_20 > r12)
                            {
                                enum WIN32_ERROR rax_29 = GetLastError();
                                
                                if (rax_29 == ERROR_ACCESS_DENIED)
                                {
                                    *sub_14000dedc() = 9;
                                    *sub_14000df00() = 5;
                                    rdi_2 = -1;
                                }
                                else if (rax_29 != ERROR_BROKEN_PIPE)
                                {
                                    sub_14000df24(rax_29);
                                    rdi_2 = -1;
                                }
                                else
                                    rdi_2 = 0;
                            }
                            else
                            {
                                rdi_2 = rdi_1 + arg_20;
                            label_140019e2c:
                                
                                if (*((&data_14002a700)[var_58_1] + (r14_1 << 3) + 0x38) < 0)
                                {
                                    int64_t r8_4 = rdi_2;
                                    
                                    if (arg_8 == 2)
                                    {
                                        uint64_t r8_5 = r8_4 >> 1;
                                        
                                        if (!var_50_1)
                                            rdi_2 = sub_14001a298(r13, lpBuffer_1, r8_5);
                                        else
                                        {
                                            char* lpBuffer_3 = lpBuffer_1;
                                            char* lpBuffer_4 = lpBuffer_1;
                                            void* r9_4 = &lpBuffer_1[r8_5 << 1];
                                            
                                            if (lpBuffer_1 < r9_4)
                                            {
                                                do
                                                {
                                                    int16_t rcx_12 = *lpBuffer_3;
                                                    
                                                    if (rcx_12 == 0x1a)
                                                    {
                                                        int64_t rax_37 =
                                                            (&data_14002a700)[var_58_1];
                                                        *(rax_37 + (r14_1 << 3) + 0x38) |= 2;
                                                        break;
                                                    }
                                                    
                                                    int64_t r11_1;
                                                    
                                                    if (rcx_12 != 0xd || &lpBuffer_3[2] >= r9_4
                                                            || *(lpBuffer_3 + 2) != 0xa)
                                                        r11_1 = 2;
                                                    else
                                                    {
                                                        rcx_12 = 0xa;
                                                        r11_1 = 4;
                                                    }
                                                    
                                                    lpBuffer_3 = &lpBuffer_3[r11_1];
                                                    *lpBuffer_4 = rcx_12;
                                                    lpBuffer_4 = &lpBuffer_4[2];
                                                } while (lpBuffer_3 < r9_4);
                                            }
                                            
                                            rdi_2 = ((lpBuffer_4 - lpBuffer_1) >> 1) * 2;
                                        }
                                    }
                                    else
                                    {
                                        uint64_t var_78_1 = r12 >> 1;
                                        rdi_2 = sub_140019f68(r13, lpBuffer, r8_4, arg2);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (!GetConsoleMode(rcx, &mode))
                                goto label_140019dd5;
                            
                            if (arg_8 != 2)
                                goto label_140019dea;
                            
                            arg_20 = 0;
                            
                            if (ReadConsoleW(rcx, lpBuffer, nNumberOfBytesToRead >> 1, &arg_20, 
                                nullptr))
                            {
                                rdi_2 = rdi_1 + (arg_20 << 1);
                                goto label_140019e2c;
                            }
                            
                            sub_14000df24(GetLastError());
                            rdi_2 = -1;
                        }
                    }
                    else if (!(1 & ~r12))
                    {
                    label_140019c07:
                        *sub_14000df00() = 0;
                        *sub_14000dedc() = 0x16;
                        _invalid_parameter_noinfo();
                        rdi_2 = -1;
                    }
                    else
                    {
                        nNumberOfBytesToRead = r12 >> 1;
                        
                        if (nNumberOfBytesToRead < 4)
                            nNumberOfBytesToRead = 4;
                        
                        lpBuffer_2 = _malloc_base(nNumberOfBytesToRead);
                        _free_base(0);
                        _free_base(0);
                        lpBuffer = lpBuffer_2;
                        
                        if (lpBuffer_2)
                        {
                            int64_t rax_17;
                            rax_17 = _lseeki64_nolock(r13, 0, FILE_CURRENT);
                            r8_1 = var_58_1;
                            r10_1 = arg_8;
                            *((&data_14002a700)[r8_1] + (r14_1 << 3) + 0x30) = rax_17;
                            goto label_140019ca4;
                        }
                        
                        *sub_14000dedc() = 0xc;
                        *sub_14000df00() = 8;
                        rdi_2 = -1;
                    }
                    _free_base(lpBuffer_2);
                    return rdi_2;
                }
            }
            
            *sub_14000df00() = 0;
            *sub_14000dedc() = 0x16;
        }
        
        _invalid_parameter_noinfo();
    }
    else
    {
        *sub_14000df00() = 0;
        *sub_14000dedc() = 9;
    }
    
    return 0xffffffff;
}

uint64_t sub_140019f68(int32_t arg1, char* arg2, int64_t arg3, int32_t arg4)
{
    int64_t rbp = arg1;
    int64_t r15_1 = rbp >> 6;
    uint64_t r14_1 = rbp & 0x3f;
    int64_t rax = (&data_14002a700)[r15_1];
    uint64_t rsi = r14_1 * 9;
    HANDLE hFile = *(rax + (rsi << 3) + 0x28);
    
    if (!arg3 || *arg2 != 0xa)
        *(rax + (rsi << 3) + 0x38) &= 0xfb;
    else
        *(rax + (rsi << 3) + 0x38) |= 4;
    
    void* r9_1 = &arg2[arg3];
    char* rax_1 = arg2;
    char* rbx = arg2;
    
    if (arg2 < r9_1)
    {
        while (true)
        {
            arg1 = *rax_1;
            
            if (arg1 == 0x1a)
            {
                int64_t r8 = (&data_14002a700)[r15_1];
                uint64_t rdx_2 = r14_1 * 9;
                rax_1 = *(r8 + (rdx_2 << 3) + 0x38);
                
                if (!(rax_1 & 0x40))
                {
                    rax_1 |= 2;
                    *(r8 + (rdx_2 << 3) + 0x38) = rax_1;
                    break;
                }
                
                *rbx = arg1;
            }
            else if (arg1 != 0xd)
            {
            label_14001a001:
                *rbx = arg1;
                rax_1 = &rax_1[1];
            label_14001a006:
                rbx = &rbx[1];
                
                if (rax_1 >= r9_1)
                    break;
                
                continue;
            }
            else
            {
                if (&rax_1[1] < r9_1)
                {
                    if (rax_1[1] != 0xa)
                        goto label_14001a001;
                    
                    rax_1 = &rax_1[2];
                    *rbx = 0xa;
                    goto label_14001a006;
                }
                
                uint8_t buffer = 0;
                uint32_t numberOfBytesRead = 0;
                
                if (!ReadFile(hFile, &buffer, 1, &numberOfBytesRead, nullptr) || !numberOfBytesRead)
                    *rbx = 0xd;
                else if (*((&data_14002a700)[r15_1] + (rsi << 3) + 0x38) & 0x48)
                {
                    uint8_t buffer_1 = buffer;
                    
                    if (buffer_1 != 0xa)
                    {
                        *rbx = 0xd;
                        *((&data_14002a700)[r15_1] + (rsi << 3) + 0x3a) = buffer_1;
                    }
                    else
                        *rbx = 0xa;
                }
                else if (buffer != 0xa || rbx != arg2)
                {
                    _lseeki64_nolock(rbp, -1, FILE_CURRENT);
                    
                    if (buffer == 0xa)
                        break;
                    
                    *rbx = 0xd;
                }
                else
                    *rbx = 0xa;
            }
            
            rbx = &rbx[1];
            break;
        }
    }
    
    int32_t rbx_1 = rbx - arg2;
    
    if (rbx == arg2)
        return 0;
    
    if (!*((&data_14002a700)[r15_1] + r14_1 * 0x48 + 0x39))
        return rbx_1;
    
    void* rcx_4 = &arg2[rbx_1];
    void* rbx_2 = rcx_4 - 1;
    
    if (*rbx_2 < 0)
    {
        int32_t r8_1 = 1;
        
        while (!*(*rbx_2 + 0x1400299b0))
        {
            if (r8_1 > 4)
                break;
            
            if (rbx_2 < arg2)
                break;
            
            rbx_2 -= 1;
            r8_1 += 1;
        }
        
        uint64_t rdx_4 = *rbx_2;
        int32_t rax_7 = *(rdx_4 + 0x1400299b0);
        
        if (rax_7)
        {
            if (rax_7 + 1 != r8_1)
            {
                int64_t r9_3 = (&data_14002a700)[rbp >> 6];
                
                if (!(*(r9_3 + (rbp & 0x3f) * 0x48 + 0x38) & 0x48))
                    _lseeki64_nolock(rbp, -(r8_1), FILE_CURRENT);
                else
                {
                    void* rbx_3 = rbx_2 + 1;
                    *(r9_3 + (rbp & 0x3f) * 0x48 + 0x3a) = rdx_4;
                    
                    if (r8_1 >= 2)
                    {
                        rdx_4 = *rbx_3;
                        rbx_3 += 1;
                        *((&data_14002a700)[rbp >> 6] + (rbp & 0x3f) * 0x48 + 0x3b) = rdx_4;
                    }
                    
                    if (r8_1 == 3)
                    {
                        rdx_4 = *rbx_3;
                        rbx_3 += 1;
                        *((&data_14002a700)[rbp >> 6] + (rbp & 0x3f) * 0x48 + 0x3c) = rdx_4;
                    }
                    
                    rbx_2 = rbx_3 - r8_1;
                }
            }
            else
                rbx_2 += r8_1;
            
            goto label_14001a20b;
        }
        
        *sub_14000dedc() = 0x2a;
    }
    else
    {
        rbx_2 = rcx_4;
    label_14001a20b:
        int32_t rbx_4 = rbx_2 - arg2;
        int32_t var_40_1 = arg4;
        int64_t r9;
        int64_t var_48_1 = r9;
        int32_t rax_25 = __acrt_MultiByteToWideChar(0xfde9, 0, arg2, rbx_4);
        
        if (rax_25)
        {
            uint64_t rcx_16 = rbp & 0x3f;
            uint64_t r8_4 = rcx_16 * 9;
            int64_t rdx_6 = (&data_14002a700)[rbp >> 6];
            rcx_16 = rcx_16 - rcx_16;
            rcx_16 &= 2;
            rcx_16 |= *(rdx_6 + (r8_4 << 3) + 0x3d) & 0xfd;
            *(rdx_6 + (r8_4 << 3) + 0x3d) = rcx_16;
            return rax_25 * 2;
        }
        
        sub_14000df24(GetLastError());
    }
    
    return 0xffffffff;
}

uint64_t sub_14001a298(int32_t arg1, int16_t* arg2, int64_t arg3)
{
    int64_t r15 = arg1;
    int64_t i = 0;
    int64_t r12_1 = r15 >> 6;
    uint64_t rbp = (r15 & 0x3f) * 9;
    int64_t rax_2 = (&data_14002a700)[r12_1];
    HANDLE hFile = *(rax_2 + (rbp << 3) + 0x28);
    
    if (!arg3 || *arg2 != 0xa)
        *(rax_2 + (rbp << 3) + 0x38) &= 0xfb;
    else
        *(rax_2 + (rbp << 3) + 0x38) |= 4;
    
    void* r8 = &arg2[arg3];
    int16_t* rax_3 = arg2;
    int16_t* rbx = arg2;
    
    if (arg2 < r8)
    {
        while (true)
        {
            int16_t rdx = *rax_3;
            
            if (rdx == 0x1a)
            {
                uint64_t r8_2 = (r15 & 0x3f) * 9;
                int64_t rcx_8 = (&data_14002a700)[r15 >> 6];
                int64_t rax_13;
                rax_13 = *(rcx_8 + (r8_2 << 3) + 0x38);
                
                if (!(rax_13 & 0x40))
                {
                    rax_13 |= 2;
                    *(rcx_8 + (r8_2 << 3) + 0x38) = rax_13;
                    break;
                }
                
                *rbx = rdx;
            }
            else if (rdx != 0xd)
            {
            label_14001a33b:
                rax_3 = &rax_3[1];
            label_14001a33e:
                *rbx = rdx;
                rbx = &rbx[1];
                
                if (rax_3 >= r8)
                    break;
                
                continue;
            }
            else
            {
                if (&rax_3[1] < r8)
                {
                    if (rax_3[1] != 0xa)
                        goto label_14001a33b;
                    
                    rax_3 = &rax_3[2];
                    rdx = 0xa;
                    goto label_14001a33e;
                }
                
                int16_t buffer = 0;
                uint32_t numberOfBytesRead = 0;
                
                if (!ReadFile(hFile, &buffer, 2, &numberOfBytesRead, nullptr) || !numberOfBytesRead)
                    *rbx = 0xd;
                else if (*((&data_14002a700)[r12_1] + (rbp << 3) + 0x38) & 0x48)
                {
                    int16_t buffer_1 = buffer;
                    
                    if (buffer_1 != 0xa)
                    {
                        int16_t buffer_2 = buffer_1;
                        *rbx = 0xd;
                        
                        do
                        {
                            int64_t rax_8;
                            rax_8 = *(&buffer_2 + i);
                            *((&data_14002a700)[r15 >> 6] + (r15 & 0x3f) * 0x48 + i + 0x3a) = rax_8;
                            i += 1;
                        } while (i < 2);
                        
                        *((&data_14002a700)[r15 >> 6] + (r15 & 0x3f) * 0x48 + 0x3c) = 0xa;
                    }
                    else
                        *rbx = 0xa;
                }
                else if (buffer != 0xa || rbx != arg2)
                {
                    _lseeki64_nolock(r15, -2, FILE_CURRENT);
                    
                    if (buffer == 0xa)
                        break;
                    
                    *rbx = 0xd;
                }
                else
                    *rbx = 0xa;
            }
            
            rbx = &rbx[1];
            break;
        }
    }
    
    return ((rbx - arg2) >> 1) * 2;
}

int64_t _close_nolock_internal(int32_t arg1, void* arg2)
{
    int64_t rdi = arg1;
    enum WIN32_ERROR rbx_2;
    
    if (_get_osfhandle(rdi) != -1)
    {
        void* rax_1 = data_14002a700;
        int64_t rax_2;
        int64_t rax_3;
        
        if ((rdi == 1 && *(rax_1 + 0xc8) & rdi) || (rdi == 2 && *(rax_1 + 0x80) & 1))
        {
            rax_2 = _get_osfhandle(2);
            rax_3 = _get_osfhandle(1);
        }
        
        if (((rdi == 1 && *(rax_1 + 0xc8) & rdi) || (rdi == 2 && *(rax_1 + 0x80) & 1))
                && rax_3 == rax_2)
            rbx_2 = NO_ERROR;
        else if (CloseHandle(_get_osfhandle(rdi)))
            rbx_2 = NO_ERROR;
        else
            rbx_2 = GetLastError();
    }
    else
        rbx_2 = NO_ERROR;
    
    _free_osfhnd(rdi);
    *((&data_14002a700)[rdi >> 6] + (rdi & 0x3f) * 0x48 + 0x38) = 0;
    
    if (!rbx_2)
        return 0;
    
    __acrt_errno_map_os_error_ptd(rbx_2, arg2);
    return 0xffffffff;
}

uint64_t _close_internal(int32_t arg1, int64_t* arg2)
{
    int32_t arg_8 = arg1;
    int64_t r8 = arg1;
    
    if (r8 != 0xfffffffe)
    {
        if (arg1 >= 0 && r8 < data_14002ab00
            && *((&data_14002a700)[r8 >> 6] + (r8 & 0x3f) * 0x48 + 0x38) & 1)
        {
            int64_t* var_18_1 = arg2;
            int32_t arg_20 = r8;
            int32_t var_28 = r8;
            int32_t* var_20 = &arg_8;
            void arg_18;
            return __crt_seh_guarded_call<class <lambda_ad8af0d99a0adf03d037d7dffe354bb5>,class <lambda_c9ba49e555ba839a7b07aa3fbecb7617>& __ptr64,class <lambda_2f1ebd5d68526518146ae959c9e734c8>,int32_t>::operator()<class <lambda_ad8af0d99a0adf03d037d7dffe354bb5>,class <lambda_c9ba49e555ba839a7b07aa3fbecb7617>& __ptr64,class <lambda_2f1ebd5d68526518146ae959c9e734c8> >(
                &arg_18, &var_28, &var_20, &arg_20);
        }
        
        arg2[7] = 1;
        *(arg2 + 0x34) = 0;
        arg2[6] = 1;
        *(arg2 + 0x2c) = 9;
        _invalid_parameter_internal(0, 0, 0, 0, 0, arg2);
    }
    else
    {
        arg2[7] = 1;
        *(arg2 + 0x34) = 0;
        arg2[6] = 1;
        *(arg2 + 0x2c) = 9;
    }
    
    return 0xffffffff;
}

uint64_t __crt_seh_guarded_call<class <lambda_ad8af0d99a0adf03d037d7dffe354bb5>,class <lambda_c9ba49e555ba839a7b07aa3fbecb7617>& __ptr64,class <lambda_2f1ebd5d68526518146ae959c9e734c8>,int32_t>::operator()<class <lambda_ad8af0d99a0adf03d037d7dffe354bb5>,class <lambda_c9ba49e555ba839a7b07aa3fbecb7617>& __ptr64,class <lambda_2f1ebd5d68526518146ae959c9e734c8> >(int64_t arg1, int32_t* arg2, int64_t* arg3, int32_t* arg4)
{
    int32_t* arg_20 = arg4;
    __acrt_lowio_unlock_fh(*arg2);
    int64_t rcx_1 = **arg3;
    void* rdx = arg3[1];
    int32_t rbx_1;
    
    if (!(*((&data_14002a700)[rcx_1 >> 6] + (rcx_1 & 0x3f) * 0x48 + 0x38) & 1))
    {
        *(rdx + 0x30) = 1;
        *(rdx + 0x2c) = 9;
        rbx_1 = -1;
    }
    else
        rbx_1 = _close_nolock_internal(rcx_1, rdx);
    
    sub_140012bbc(*arg4);
    return rbx_1;
}

uint64_t __acrt_stdio_free_stream(void* arg1)
{
    *(arg1 + 0x18) = 0xffffffff;
    __builtin_memset(arg1, 0, 0x18);
    *(arg1 + 0x1c) = 0;
    *(arg1 + 0x28) = 0;
    return *(arg1 + 0x14);
}

int64_t sub_14001a6bc(void (* arg1)())
{
    return _guard_check_icall(arg1);
}

int64_t sub_14001a6e0(int32_t* arg1, int32_t arg2, int32_t arg3)
{
    int32_t r8 = arg3 & 0xfff7ffff;
    
    if (!(arg2 & r8 & 0xfcf0fce0))
    {
        if (!arg1)
        {
            j_sub_14001baa0(arg2, r8);
            return 0;
        }
        
        *arg1 = j_sub_14001baa0(arg2, r8);
        return 0;
    }
    
    if (arg1)
        *arg1 = j_sub_14001baa0(0, 0);
    
    *sub_14000dedc() = 0x16;
    _invalid_parameter_noinfo();
    return 0x16;
}

int64_t fegetenv(int32_t* arg1)
{
    int32_t mxcsr;
    *arg1 = sub_140017760(mxcsr);
    arg1[1] = __acrt_fenv_get_status(mxcsr);
    return 0;
}

uint64_t sub_14001a770(int32_t* arg1)
{
    int64_t arg_8 = 0;
    fegetenv(&arg_8);
    
    if (*arg1 != arg_8)
        return 1;
    
    int32_t rdi;
    rdi = arg1[1] != *arg_8[4];
    return rdi;
}

int64_t sub_14001a7e0(int64_t* arg1)
{
    int64_t arg_10 = 0;
    fegetenv(&arg_10);
    arg_10 |= 0x1f;
    *arg1 = arg_10;
    
    if (sub_14001a770(&arg_10))
        return 1;
    
    sub_14001ba20();
    return 0;
}

void sub_14001a840(int64_t arg1 @ zmm0)
{
    if (data_140029098 >= 2)
    {
        _mm_round_sd(arg1, arg1, 0xa);
        return;
    }
    
    int64_t rax_1 = arg1 & 0x7fffffffffffffff;
    int64_t r9;
    r9 = arg1 != rax_1;
    
    if (rax_1 >> 0x34 >= 0x433 && rax_1 > 0x7ff0000000000000)
        /* tailcall */
        return sub_14001be50(arg1);
}

double log10(double arg1[0x2] @ zmm0, double arg2[0x2] @ zmm6)
{
    double var_38[0x2] = arg2;
    
    if (data_14002abe8)
    {
        uint64_t temp0_9[0x2] = __vpsrlq_xmmdq_xmmdq_immb(arg1, 0x34);
        double rax_4 = arg1[0];
        __vcvtdq2pd_xmmdq_xmmq(__vpsubq_xmmdq_xmmdq_memdq(temp0_9, data_140022130)[0]);
        __vcomisd_xmmq_memq((arg1 & data_140022100)[0], inf.0);
        
        if (rax_4 == 0x7ff0000000000000)
            return rax_4;
        
        if (rax_4 != -0x10000000000000)
            return _log10_special(arg1[0], rax_4 | 0x8000000000000, 3);
        
        uint128_t temp0_33 = __vmovsd_xmmdq_memq(-nan.0);
        int64_t rax_8;
        int512_t zmm6_1;
        rax_8 = _log10_special(arg1[0], temp0_33, 2);
        zmm6_1 = var_38;
        return rax_8;
    }
    
    uint64_t zmm4[0x2] = arg1;
    uint64_t temp0[0x2] = _mm_srli_epi64(arg1, 0x34);
    double rax = arg1[0];
    uint64_t zmm3[0x2] = __psubq_xmmdq_memdq(temp0, data_140022130);
    uint64_t temp0_2[0x2] = __andpd_xmmxuq_memxuq(arg1, data_140022100);
    
    if (temp0_2[0] == inf.0)
    {
        if (rax == 0x7ff0000000000000)
            return rax;
        
        if (rax != -0x10000000000000)
            return rax | 0x8000000000000;
    }
    else
    {
        arg2 = _mm_cvtepi32_pd(zmm3[0]);
        uint64_t temp0_4[0x2] = _mm_xor_pd(temp0_2, temp0_2);
        arg1[0] - temp0_4[0];
        
        if (!(arg1[0] <= temp0_4[0]))
        {
            uint128_t zmm2 = arg1 & data_140022150;
            zmm4[0] = zmm4[0] - 1.0;
            
            if (arg2[0] == -1023.0)
            {
                zmm2 = (zmm2 | data_1400221e0) - 1.0;
                temp0_4[0] = zmm2;
                zmm2 &= data_140022150;
                rax = zmm2;
                arg2 = _mm_cvtepi32_pd(__psubd_xmmdq_memdq(_mm_srli_epi64(temp0_4, 0x34), 
                    data_140022280)[0]);
            }
            
            int64_t rax_2 = (rax & 0xff00000000000) + ((rax & 0x80000000000) << 1);
            uint128_t zmm1;
            uint64_t zmm5[0x2];
            
            if (!(__andpd_xmmxuq_memxuq(zmm4, data_1400222d0)[0] < 0.0625))
            {
                uint64_t rax_3 = rax_2 >> 0x2c;
                zmm1 = (rax_2 | data_1400221f0) - (zmm2 | data_1400221f0);
                zmm1 = zmm1 * *(&data_1400233a0 + (rax_3 << 3));
                zmm2 = zmm1;
                arg1 = zmm1;
                zmm3 = 0x3fc5555555555555;
                zmm3[0] = zmm3[0] * zmm2;
                zmm1 = 0x3fd5555555555555 * zmm2;
                arg1[0] = arg1[0] * zmm2;
                zmm4 = arg1;
                zmm3[0] = zmm3[0] + 0.20000000000000001;
                zmm1 = zmm1 + 0.5;
                zmm4[0] = zmm4[0] * arg1[0];
                zmm3[0] = zmm3[0] * zmm2;
                zmm1 = zmm1 * arg1[0];
                zmm3[0] = zmm3[0] + 0.25;
                zmm1 = zmm1 + zmm2;
                zmm3[0] = zmm3[0] * zmm4[0];
                zmm1 = zmm1 + zmm3[0];
                zmm5 = 0x3e03ef3fde623e25;
                zmm1 = zmm1 * 0.43429448190325182;
                zmm5[0] = zmm5[0] * arg2[0];
                zmm5[0] = zmm5[0] - zmm1;
                arg1 = *(&data_140022380 + (rax_3 << 3));
                zmm2 = *(&data_140022b90 + (rax_3 << 3));
                zmm4 = 0x3fd3441350000000;
                zmm4[0] = zmm4[0] * arg2[0];
                arg1[0] = arg1[0] + zmm4[0];
                zmm2 = zmm2 + zmm5[0];
                arg1[0] = arg1[0] + zmm2;
                return rax_3;
            }
            
            arg1[0] = arg1[0] - 1.0;
            zmm2 = 0x4000000000000000 + arg1[0];
            zmm1 = arg1 / zmm2;
            zmm4 = 0x3f89999999bac6d4;
            zmm5 = 0x3f3c8034c85dfff0;
            arg1[0] = arg1[0] * zmm1;
            zmm1 = zmm1 + zmm1;
            zmm2 = zmm1 * zmm1;
            zmm4[0] = zmm4[0] * zmm2;
            zmm5[0] = zmm5[0] * zmm2;
            zmm4[0] = zmm4[0] + 0.083333333333331788;
            zmm5[0] = zmm5[0] + 0.0022321399879194482;
            zmm2 = zmm2 * zmm1;
            zmm4[0] = zmm4[0] * zmm2;
            zmm2 = zmm2 * zmm2;
            zmm2 = zmm2 * zmm1;
            zmm5[0] = zmm5[0] * zmm2;
            zmm2 = 0x3ea8a93728719535;
            zmm4[0] = zmm4[0] + zmm5[0];
            zmm4[0] = zmm4[0] - arg1[0];
            arg2 = 0x3fdbcb7800000000;
            zmm3 = arg1 & data_140022320;
            arg1[0] = arg1[0] - zmm3[0];
            zmm4[0] = zmm4[0] + arg1[0];
            arg1 = zmm3;
            zmm4[0] = zmm4[0] * zmm2;
            arg1[0] = arg1[0] * zmm2;
            zmm1 = zmm4 * arg2[0];
            zmm3[0] = zmm3[0] * arg2[0];
            arg1[0] = arg1[0] + zmm4[0];
            arg1[0] = arg1[0] + zmm1;
            arg1[0] = arg1[0] + zmm3[0];
            return rax_2;
        }
        
        if (!(arg1[0] != temp0_4[0]))
            return _log10_special(arg1[0], -0x10000000000000, 1);
    }
    
    return _log10_special(arg1[0], -0x8000000000000, 2);
}

int64_t _CallSettingFrame(int64_t arg1, int64_t* arg2, int512_t arg3 @ zmm0)
{
    int64_t arg_8 = arg1;
    int32_t r8;
    int32_t arg_18 = r8;
    int64_t rdx = *arg2;
    sub_14000b340();
    int64_t result = arg1(arg3, rdx);
    *arg2;
    sub_14000b340();
    return result;
}

int64_t sub_14001af40(int64_t* arg1, int64_t* arg2)
{
    if (arg1[1])
    {
        char* rcx = *arg1;
        
        if (rcx)
        {
            void* rbp_1 = strlen(rcx) + 1;
            char* rax_1 = j_sub_14000e1b0(rbp_1);
            char* rcx_2 = rax_1;
            
            if (rax_1)
            {
                sub_14000b5d0(rcx_2, rbp_1, *arg1);
                rcx_2 = nullptr;
                *arg2 = rax_1;
                arg2[1] = 1;
            }
            
            return j_sub_14000d150(rcx_2);
        }
    }
    
    int64_t result = *arg1;
    *arg2 = result;
    arg2[1] = 0;
    return result;
}

void sub_14001afc0(int64_t* arg1)
{
    if (arg1[1])
        j_sub_14000d150(*arg1);
    
    arg1[1] = 0;
    *arg1 = 0;
}

void sub_14001afe8(int64_t* arg1, char* arg2) __noreturn
{
    char* PcValue = arg2;
    uint64_t arguments_1 = 0x19930520;
    
    if (arg2 && *arg2 & 0x10)
    {
        void* rax_1 = *(*arg1 - 8);
        PcValue = *(rax_1 + 0x30);
        (*(rax_1 + 0x40))();
    }
    
    int64_t BaseOfImage_1 = 0;
    int64_t BaseOfImage = 0;
    
    if (PcValue)
    {
        BaseOfImage_1 = RtlPcToFileHeader(PcValue, &BaseOfImage);
        BaseOfImage = BaseOfImage_1;
        
        if (*PcValue & 8 || !BaseOfImage_1)
            arguments_1 = 0x1994000;
    }
    
    uint64_t arguments = arguments_1;
    int64_t* var_28 = arg1;
    char* PcValue_1 = PcValue;
    int64_t BaseOfImage_2 = BaseOfImage_1;
    RaiseException(0xe06d7363, 1, 4, &arguments);
    /* no return */
}

uint64_t sub_14001b090(char* arg1, char* arg2, uint64_t arg3)
{
    uint64_t i_1 = arg3;
    char* rbx = arg2;
    char* r11 = arg1;
    
    if (data_14002a1b8)
        /* tailcall */
        return sub_14001b120(arg1, arg2, arg3, nullptr);
    
    if (!arg1 || !arg2 || arg3 > 0x7fffffff)
        /* tailcall */
        return sub_14001b280(arg1, arg2, arg3);
    
    if (!arg3)
        return 0;
    
    uint64_t result;
    uint64_t i;
    
    do
    {
        uint32_t rcx = *r11;
        r11 = &r11[1];
        uint32_t r8 = *rbx;
        rbx = &rbx[1];
        
        if (rcx != r8)
        {
            uint32_t rdx = rcx + 0x20;
            
            if (rcx - 0x41 > 0x19)
                rdx = rcx;
            
            rcx = rdx;
            
            if (r8 - 0x41 <= 0x19)
                r8 += 0x20;
        }
        
        result = rcx - r8;
        
        if (rcx != r8 || !rcx)
            return result;
        
        i = i_1;
        i_1 -= 1;
    } while (i != 1);
    return result;
}

uint64_t sub_14001b120(char* arg1, void* arg2, uint64_t arg3, int128_t* arg4)
{
    uint64_t i_1 = arg3;
    void* rdi = arg2;
    char* rsi = arg1;
    
    if (!arg1 || !arg2 || i_1 > 0x7fffffff)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
        return 0x7fffffff;
    }
    
    if (!i_1)
        return 0;
    
    arg3 = 0;
    char var_10 = 0;
    void** var_28;
    int128_t var_20;
    
    if (arg4)
        var_20 = *arg4;
    else if (data_14002a1b8)
    {
        void** rax_4 = __vcrt_getptd();
        var_28 = rax_4;
        var_20 = rax_4[0x12];
        *var_20[8] = rax_4[0x11];
        __acrt_update_locale_info(rax_4, &var_20);
        sub_14000e5d8(var_28, &*var_20[8]);
        int32_t rax_7 = var_28[0x75];
        
        if (rax_7 & 2)
            arg3 = var_10;
        else
        {
            arg3 = 1;
            var_28[0x75] = rax_7 | 2;
            char var_10_1 = 1;
        }
    }
    else
        var_20 = *data_1400298c8;
    
    int64_t r9 = *(var_20 + 0x110);
    uint32_t rcx_3;
    uint32_t rdx_2;
    uint64_t i;
    
    do
    {
        uint64_t rax_10 = *rsi;
        rsi = &rsi[1];
        rdi += 1;
        rdx_2 = *(rax_10 + r9);
        rcx_3 = *(*(rdi - 1) + r9);
        
        if (rdx_2 != rcx_3)
            break;
        
        if (!rdx_2)
            break;
        
        i = i_1;
        i_1 -= 1;
    } while (i != 1);
    
    if (arg3)
        var_28[0x75] &= 0xfffffffd;
    
    return rdx_2 - rcx_3;
}

int64_t sub_14001b280(int64_t arg1, int64_t arg2, int64_t arg3)
{
    if (!arg1 || !arg2 || arg3 > 0x7fffffff)
    {
        *sub_14000dedc() = 0x16;
        _invalid_parameter_noinfo();
    }
    
    return 0x7fffffff;
}

uint64_t __acrt_CompareStringA(int128_t* arg1, int64_t arg2, int32_t arg3, char* arg4, int32_t arg5, char* arg6, int32_t arg7, uint32_t arg8)
{
    void* var_28;
    _LocaleUpdate::_LocaleUpdate(&var_28, arg1);
    void var_20;
    uint64_t result = sub_14001b340(&var_20, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    char var_10;
    
    if (var_10)
    {
        void* rcx_2 = var_28;
        *(rcx_2 + 0x3a8) &= 0xfffffffd;
    }
    
    return result;
}

uint64_t sub_14001b340(int64_t* arg1, int64_t arg2, int32_t arg3, char* arg4, int32_t arg5, char* arg6, int32_t arg7, uint32_t arg8)
{
    int64_t __saved_rbp_1;
    int64_t __saved_rbp = __saved_rbp_1;
    int64_t __saved_rbx_1;
    int64_t __saved_rbx = __saved_rbx_1;
    int64_t __saved_rsi_1;
    int64_t __saved_rsi = __saved_rsi_1;
    int64_t __saved_rdi_1;
    int64_t __saved_rdi = __saved_rdi_1;
    int64_t __saved_r12_1;
    int64_t __saved_r12 = __saved_r12_1;
    int64_t __saved_r13_1;
    int64_t __saved_r13 = __saved_r13_1;
    int64_t __saved_r14_1;
    int64_t __saved_r14 = __saved_r14_1;
    int64_t __saved_r15_1;
    int64_t __saved_r15 = __saved_r15_1;
    void var_d8;
    void* rsp_1 = &var_d8;
    int32_t var_88;
    int64_t rax_1 = __security_cookie ^ &var_88;
    int64_t rdi = arg5;
    uint8_t* r14 = arg4;
    var_88 = arg3;
    uint64_t result;
    
    if (rdi <= 0)
    {
        if (rdi >= 0xffffffff)
            goto label_14001b3a7;
        
        result = 0;
    }
    else
    {
        rdi = __strncnt(arg4, rdi);
    label_14001b3a7:
        int64_t rsi = arg7;
        
        if (rsi <= 0)
        {
            if (rsi >= 0xffffffff)
                goto label_14001b3cb;
            
            result = 0;
        }
        else
        {
            rsi = __strncnt(arg6, rsi);
        label_14001b3cb:
            uint32_t CodePage = arg8;
            
            if (!CodePage)
                CodePage = *(*arg1 + 0xc);
            
            if (!rdi || !rsi)
            {
                CPINFO cPInfo;
                cPInfo.LeadByte[0xa] = 0;
                cPInfo.LeadByte[0xb] = 0;
                cPInfo.MaxCharSize = 0;
                cPInfo.DefaultChar[0] = 0;
                cPInfo.DefaultChar[1] = 0;
                cPInfo.LeadByte[0] = 0;
                cPInfo.LeadByte[1] = 0;
                cPInfo.LeadByte[2] = 0;
                cPInfo.LeadByte[3] = 0;
                cPInfo.LeadByte[4] = 0;
                cPInfo.LeadByte[5] = 0;
                cPInfo.LeadByte[6] = 0;
                cPInfo.LeadByte[7] = 0;
                cPInfo.LeadByte[8] = 0;
                cPInfo.LeadByte[9] = 0;
                
                if (rdi == rsi)
                {
                label_14001b6c8:
                    result = 2;
                }
                else if (rsi > 1)
                    result = 1;
                else if (rdi > 1)
                    result = 3;
                else if (!GetCPInfo(CodePage, &cPInfo))
                    result = 0;
                else
                {
                    uint8_t rcx_3;
                    
                    if (rdi <= 0)
                    {
                        if (rsi <= 0)
                            goto label_14001b49c;
                        
                        if (cPInfo.MaxCharSize >= 2)
                        {
                            BYTE (* rax_7)[0xc] = &cPInfo.LeadByte;
                            
                            if (cPInfo.LeadByte[0])
                            {
                                while ((*rax_7)[1])
                                {
                                    rcx_3 = *arg6;
                                    
                                    if (rcx_3 >= *rax_7 && rcx_3 <= (*rax_7)[1])
                                        goto label_14001b6c8;
                                    
                                    rax_7 = &(*rax_7)[2];
                                    
                                    if (!*rax_7)
                                        break;
                                }
                            }
                        }
                        
                        result = 1;
                    }
                    else
                    {
                        if (cPInfo.MaxCharSize >= 2)
                        {
                            BYTE (* rax_6)[0xc] = &cPInfo.LeadByte;
                            
                            if (cPInfo.LeadByte[0])
                            {
                                while ((*rax_6)[1])
                                {
                                    rcx_3 = *r14;
                                    
                                    if (rcx_3 >= *rax_6 && rcx_3 <= (*rax_6)[1])
                                        goto label_14001b6c8;
                                    
                                    rax_6 = &(*rax_6)[2];
                                    
                                    if (!*rax_6)
                                        break;
                                }
                            }
                        }
                        
                        result = 3;
                    }
                }
            }
            else
            {
            label_14001b49c:
                int32_t var_b0_1 = 0;
                int64_t var_b8_1 = 0;
                int32_t rax_8 = __acrt_MultiByteToWideChar(CodePage, 
                    MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, r14, rdi);
                int64_t r13 = rax_8;
                
                if (!rax_8)
                    result = 0;
                else
                {
                    int64_t rdx_4 = r13 * 2;
                    uint64_t rdx_6 = (rdx_4 - rdx_4) & (rdx_4 + 0x10);
                    
                    if (!rdx_6)
                        result = 0;
                    else
                    {
                        void* rbx_1;
                        
                        if (rdx_6 > 0x400)
                        {
                            void* rax_11 = _malloc_base(rdx_6);
                            rbx_1 = rax_11;
                            
                            if (rax_11)
                            {
                                *rax_11 = 0xdddd;
                            label_14001b534:
                                rbx_1 += 0x10;
                            }
                            
                            if (!rbx_1)
                                result = 0;
                            else
                            {
                                *(rsp_1 + 0x28) = r13;
                                *(rsp_1 + 0x20) = rbx_1;
                                void* rcx_18;
                                bool cond:0_1;
                                
                                if (!__acrt_MultiByteToWideChar(CodePage, MB_PRECOMPOSED, r14, rdi))
                                {
                                label_14001b698:
                                    rcx_18 = rbx_1 - 0x10;
                                    cond:0_1 = *rcx_18 != 0xdddd;
                                label_14001b6a2:
                                    
                                    if (cond:0_1)
                                        result = 0;
                                    else
                                    {
                                        _free_base(rcx_18);
                                        result = 0;
                                    }
                                }
                                else
                                {
                                    *(rsp_1 + 0x28) = 0;
                                    *(rsp_1 + 0x20) = 0;
                                    int32_t rax_13 = __acrt_MultiByteToWideChar(CodePage, 
                                        MB_ERR_INVALID_CHARS | MB_PRECOMPOSED, arg6, rsi);
                                    int64_t r12_1 = rax_13;
                                    
                                    if (!rax_13)
                                        goto label_14001b698;
                                    
                                    int64_t rcx_10 = r12_1 * 2;
                                    uint64_t rcx_12 = (rcx_10 - rcx_10) & (rcx_10 + 0x10);
                                    
                                    if (!rcx_12)
                                        goto label_14001b698;
                                    
                                    void* rdi_1;
                                    
                                    if (rcx_12 > 0x400)
                                    {
                                        void* rax_17 = _malloc_base(rcx_12);
                                        rdi_1 = rax_17;
                                        
                                        if (rax_17)
                                        {
                                            *rax_17 = 0xdddd;
                                            rdi_1 += 0x10;
                                        }
                                    }
                                    else
                                    {
                                        int64_t rax_15 = rcx_12 + 0xf;
                                        
                                        if (rax_15 <= rcx_12)
                                            rax_15 = 0xffffffffffffff0;
                                        
                                        int64_t rax_16 = rax_15 & 0xfffffffffffffff0;
                                        __chkstk(rax_16);
                                        rsp_1 -= rax_16;
                                        rdi_1 = rsp_1 + 0x50;
                                        
                                        if (!rdi_1)
                                            goto label_14001b698;
                                        
                                        *rdi_1 = 0xcccc;
                                        rdi_1 += 0x10;
                                    }
                                    
                                    if (!rdi_1)
                                        goto label_14001b698;
                                    
                                    *(rsp_1 + 0x28) = r12_1;
                                    *(rsp_1 + 0x20) = rdi_1;
                                    
                                    if (!__acrt_MultiByteToWideChar(CodePage, MB_PRECOMPOSED, arg6, 
                                        rsi))
                                    {
                                        if (*(rdi_1 - 0x10) == 0xdddd)
                                            _free_base(rdi_1 - 0x10);
                                        
                                        rcx_18 = rbx_1 - 0x10;
                                        cond:0_1 = *rcx_18 != 0xdddd;
                                        goto label_14001b6a2;
                                    }
                                    
                                    uint64_t rdx_7 = var_88;
                                    __builtin_memset(rsp_1 + 0x30, 0, 0x18);
                                    *(rsp_1 + 0x28) = r12_1;
                                    *(rsp_1 + 0x20) = rdi_1;
                                    int32_t result_1 = sub_14000b790(arg2, rdx_7, rbx_1, r13);
                                    
                                    if (*(rdi_1 - 0x10) == 0xdddd)
                                        _free_base(rdi_1 - 0x10);
                                    
                                    if (*(rbx_1 - 0x10) == 0xdddd)
                                        _free_base(rbx_1 - 0x10);
                                    
                                    result = result_1;
                                }
                            }
                        }
                        else
                        {
                            int64_t rax_9 = rdx_6 + 0xf;
                            
                            if (rax_9 <= rdx_6)
                                rax_9 = 0xffffffffffffff0;
                            
                            int64_t rax_10 = rax_9 & 0xfffffffffffffff0;
                            __chkstk(rax_10);
                            rsp_1 = &var_d8 - rax_10;
                            rbx_1 = rsp_1 + 0x50;
                            
                            if (rbx_1)
                            {
                                *rbx_1 = 0xcccc;
                                goto label_14001b534;
                            }
                            
                            result = 0;
                        }
                    }
                }
            }
        }
    }
    
    __security_check_cookie(rax_1 ^ &var_88);
    return result;
}

int64_t memcpy_repmovs(int64_t arg1, int64_t arg2, int64_t arg3)
{
    __builtin_memcpy(arg1, arg2, arg3);
}

int512_t sub_14001b700(int64_t arg1, int128_t* arg2, int64_t arg3, int128_t* arg4 @ rax)
{
    int128_t zmm2 = *arg2;
    void* rdx = arg2 - arg1;
    int64_t rcx = arg1 + arg3;
    int128_t result = *(rcx + rdx - 0x10);
    int128_t* rcx_1 = rcx - 0x10;
    void* r8 = arg3 - 0x10;
    int128_t result_1;
    
    if (rcx_1 & 0xf)
    {
        int128_t* r9_1 = rcx_1;
        rcx_1 &= 0xfffffffffffffff0;
        result_1 = result;
        result = *(rcx_1 + rdx);
        *r9_1 = result_1;
        r8 = rcx_1 - arg4;
    }
    
    uint64_t r9_3 = r8 >> 7;
    
    if (r9_3)
    {
        *rcx_1 = result;
        
        while (true)
        {
            result = *(rcx_1 + rdx - 0x10);
            result_1 = *(rcx_1 + rdx - 0x20);
            rcx_1 -= 0x80;
            rcx_1[7] = result;
            rcx_1[6] = result_1;
            result_1 = *(rcx_1 + rdx + 0x40);
            uint64_t temp0_1 = r9_3;
            r9_3 -= 1;
            rcx_1[5] = *(rcx_1 + rdx + 0x50);
            rcx_1[4] = result_1;
            result_1 = *(rcx_1 + rdx + 0x20);
            rcx_1[3] = *(rcx_1 + rdx + 0x30);
            rcx_1[2] = result_1;
            result = *(rcx_1 + rdx + 0x10);
            result_1 = *(rcx_1 + rdx);
            
            if (temp0_1 == 1)
                break;
            
            rcx_1[1] = result;
            *rcx_1 = result_1;
        }
        
        rcx_1[1] = result;
        r8 &= 0x7f;
        result = result_1;
    }
    
    uint64_t i_1 = r8 >> 4;
    
    if (i_1)
    {
        uint64_t i;
        
        do
        {
            *rcx_1 = result;
            rcx_1 -= 0x10;
            result = *(rcx_1 + rdx);
            i = i_1;
            i_1 -= 1;
        } while (i != 1);
    }
    
    if (r8 & 0xf)
        *arg4 = zmm2;
    
    *rcx_1 = result;
    return result;
}

int64_t sub_14001b7f0(int64_t arg1, int64_t arg2, int64_t arg3)
{
    __builtin_memcpy(arg1, arg2, arg3);
}

int512_t sub_14001b810(int64_t arg1, int128_t* arg2, int64_t arg3, int128_t* arg4 @ rax)
{
    int128_t zmm2 = *arg2;
    void* rdx = arg2 - arg1;
    int64_t rcx = arg1 + arg3;
    int128_t result = *(rcx + rdx - 0x10);
    int128_t* rcx_1 = rcx - 0x10;
    void* r8 = arg3 - 0x10;
    int128_t result_1;
    
    if (rcx_1 & 0xf)
    {
        int128_t* r9_1 = rcx_1;
        rcx_1 &= 0xfffffffffffffff0;
        result_1 = result;
        result = *(rcx_1 + rdx);
        *r9_1 = result_1;
        r8 = rcx_1 - arg4;
    }
    
    uint64_t r9_3 = r8 >> 7;
    
    if (r9_3)
    {
        *rcx_1 = result;
        
        while (true)
        {
            result = *(rcx_1 + rdx - 0x10);
            result_1 = *(rcx_1 + rdx - 0x20);
            rcx_1 -= 0x80;
            rcx_1[7] = result;
            rcx_1[6] = result_1;
            result_1 = *(rcx_1 + rdx + 0x40);
            uint64_t temp0_1 = r9_3;
            r9_3 -= 1;
            rcx_1[5] = *(rcx_1 + rdx + 0x50);
            rcx_1[4] = result_1;
            result_1 = *(rcx_1 + rdx + 0x20);
            rcx_1[3] = *(rcx_1 + rdx + 0x30);
            rcx_1[2] = result_1;
            result = *(rcx_1 + rdx + 0x10);
            result_1 = *(rcx_1 + rdx);
            
            if (temp0_1 == 1)
                break;
            
            rcx_1[1] = result;
            *rcx_1 = result_1;
        }
        
        rcx_1[1] = result;
        r8 &= 0x7f;
        result = result_1;
    }
    
    uint64_t i_1 = r8 >> 4;
    
    if (i_1)
    {
        uint64_t i;
        
        do
        {
            *rcx_1 = result;
            rcx_1 -= 0x10;
            result = *(rcx_1 + rdx);
            i = i_1;
            i_1 -= 1;
        } while (i != 1);
    }
    
    if (r8 & 0xf)
        *arg4 = zmm2;
    
    *rcx_1 = result;
    return result;
}

uint64_t __dcrt_lowio_ensure_console_output_initialized()
{
    HANDLE rax = data_140029ab0;
    
    if (rax == -2)
    {
        rax = CreateFileW(CONOUT$", 0x40000000, FILE_SHARE_READ | FILE_SHARE_WRITE, nullptr, 
            OPEN_EXISTING, SECURITY_ANONYMOUS, nullptr);
        data_140029ab0 = rax;
    }
    
    int32_t rbx;
    rbx = rax != -1;
    return rbx;
}

uint64_t __dcrt_write_console_w(void* arg1, uint32_t arg2, uint32_t* arg3)
{
    BOOL rax = WriteConsoleW(data_140029ab0, arg1, arg2, arg3, nullptr);
    BOOL rbx = rax;
    
    if (!rax && GetLastError() == ERROR_INVALID_HANDLE)
    {
        HANDLE hObject = data_140029ab0;
        
        if (hObject <= -3)
            CloseHandle(hObject);
        
        HANDLE hConsoleOutput = CreateFileW(CONOUT$", 0x40000000, 
            FILE_SHARE_READ | FILE_SHARE_WRITE, nullptr, OPEN_EXISTING, SECURITY_ANONYMOUS, 
            nullptr);
        data_140029ab0 = hConsoleOutput;
        rbx = WriteConsoleW(hConsoleOutput, arg1, arg2, arg3, nullptr);
    }
    
    return rbx;
}

void __dcrt_terminate_console_input()
{
    HANDLE hObject = data_140029ab0;
    
    if (hObject <= -3)
        CloseHandle(hObject);
}

int32_t sub_14001ba20()
{
    int32_t mxcsr;
    int32_t rax = sub_14001c160(mxcsr);
    
    if (!(rax & 0x3f))
        return 0;
    
    int32_t result_4 = (rax & 1) << 4;
    int32_t result_3 = result_4 | 8;
    
    if (!(rax & 4))
        result_3 = result_4;
    
    int32_t result_2 = result_3 | 4;
    
    if (!(rax & 8))
        result_2 = result_3;
    
    int32_t result_1 = result_2 | 2;
    
    if (!(rax & 0x10))
        result_1 = result_2;
    
    int32_t result = result_1 | 1;
    
    if (!(rax & 0x20))
        result = result_1;
    
    if (!(rax & 2))
        return result;
    
    return result | 0x80000;
}

uint64_t j_sub_14001baa0(int32_t arg1, int32_t arg2)
{
    /* tailcall */
    return sub_14001baa0(arg1, arg2);
}

uint64_t sub_14001baa0(int32_t arg1, int32_t arg2)
{
    int32_t rdi_1 = arg2 & 0x308031f;
    int32_t mxcsr;
    int32_t rax = get_fpsw_inline(mxcsr);
    int32_t r9_2 = rax >> 3 & 0x10;
    int32_t r10_1 = r9_2 | 8;
    
    if (!TEST_BITD(rax, 9))
        r10_1 = r9_2;
    
    int32_t rcx_1 = r10_1 | 4;
    
    if (!TEST_BITD(rax, 0xa))
        rcx_1 = r10_1;
    
    int32_t rdx_1 = rcx_1 | 2;
    
    if (!TEST_BITD(rax, 0xb))
        rdx_1 = rcx_1;
    
    int32_t rcx_3 = rdx_1 | 1;
    
    if (!TEST_BITD(rax, 0xc))
        rcx_3 = rdx_1;
    
    int32_t rdx_3 = rcx_3 | 0x80000;
    
    if (!TEST_BITD(rax, 8))
        rdx_3 = rcx_3;
    
    int32_t rax_1 = rax & 0x6000;
    
    if (rax_1)
    {
        if (rax_1 == 0x2000)
            rdx_3 |= 0x100;
        else if (rax_1 == 0x4000)
            rdx_3 |= 0x200;
        else if (rax_1 == 0x6000)
            rdx_3 |= 0x300;
    }
    
    int32_t r11_1 = rax & 0x8040;
    
    if (r11_1 == 0x40)
        rdx_3 |= 0x2000000;
    else if (r11_1 == 0x8000)
        rdx_3 |= 0x3000000;
    else if (r11_1 == 0x8040)
        rdx_3 |= 0x1000000;
    
    int32_t r8_3 = (~rdi_1 & rdx_3) | (arg1 & rdi_1);
    
    if (r8_3 != rdx_3)
    {
        int32_t rcx_6 = (r8_3 & 0x10) << 3;
        int32_t rdx_5 = rcx_6 | 0x200;
        
        if (!(r8_3 & 8))
            rdx_5 = rcx_6;
        
        int32_t rcx_8 = rdx_5 | 0x400;
        
        if (!(r8_3 & 4))
            rcx_8 = rdx_5;
        
        int32_t rdx_7 = rcx_8 | 0x800;
        
        if (!(r8_3 & 2))
            rdx_7 = rcx_8;
        
        int32_t rcx_10 = rdx_7 | 0x1000;
        
        if (!(r8_3 & 1))
            rcx_10 = rdx_7;
        
        int32_t rbx_3 = rcx_10 | 0x100;
        
        if (!TEST_BITD(r8_3, 0x13))
            rbx_3 = rcx_10;
        
        int32_t rax_3 = r8_3 & 0x300;
        int32_t arg_8;
        
        if (!rax_3)
            arg_8 = rbx_3;
        else if (rax_3 == 0x100)
        {
            rbx_3 |= 0x2000;
            arg_8 = rbx_3;
        }
        else if (rax_3 == 0x200)
        {
            rbx_3 |= 0x4000;
            arg_8 = rbx_3;
        }
        else
        {
            arg_8 = rbx_3;
            
            if (rax_3 == 0x300)
            {
                rbx_3 |= 0x6000;
                arg_8 = rbx_3;
            }
        }
        
        int32_t r8_4 = r8_3 & 0x3000000;
        
        if (r8_4 == 0x1000000)
        {
            rbx_3 |= 0x8040;
            arg_8 = rbx_3;
        }
        else if (r8_4 == 0x2000000)
        {
            rbx_3 |= 0x40;
            arg_8 = rbx_3;
        }
        else if (r8_4 == 0x3000000)
        {
            rbx_3 |= 0x8000;
            arg_8 = rbx_3;
        }
        
        if (!data_140029ab8 || !(rbx_3 & 0x40))
            rbx_3 &= 0xffffffbf;
        
        int32_t rcx_15 = rbx_3 >> 3 & 0x10;
        int32_t rdx_9 = rcx_15 | 8;
        
        if (!TEST_BITD(rbx_3, 9))
            rdx_9 = rcx_15;
        
        int32_t rcx_17 = rdx_9 | 4;
        
        if (!TEST_BITD(rbx_3, 0xa))
            rcx_17 = rdx_9;
        
        int32_t rdx_11 = rcx_17 | 2;
        
        if (!TEST_BITD(rbx_3, 0xb))
            rdx_11 = rcx_17;
        
        int32_t rcx_19 = rdx_11 | 1;
        
        if (!TEST_BITD(rbx_3, 0xc))
            rcx_19 = rdx_11;
        
        rdx_3 = rcx_19 | 0x80000;
        
        if (!TEST_BITD(rbx_3, 8))
            rdx_3 = rcx_19;
        
        int32_t rax_5 = rbx_3 & 0x6000;
        
        if (rax_5)
        {
            if (rax_5 == 0x2000)
                rdx_3 |= 0x100;
            else if (rax_5 == 0x4000)
                rdx_3 |= 0x200;
            else if (rax_5 == 0x6000)
                rdx_3 |= 0x300;
        }
        
        int32_t rbx_4 = rbx_3 & 0x8040;
        
        if (rbx_4 == 0x40)
            rdx_3 |= 0x2000000;
        else
        {
            if (rbx_4 == 0x8000)
                return rdx_3 | 0x3000000;
            
            if (rbx_4 == 0x8040)
                return rdx_3 | 0x1000000;
        }
    }
    
    return rdx_3;
}

uint64_t sub_14001bd40(int32_t arg1, uint64_t* arg2)
{
    int32_t rbx_1 = arg1 & 0x1f;
    
    if (!arg1)
        return 0;
    
    int32_t mxcsr;
    uint64_t rax_1 = get_fpsw_inline(mxcsr);
    *arg2 = rax_1;
    
    if (arg1 & 8 && rax_1 < 0)
        rbx_1 &= 0xfffffff7;
    else if (arg1 & 4 && TEST_BITQ(rax_1, 9))
        rbx_1 &= 0xfffffffb;
    else if (arg1 & 1 && TEST_BITQ(rax_1, 0xa))
        rbx_1 &= 0xfffffffe;
    else if (arg1 & 2 && TEST_BITQ(rax_1, 0xb))
        rbx_1 &= 0xfffffffd;
    
    if (arg1 & 0x10 && TEST_BITQ(rax_1, 0xc))
        rbx_1 &= 0xffffffef;
    
    if (rbx_1)
        sub_14001c180(0x1f80, 0xffc0, mxcsr);
    
    return rbx_1;
}

int512_t sub_14001be50(int64_t arg1) __pure
{
    int512_t result;
    result = arg1 | 0x8000000000000;
    return result;
}

int64_t sub_14001be70(int64_t arg1, int32_t arg2, int64_t arg3, int32_t arg4, int32_t arg5, int64_t arg6, int32_t arg7)
{
    void var_128;
    int64_t rax_1 = __security_cookie ^ &var_128;
    int64_t var_f0 = 0;
    int64_t var_f8 = arg3;
    uint128_t zmm6 = arg6;
    int64_t arg_38;
    
    if (sub_14001bd40(arg5, &var_f0))
    {
        int128_t var_b8;
        __builtin_memset(&var_b8, 0, 0x70);
        
        if (arg7 == 2)
        {
            int128_t var_88;
            var_88 = zmm6;
            int128_t var_78;
            var_78 = 3;
        }
        
        sub_14001c270(&var_b8, &var_f0, arg5, arg2, &arg_38, &var_f8);
        /* no return */
    }
    
    int32_t result;
    
    if (!__acrt_has_user_matherr() || !arg4)
    {
        int512_t zmm0_2;
        result = sub_14001c230(arg4);
        zmm0_2 = var_f8;
    }
    else
    {
        int64_t zmm1 = var_f8;
        int64_t var_d8_1 = arg_38;
        int32_t var_e4_1 = 0;
        uint64_t var_d0_1 = zmm6;
        int32_t var_e8_1 = arg4;
        int64_t var_e0_1 = arg1;
        int512_t zmm0_1;
        result = sub_1400026b0();
        
        if (!result)
            result = sub_14001c230(arg4);
        
        zmm0_1 = zmm1;
    }
    
    __security_check_cookie(rax_1 ^ &var_128);
    return result;
}

int64_t sub_14001bfc0(int64_t arg1 @ xcr0)
{
    int32_t r8 = 0;
    data_14002abec = 0;
    int32_t temp0;
    int32_t temp1;
    int32_t temp2;
    int32_t temp3;
    temp0 = __cpuid(1, 0);
    int32_t var_10 = temp2;
    int32_t var_18 = temp0;
    int32_t var_14 = temp1;
    int32_t var_c = temp3;
    
    if ((temp2 & 0x18001000) == 0x18001000)
    {
        int32_t temp0_1;
        char temp1_1;
        temp0_1 = _xgetbv(0, arg1);
        
        if (((temp0_1 << 0x20 | temp1_1) & 6) != 6)
            r8 = data_14002abec;
        else
        {
            r8 = 1;
            data_14002abec = 1;
        }
    }
    
    if (r8 & 1)
    {
        int32_t temp0_2;
        int32_t temp1_2;
        int32_t temp2_1;
        int32_t temp3_1;
        temp0_2 = __cpuid(0, 0);
        
        if (temp0_2 >= 7)
        {
            int32_t temp0_3;
            char temp1_3;
            int32_t temp2_2;
            int32_t temp3_2;
            temp0_3 = __cpuid(7, 0);
            
            if (temp1_3 & 0x20)
            {
                data_14002abec = 3;
                data_14002abe8 = 3;
                return 0;
            }
        }
    }
    
    data_14002abe8 = r8;
    return 0;
}

int32_t sub_14001c080(int32_t arg1 @ zmm0, int128_t arg2 @ zmm1, int32_t arg3, int32_t arg4, int64_t arg5)
{
    int128_t zmm6 = arg2;
    
    if (arg3 == 1)
    {
        int32_t var_28_2 = 1;
        int64_t var_30_2 = {0};
        zmm6 = sub_14001be70(arg5, arg4, zmm6, 2, 4, 0x22, arg1);
    }
    else if (arg3 == 2)
    {
        int32_t var_28_1 = arg3 - 1;
        int64_t var_30_1 = {0};
        zmm6 = sub_14001be70(arg5, arg4, zmm6, arg3 - 1, 8, 0x21, arg1);
    }
    
    return zmm6;
}

int64_t _log10_special(int32_t arg1 @ zmm0, int128_t arg2 @ zmm1, int32_t arg3)
{
    return sub_14001c080(arg1, arg2, arg3, 0x1b, "log10");
}

uint64_t get_fpsw_inline(int32_t arg1 @ mxcsr) __pure
{
    return arg1;
}

int64_t set_fpsw_inline() __pure
{
    int32_t rcx;
    int32_t arg_10 = rcx;
}

uint64_t sub_14001c160(int32_t arg1 @ mxcsr) __pure
{
    int32_t arg_8 = arg1 & 0xffffffc0;
    return arg1 & 0x3f;
}

uint64_t sub_14001c180(int32_t arg1, int32_t arg2, int32_t arg3 @ mxcsr)
{
    int32_t var_24 = arg3;
    int32_t rax_4 = ((~arg2 | 0xffff807f) & arg3) | (arg1 & arg2);
    int32_t var_28 = rax_4;
    int32_t arg_8;
    
    if (data_140029ac0 && rax_4 & 0x40)
    {
        arg_8 = rax_4;
        return arg3;
    }
    
    arg_8 = rax_4 & 0xffffffbf;
    return arg3;
}

uint64_t sub_14001c200(int32_t arg1 @ mxcsr) __pure
{
    return arg1 & 0x3f;
}

void sub_14001c210(int32_t arg1, int32_t arg2 @ mxcsr) __pure
{
    if (arg1 & 0x3f)
        int32_t arg_8 = arg2 | (arg1 & 0x3f);
}

void sub_14001c230(int32_t arg1)
{
    if (arg1 == 1)
        *sub_14000dedc() = 0x21;
    else if (arg1 == 2 || arg1 == 3)
        *sub_14000dedc() = 0x22;
}

void sub_14001c270(uint64_t arg1, int64_t* arg2, char arg3, int32_t arg4, int32_t* arg5, int32_t* arg6) __noreturn
{
    sub_14001c2a0(arg1, arg2, arg3, arg4, arg5, arg6, 0);
    /* no return */
}

int64_t sub_14001c295() __pure
{
    return;
}

void sub_14001c2a0(uint64_t arg1, int64_t* arg2, char arg3, int32_t arg4, int32_t* arg5, int32_t* arg6, int32_t arg7) __noreturn
{
    uint64_t arguments = arg1;
    uint32_t dwExceptionCode = -0x3ffffff3;
    *(arg1 + 4) = 0;
    *(arguments + 8) = 0;
    *(arguments + 0xc) = 0;
    
    if (arg3 & 0x10)
    {
        uint64_t arguments_1 = arguments;
        dwExceptionCode = -0x3fffff71;
        *(arguments_1 + 4) |= 1;
    }
    
    if (arg3 & 2)
    {
        uint64_t arguments_2 = arguments;
        dwExceptionCode = -0x3fffff6d;
        *(arguments_2 + 4) |= 2;
    }
    
    if (arg3 & 1)
    {
        uint64_t arguments_3 = arguments;
        dwExceptionCode = -0x3fffff6f;
        *(arguments_3 + 4) |= 4;
    }
    
    if (arg3 & 4)
    {
        uint64_t arguments_4 = arguments;
        dwExceptionCode = -0x3fffff72;
        *(arguments_4 + 4) |= 8;
    }
    
    if (arg3 & 8)
    {
        uint64_t arguments_5 = arguments;
        dwExceptionCode = -0x3fffff70;
        *(arguments_5 + 4) |= 0x10;
    }
    
    uint64_t arguments_24 = arguments;
    *(arguments_24 + 8) ^= (~(*arg2 >> 7 << 4) ^ *(arguments_24 + 8)) & 0x10;
    uint64_t arguments_25 = arguments;
    *(arguments_25 + 8) ^= (~(*arg2 >> 9 << 3) ^ *(arguments_25 + 8)) & 8;
    uint64_t arguments_26 = arguments;
    *(arguments_26 + 8) ^= (~(*arg2 >> 0xa << 2) ^ *(arguments_26 + 8)) & 4;
    uint64_t arguments_27 = arguments;
    *(arguments_27 + 8) ^= (~((*arg2 >> 0xb) * 2) ^ *(arguments_27 + 8)) & 2;
    uint64_t arguments_28 = arguments;
    *(arguments_28 + 8) ^= (~(*arg2 >> 0xc) ^ *(arguments_28 + 8)) & 1;
    int32_t mxcsr;
    char rax_2 = sub_14001c200(mxcsr);
    
    if (rax_2 & 1)
    {
        uint64_t arguments_20 = arguments;
        *(arguments_20 + 0xc) |= 0x10;
    }
    
    if (rax_2 & 4)
    {
        uint64_t arguments_21 = arguments;
        *(arguments_21 + 0xc) |= 8;
    }
    
    if (rax_2 & 8)
    {
        uint64_t arguments_6 = arguments;
        *(arguments_6 + 0xc) |= 4;
    }
    
    if (rax_2 & 0x10)
    {
        uint64_t arguments_7 = arguments;
        *(arguments_7 + 0xc) |= 2;
    }
    
    if (rax_2 & 0x20)
    {
        uint64_t arguments_8 = arguments;
        *(arguments_8 + 0xc) |= 1;
    }
    
    uint64_t rax_4 = *arg2 & 0x6000;
    
    if (!rax_4)
    {
        uint64_t arguments_14 = arguments;
        *arguments_14 &= 0xfffffffc;
    }
    else if (rax_4 == 0x2000)
    {
        uint64_t arguments_12 = arguments;
        *arguments_12 &= 0xfffffffd;
        uint64_t arguments_13 = arguments;
        *arguments_13 |= 1;
    }
    else if (rax_4 == 0x4000)
    {
        uint64_t arguments_10 = arguments;
        *arguments_10 &= 0xfffffffe;
        uint64_t arguments_11 = arguments;
        *arguments_11 |= 2;
    }
    else if (rax_4 == 0x6000)
    {
        uint64_t arguments_9 = arguments;
        *arguments_9 |= 3;
    }
    
    uint64_t arguments_22 = arguments;
    *arguments_22 ^= (arg4 << 5 ^ *arguments_22) & 0x1ffe0;
    uint64_t arguments_15 = arguments;
    *(arguments_15 + 0x20) |= 1;
    
    if (!arg7)
    {
        uint64_t arguments_23 = arguments;
        *(arguments_23 + 0x20) = (*(arguments_23 + 0x20) & 0xffffffe3) | 2;
        *(arguments + 0x10) = *arg5;
        uint64_t arguments_19 = arguments;
        *(arguments_19 + 0x60) |= 1;
        uint64_t arguments_29 = arguments;
        *(arguments_29 + 0x60) = (*(arguments_29 + 0x60) & 0xffffffe3) | 2;
        *(arguments + 0x50) = *arg6;
    }
    else
    {
        uint64_t arguments_16 = arguments;
        *(arguments_16 + 0x20) &= 0xffffffe1;
        *(arguments + 0x10) = *arg5;
        uint64_t arguments_17 = arguments;
        *(arguments_17 + 0x60) |= 1;
        uint64_t arguments_18 = arguments;
        *(arguments_18 + 0x60) &= 0xffffffe1;
        *(arguments + 0x50) = *arg6;
    }
    
    RaiseException(dwExceptionCode, 0, 1, &arguments);
    /* no return */
}

void _guard_dispatch_icall_nop(void (* arg1)())
{
    int64_t entry_rax;
    /* jump -> entry_rax */
}

int64_t sub_14001c5e0()
{
    int64_t rax;
    /* tailcall */
    return rax();
}

int64_t sub_14001c600()
{
    int64_t rax;
    /* tailcall */
    return rax();
}

int64_t sub_14001c630(int64_t arg1, char arg2, int64_t arg3, int64_t arg4)
{
    int64_t rcx_1;
    int64_t rdi_1;
    rdi_1 = __memfill_u8(arg1, arg2, arg3);
    return arg4;
}

double [0x4] sub_14001c640(int128_t* arg1, char arg2, void* arg3)
{
    double (* rax_2)[0x4] = arg1;
    uint64_t rdx = arg2;
    int64_t r11 = 0x101010101010101 * rdx;
    double result[0x4];
    result[0] = r11;
    
    if (arg3 > 0xf)
    {
        result[0] = _mm_unpacklo_epi64(result[0], result[0]);
        
        if (arg3 <= 0x20)
        {
            *arg1 = result[0];
            *(arg1 + arg3 - 0x10) = result[0];
            return result;
        }
        
        if (data_140029098 < 3)
        {
            if (arg3 > data_1400290a0 && *data_14002a140 & 2)
                /* tailcall */
                return sub_14001c630(arg1, rdx, arg3, arg1);
            
            void* rcx_4 = arg1 - ((arg1 & 0xf) - 0x10);
            int64_t i = arg3 + (arg1 & 0xf) - 0x10;
            
            if (i > 0x80)
            {
                do
                {
                    *rcx_4 = result[0];
                    *(rcx_4 + 0x10) = result[0];
                    *(rcx_4 + 0x20) = result[0];
                    *(rcx_4 + 0x30) = result[0];
                    *(rcx_4 + 0x40) = result[0];
                    *(rcx_4 + 0x50) = result[0];
                    *(rcx_4 + 0x60) = result[0];
                    *(rcx_4 + 0x70) = result[0];
                    rcx_4 += 0x80;
                    i -= 0x80;
                } while (i >= 0x80);
            }
            
            int64_t r9_14 = (i + 0xf) & 0xfffffffffffffff0;
            
            switch (jump_table_140023c38[r9_14 >> 4])
            {
                case 0x1c98b:
                {
                    *(rcx_4 + r9_14 - 0x80) = result[0];
                label_14001c992:
                    *(rcx_4 + r9_14 - 0x70) = result[0];
                label_14001c999:
                    *(rcx_4 + r9_14 - 0x60) = result[0];
                label_14001c9a0:
                    *(rcx_4 + r9_14 - 0x50) = result[0];
                label_14001c9a7:
                    *(rcx_4 + r9_14 - 0x40) = result[0];
                label_14001c9ae:
                    *(rcx_4 + r9_14 - 0x30) = result[0];
                    *(rcx_4 + r9_14 - 0x20) = result[0];
                    *(rcx_4 + i - 0x10) = result[0];
                    break;
                }
                case 0x1c992:
                {
                    goto label_14001c992;
                }
                case 0x1c999:
                {
                    goto label_14001c999;
                }
                case 0x1c9a0:
                {
                    goto label_14001c9a0;
                }
                case 0x1c9a7:
                {
                    goto label_14001c9a7;
                }
                case 0x1c9ae:
                {
                    goto label_14001c9ae;
                }
                case 0x1c9b5:
                {
                    *(rcx_4 + r9_14 - 0x20) = result[0];
                    *(rcx_4 + i - 0x10) = result[0];
                    break;
                }
                case 0x1c9bc:
                {
                    *(rcx_4 + i - 0x10) = result[0];
                    break;
                }
            }
            
            *rax_2 = result[0];
            return result;
        }
        
        if (arg3 > data_1400290a0 && arg3 <= data_1400290a8 && *data_14002a140 & 2)
            /* tailcall */
            return sub_14001c630(arg1, rdx, arg3, arg1);
        
        result = _mm256_insertf128_ps(result, result[0], 1);
        void* rcx_2 = arg1 - ((arg1 & 0x1f) - 0x20);
        void* i_1 = arg3 + (arg1 & 0x1f) - 0x20;
        
        if (i_1 > 0x100)
        {
            if (i_1 > data_1400290a8)
            {
                do
                {
                    *rcx_2 = result;
                    *(rcx_2 + 0x20) = result;
                    *(rcx_2 + 0x40) = result;
                    *(rcx_2 + 0x60) = result;
                    *(rcx_2 + 0x80) = result;
                    *(rcx_2 + 0xa0) = result;
                    *(rcx_2 + 0xc0) = result;
                    *(rcx_2 + 0xe0) = result;
                    rcx_2 += 0x100;
                    i_1 -= 0x100;
                } while (i_1 >= 0x100);
                
                void* r9_9 = (i_1 + 0x1f) & 0xffffffffffffffe0;
                
                switch (r9_9 >> 5)
                {
                    case 1:
                    {
                        *(rcx_2 + i_1 - 0x20) = result;
                        break;
                    }
                    case 2:
                    {
                        *(rcx_2 + r9_9 - 0x40) = result;
                        *(rcx_2 + i_1 - 0x20) = result;
                        break;
                    }
                    case 3:
                    {
                        goto label_14001c8c6;
                    }
                    case 4:
                    {
                        goto label_14001c8bf;
                    }
                    case 5:
                    {
                        goto label_14001c8b5;
                    }
                    case 6:
                    {
                        goto label_14001c8ab;
                    }
                    case 7:
                    {
                        goto label_14001c8a1;
                    }
                    case 8:
                    {
                        *(rcx_2 + r9_9 - 0x100) = result;
                    label_14001c8a1:
                        *(rcx_2 + r9_9 - 0xe0) = result;
                    label_14001c8ab:
                        *(rcx_2 + r9_9 - 0xc0) = result;
                    label_14001c8b5:
                        *(rcx_2 + r9_9 - 0xa0) = result;
                    label_14001c8bf:
                        *(rcx_2 + r9_9 - 0x80) = result;
                    label_14001c8c6:
                        *(rcx_2 + r9_9 - 0x60) = result;
                        *(rcx_2 + r9_9 - 0x40) = result;
                        *(rcx_2 + i_1 - 0x20) = result;
                        break;
                    }
                }
                
                *rax_2 = result;
                _mm256_zeroupper();
                return result;
            }
            
            do
            {
                *rcx_2 = result;
                *(rcx_2 + 0x20) = result;
                *(rcx_2 + 0x40) = result;
                *(rcx_2 + 0x60) = result;
                *(rcx_2 + 0x80) = result;
                *(rcx_2 + 0xa0) = result;
                *(rcx_2 + 0xc0) = result;
                *(rcx_2 + 0xe0) = result;
                rcx_2 += 0x100;
                i_1 -= 0x100;
            } while (i_1 >= 0x100);
        }
        
        void* r9_7 = (i_1 + 0x1f) & 0xffffffffffffffe0;
        
        switch (r9_7 >> 5)
        {
            case 1:
            {
                *(rcx_2 + i_1 - 0x20) = result;
                break;
            }
            case 2:
            {
                *(rcx_2 + r9_7 - 0x40) = result;
                *(rcx_2 + i_1 - 0x20) = result;
                break;
            }
            case 3:
            {
                goto label_14001c806;
            }
            case 4:
            {
                goto label_14001c7ff;
            }
            case 5:
            {
                goto label_14001c7f5;
            }
            case 6:
            {
                goto label_14001c7eb;
            }
            case 7:
            {
                goto label_14001c7e1;
            }
            case 8:
            {
                *(rcx_2 + r9_7 - 0x100) = result;
            label_14001c7e1:
                *(rcx_2 + r9_7 - 0xe0) = result;
            label_14001c7eb:
                *(rcx_2 + r9_7 - 0xc0) = result;
            label_14001c7f5:
                *(rcx_2 + r9_7 - 0xa0) = result;
            label_14001c7ff:
                *(rcx_2 + r9_7 - 0x80) = result;
            label_14001c806:
                *(rcx_2 + r9_7 - 0x60) = result;
                *(rcx_2 + r9_7 - 0x40) = result;
                *(rcx_2 + i_1 - 0x20) = result;
                break;
            }
        }
        
        *rax_2 = result;
        _mm256_zeroupper();
        return result;
    }
    
    void* rcx = arg1 + arg3;
    
    switch (arg3)
    {
        case nullptr:
        {
            return result;
            break;
        }
        case 1:
        {
            *(rcx - 1) = r11;
            return result;
            break;
        }
        case 2:
        {
            *(rcx - 2) = r11;
            return result;
            break;
        }
        case 3:
        {
            goto label_14001c689;
        }
        case 4:
        {
            *(rcx - 4) = r11;
            return result;
            break;
        }
        case 5:
        {
            goto label_14001c6b4;
        }
        case 6:
        {
            goto label_14001c697;
        }
        case 7:
        {
            goto label_14001c685;
        }
        case 8:
        {
            *(rcx - 8) = r11;
            return result;
            break;
        }
        case 9:
        {
            *(rcx - 9) = r11;
            *(rcx - 1) = r11;
            return result;
            break;
        }
        case 0xa:
        {
            *(rcx - 0xa) = r11;
            *(rcx - 2) = r11;
            return result;
            break;
        }
        case 0xb:
        {
            *(rcx - 0xb) = r11;
            *(rcx - 3) = r11;
            *(rcx - 1) = r11;
            return result;
            break;
        }
        case 0xc:
        {
            *(rcx - 0xc) = r11;
            *(rcx - 4) = r11;
            return result;
            break;
        }
        case 0xd:
        {
            *(rcx - 0xd) = r11;
        label_14001c6b4:
            *(rcx - 5) = r11;
            *(rcx - 1) = r11;
            return result;
            break;
        }
        case 0xe:
        {
            *(rcx - 0xe) = r11;
        label_14001c697:
            *(rcx - 6) = r11;
            *(rcx - 2) = r11;
            return result;
            break;
        }
        case 0xf:
        {
            *(rcx - 0xf) = r11;
        label_14001c685:
            *(rcx - 7) = r11;
        label_14001c689:
            *(rcx - 3) = r11;
            *(rcx - 1) = r11;
            return result;
            break;
        }
    }
}

void* strlen(char* arg1)
{
    char* rax = arg1;
    int64_t rcx = -(arg1);
    
    if (rax & 7)
    {
        do
        {
            char rdx = *rax;
            rax = &rax[1];
            
            if (!rdx)
                return &rax[rcx - 1];
        } while (rax & 7);
    }
    
    while (true)
    {
        int64_t rdx_1 = *rax;
        rax = &rax[8];
        
        if ((~rdx_1 ^ (0x7efefefefefefeff + rdx_1)) & 0x8101010101010100)
        {
            int64_t rdx_5 = *(rax - 8);
            
            if (!rdx_5)
                return &rax[rcx - 8];
            
            if (!*rdx_5[1])
                return &rax[rcx - 7];
            
            uint64_t rdx_6 = rdx_5 >> 0x10;
            
            if (!rdx_6)
                return &rax[rcx - 6];
            
            if (!*rdx_6[1])
                return &rax[rcx - 5];
            
            uint32_t rdx_7 = rdx_6 >> 0x10;
            
            if (!rdx_7)
                return &rax[rcx - 4];
            
            if (!*rdx_7[1])
                return &rax[rcx - 3];
            
            uint16_t rdx_8 = rdx_7 >> 0x10;
            
            if (!rdx_8)
                return &rax[rcx - 2];
            
            if (!*rdx_8[1])
                break;
        }
    }
    
    return &rax[rcx - 1];
}

int64_t strcmp(char* arg1, int64_t arg2)
{
    char* rdx = arg2 - arg1;
    
    if (arg1 & 7)
        goto label_14001caa8;
    
    while (true)
    {
        if (((rdx + arg1) & 0xfff) <= 0xff8)
        {
            int64_t rax_4 = *arg1;
            
            if (rax_4 == *(rdx + arg1))
            {
                arg1 = &arg1[8];
                
                if (-0x7f7f7f7f7f7f7f80 & ~rax_4 & (rax_4 - 0x101010101010101))
                    return 0;
                
                continue;
            }
        }
        
    label_14001caa8:
        uint64_t rax_1 = *arg1;
        char temp0_1 = *(rdx + arg1);
        
        if (rax_1 != temp0_1)
            return (rax_1 - rax_1) | 1;
        
        arg1 = &arg1[1];
        
        if (!rax_1)
            return 0;
        
        if (arg1 & 7)
            break;
    }
}

int64_t sub_14001cb30(int64_t arg1, int64_t arg2, int64_t arg3)
{
    __builtin_memcpy(arg1, arg2, arg3);
}

int32_t* sub_14001cb40(int128_t* arg1, int32_t* arg2, void* arg3)
{
    int32_t* result = arg1;
    
    if (arg3 > 0xf)
    {
        int256_t zmm1;
        int256_t zmm2;
        
        if (arg3 <= 0x20)
        {
            zmm1 = *arg2;
            zmm2 = *(arg2 + arg3 - 0x10);
            *arg1 = zmm1;
            *(arg1 + arg3 - 0x10) = zmm2;
            return result;
        }
        
        void* r9_7 = arg2 + arg3;
        
        if (arg1 <= arg2)
            r9_7 = arg1;
        
        int256_t zmm0;
        
        if (arg1 < r9_7)
        {
            zmm2 = *arg2;
            int64_t rdx = arg2 - arg1;
            int64_t rcx_17 = arg1 + arg3;
            zmm0 = *(rcx_17 + rdx - 0x10);
            int128_t* rcx_18 = rcx_17 - 0x10;
            void* r8_11 = arg3 - 0x10;
            
            if (rcx_18 & 0xf)
            {
                int128_t* r9_20 = rcx_18;
                rcx_18 &= 0xfffffffffffffff0;
                zmm1 = zmm0;
                zmm0 = *(rcx_18 + rdx);
                *r9_20 = zmm1;
                r8_11 = rcx_18 - result;
            }
            
            uint64_t r9_22 = r8_11 >> 7;
            
            if (r9_22)
            {
                *rcx_18 = zmm0;
                
                while (true)
                {
                    zmm0 = *(rcx_18 + rdx - 0x10);
                    zmm1 = *(rcx_18 + rdx - 0x20);
                    rcx_18 -= 0x80;
                    rcx_18[7] = zmm0;
                    rcx_18[6] = zmm1;
                    zmm0 = *(rcx_18 + rdx + 0x50);
                    zmm1 = *(rcx_18 + rdx + 0x40);
                    uint64_t temp0_1 = r9_22;
                    r9_22 -= 1;
                    rcx_18[5] = zmm0;
                    rcx_18[4] = zmm1;
                    zmm0 = *(rcx_18 + rdx + 0x30);
                    zmm1 = *(rcx_18 + rdx + 0x20);
                    rcx_18[3] = zmm0;
                    rcx_18[2] = zmm1;
                    zmm0 = *(rcx_18 + rdx + 0x10);
                    zmm1 = *(rcx_18 + rdx);
                    
                    if (temp0_1 == 1)
                        break;
                    
                    rcx_18[1] = zmm0;
                    *rcx_18 = zmm1;
                }
                
                rcx_18[1] = zmm0;
                r8_11 &= 0x7f;
                zmm0 = zmm1;
            }
            
            uint64_t i_1 = r8_11 >> 4;
            
            if (i_1)
            {
                uint64_t i;
                
                do
                {
                    *rcx_18 = zmm0;
                    rcx_18 -= 0x10;
                    zmm0 = *(rcx_18 + rdx);
                    i = i_1;
                    i_1 -= 1;
                } while (i != 1);
            }
            
            if (r8_11 & 0xf)
                *result = zmm2;
            
            *rcx_18 = zmm0;
            return result;
        }
        
        int256_t zmm3;
        int256_t zmm4;
        int256_t zmm5;
        
        if (data_140029098 < 3)
        {
            if (arg3 > 0x800 && *data_14002a140 & 2)
                /* tailcall */
                return sub_14001cb30(arg1, arg2, arg3);
            
            zmm0 = *arg2;
            zmm5 = *(arg2 + arg3 - 0x10);
            
            if (arg3 > 0x80)
            {
                void* r9_17 = (arg1 & 0xf) - 0x10;
                arg1 -= r9_17;
                arg2 -= r9_17;
                arg3 += r9_17;
                
                if (arg3 > 0x80)
                {
                    do
                    {
                        zmm1 = *arg2;
                        zmm2 = *(arg2 + 0x10);
                        zmm3 = *(arg2 + 0x20);
                        zmm4 = *(arg2 + 0x30);
                        *arg1 = zmm1;
                        arg1[1] = zmm2;
                        arg1[2] = zmm3;
                        arg1[3] = zmm4;
                        zmm1 = *(arg2 + 0x40);
                        zmm2 = *(arg2 + 0x50);
                        zmm3 = *(arg2 + 0x60);
                        zmm4 = *(arg2 + 0x70);
                        arg1[4] = zmm1;
                        arg1[5] = zmm2;
                        arg1[6] = zmm3;
                        arg1[7] = zmm4;
                        arg1 = &arg1[8];
                        arg2 = &arg2[0x20];
                        arg3 -= 0x80;
                    } while (arg3 >= 0x80);
                }
            }
            
            void* r9_19 = (arg3 + 0xf) & 0xfffffffffffffff0;
            
            switch (jump_table_140023ce8[r9_19 >> 4])
            {
                case 0x1d059:
                {
                    zmm1 = *(arg2 + r9_19 - 0x80);
                    *(arg1 + r9_19 - 0x80) = zmm1;
                label_14001d067:
                    zmm1 = *(arg2 + r9_19 - 0x70);
                    *(arg1 + r9_19 - 0x70) = zmm1;
                label_14001d075:
                    zmm1 = *(arg2 + r9_19 - 0x60);
                    *(arg1 + r9_19 - 0x60) = zmm1;
                label_14001d083:
                    zmm1 = *(arg2 + r9_19 - 0x50);
                    *(arg1 + r9_19 - 0x50) = zmm1;
                label_14001d091:
                    zmm1 = *(arg2 + r9_19 - 0x40);
                    *(arg1 + r9_19 - 0x40) = zmm1;
                label_14001d09f:
                    zmm1 = *(arg2 + r9_19 - 0x30);
                    *(arg1 + r9_19 - 0x30) = zmm1;
                label_14001d0ad:
                    zmm1 = *(arg2 + r9_19 - 0x20);
                    *(arg1 + r9_19 - 0x20) = zmm1;
                    *(arg1 + arg3 - 0x10) = zmm5;
                    break;
                }
                case 0x1d067:
                {
                    goto label_14001d067;
                }
                case 0x1d075:
                {
                    goto label_14001d075;
                }
                case 0x1d083:
                {
                    goto label_14001d083;
                }
                case 0x1d091:
                {
                    goto label_14001d091;
                }
                case 0x1d09f:
                {
                    goto label_14001d09f;
                }
                case 0x1d0ad:
                {
                    goto label_14001d0ad;
                }
                case 0x1d0bb:
                {
                    *(arg1 + arg3 - 0x10) = zmm5;
                    break;
                }
            }
            
            *result = zmm0;
            return result;
        }
        
        if (arg3 > 0x2000 && arg3 <= 0x180000 && *data_14002a140 & 2)
            /* tailcall */
            return sub_14001cb30(arg1, arg2, arg3);
        
        zmm0 = *arg2;
        zmm5 = *(arg2 + arg3 - 0x20);
        
        if (arg3 > 0x100)
        {
            void* r9_10 = (arg1 & 0x1f) - 0x20;
            arg1 -= r9_10;
            arg2 -= r9_10;
            arg3 += r9_10;
            
            if (arg3 > 0x100)
            {
                if (arg3 > 0x180000)
                {
                    do
                    {
                        zmm2 = *(arg2 + 0x20);
                        zmm3 = *(arg2 + 0x40);
                        zmm4 = *(arg2 + 0x60);
                        *arg1 = *arg2;
                        *(arg1 + 0x20) = zmm2;
                        *(arg1 + 0x40) = zmm3;
                        *(arg1 + 0x60) = zmm4;
                        zmm2 = *(arg2 + 0xa0);
                        zmm3 = *(arg2 + 0xc0);
                        zmm4 = *(arg2 + 0xe0);
                        *(arg1 + 0x80) = *(arg2 + 0x80);
                        *(arg1 + 0xa0) = zmm2;
                        *(arg1 + 0xc0) = zmm3;
                        *(arg1 + 0xe0) = zmm4;
                        arg1 = &arg1[0x10];
                        arg2 = &arg2[0x40];
                        arg3 -= 0x100;
                    } while (arg3 >= 0x100);
                    
                    void* r9_14 = (arg3 + 0x1f) & 0xffffffffffffffe0;
                    
                    switch (r9_14 >> 5)
                    {
                        case 1:
                        {
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                        case 2:
                        {
                            *(arg1 + r9_14 - 0x40) = *(arg2 + r9_14 - 0x40);
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                        case 3:
                        {
                            goto label_14001cf4a;
                        }
                        case 4:
                        {
                            goto label_14001cf3c;
                        }
                        case 5:
                        {
                            goto label_14001cf2b;
                        }
                        case 6:
                        {
                            goto label_14001cf17;
                        }
                        case 7:
                        {
                            goto label_14001cf03;
                        }
                        case 8:
                        {
                            *(arg1 + r9_14 - 0x100) = *(arg2 + r9_14 - 0x100);
                        label_14001cf03:
                            *(arg1 + r9_14 - 0xe0) = *(arg2 + r9_14 - 0xe0);
                        label_14001cf17:
                            *(arg1 + r9_14 - 0xc0) = *(arg2 + r9_14 - 0xc0);
                        label_14001cf2b:
                            *(arg1 + r9_14 - 0xa0) = *(arg2 + r9_14 - 0xa0);
                        label_14001cf3c:
                            *(arg1 + r9_14 - 0x80) = *(arg2 + r9_14 - 0x80);
                        label_14001cf4a:
                            *(arg1 + r9_14 - 0x60) = *(arg2 + r9_14 - 0x60);
                            *(arg1 + r9_14 - 0x40) = *(arg2 + r9_14 - 0x40);
                            *(arg1 + arg3 - 0x20) = zmm5;
                            break;
                        }
                    }
                    
                    *result = zmm0;
                    _mm256_zeroupper();
                    return result;
                }
                
                do
                {
                    zmm2 = *(arg2 + 0x20);
                    zmm3 = *(arg2 + 0x40);
                    zmm4 = *(arg2 + 0x60);
                    *arg1 = *arg2;
                    *(arg1 + 0x20) = zmm2;
                    *(arg1 + 0x40) = zmm3;
                    *(arg1 + 0x60) = zmm4;
                    zmm2 = *(arg2 + 0xa0);
                    zmm3 = *(arg2 + 0xc0);
                    zmm4 = *(arg2 + 0xe0);
                    *(arg1 + 0x80) = *(arg2 + 0x80);
                    *(arg1 + 0xa0) = zmm2;
                    *(arg1 + 0xc0) = zmm3;
                    *(arg1 + 0xe0) = zmm4;
                    arg1 = &arg1[0x10];
                    arg2 = &arg2[0x40];
                    arg3 -= 0x100;
                } while (arg3 >= 0x100);
            }
        }
        
        void* r9_12 = (arg3 + 0x1f) & 0xffffffffffffffe0;
        
        switch (r9_12 >> 5)
        {
            case 1:
            {
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
            case 2:
            {
                *(arg1 + r9_12 - 0x40) = *(arg2 + r9_12 - 0x40);
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
            case 3:
            {
                goto label_14001ce1a;
            }
            case 4:
            {
                goto label_14001ce0c;
            }
            case 5:
            {
                goto label_14001cdfb;
            }
            case 6:
            {
                goto label_14001cde7;
            }
            case 7:
            {
                goto label_14001cdd3;
            }
            case 8:
            {
                *(arg1 + r9_12 - 0x100) = *(arg2 + r9_12 - 0x100);
            label_14001cdd3:
                *(arg1 + r9_12 - 0xe0) = *(arg2 + r9_12 - 0xe0);
            label_14001cde7:
                *(arg1 + r9_12 - 0xc0) = *(arg2 + r9_12 - 0xc0);
            label_14001cdfb:
                *(arg1 + r9_12 - 0xa0) = *(arg2 + r9_12 - 0xa0);
            label_14001ce0c:
                *(arg1 + r9_12 - 0x80) = *(arg2 + r9_12 - 0x80);
            label_14001ce1a:
                *(arg1 + r9_12 - 0x60) = *(arg2 + r9_12 - 0x60);
                *(arg1 + r9_12 - 0x40) = *(arg2 + r9_12 - 0x40);
                *(arg1 + arg3 - 0x20) = zmm5;
                break;
            }
        }
        
        *result = zmm0;
        _mm256_zeroupper();
        return result;
    }
    
    switch (arg3)
    {
        case nullptr:
        {
            return result;
            break;
        }
        case 1:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 2:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 3:
        {
            char r8_4 = *(arg2 + 2);
            *result = *arg2;
            *(result + 2) = r8_4;
            return result;
            break;
        }
        case 4:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 5:
        {
            char r8_10 = arg2[1];
            *result = *arg2;
            result[1] = r8_10;
            return result;
            break;
        }
        case 6:
        {
            int16_t r8_9 = arg2[1];
            *result = *arg2;
            result[1] = r8_9;
            return result;
            break;
        }
        case 7:
        {
            int16_t r8_2 = arg2[1];
            char r9_4 = *(arg2 + 6);
            *result = *arg2;
            result[1] = r8_2;
            *(result + 6) = r9_4;
            return result;
            break;
        }
        case 8:
        {
            *result = *arg2;
            return result;
            break;
        }
        case 9:
        {
            char rcx_8 = arg2[2];
            *result = *arg2;
            result[2] = rcx_8;
            return result;
            break;
        }
        case 0xa:
        {
            int16_t rcx_7 = arg2[2];
            *result = *arg2;
            result[2] = rcx_7;
            return result;
            break;
        }
        case 0xb:
        {
            int16_t rcx_1 = arg2[2];
            char r9_3 = *(arg2 + 0xa);
            *result = *arg2;
            result[2] = rcx_1;
            *(result + 0xa) = r9_3;
            return result;
            break;
        }
        case 0xc:
        {
            int32_t rcx_9 = arg2[2];
            *result = *arg2;
            result[2] = rcx_9;
            return result;
            break;
        }
        case 0xd:
        {
            int32_t rcx_6 = arg2[2];
            char r9_6 = arg2[3];
            *result = *arg2;
            result[2] = rcx_6;
            result[3] = r9_6;
            return result;
            break;
        }
        case 0xe:
        {
            int32_t rcx_4 = arg2[2];
            int16_t r9_5 = arg2[3];
            *result = *arg2;
            result[2] = rcx_4;
            result[3] = r9_5;
            return result;
            break;
        }
        case 0xf:
        {
            int32_t rcx = arg2[2];
            int16_t r9_2 = arg2[3];
            char r10 = *(arg2 + 0xe);
            *result = *arg2;
            result[2] = rcx;
            result[3] = r9_2;
            *(result + 0xe) = r10;
            return result;
            break;
        }
    }
}

int64_t strncmp(char* arg1, int64_t arg2, int64_t arg3)
{
    char* rdx = arg2 - arg1;
    
    if (!arg3)
        return 0;
    
    if (arg1 & 7)
        goto label_14001d1e0;
    
    while (true)
    {
        if (((rdx + arg1) & 0xfff) <= 0xff8)
        {
            int64_t rax_4 = *arg1;
            
            if (rax_4 == *(rdx + arg1))
            {
                arg1 = &arg1[8];
                int64_t temp2_1 = arg3;
                arg3 -= 8;
                
                if (temp2_1 <= 8)
                    return 0;
                
                if (-0x7f7f7f7f7f7f7f80 & ~rax_4 & (-0x101010101010101 + rax_4))
                    return 0;
                
                continue;
            }
        }
        
    label_14001d1e0:
        uint64_t rax_1 = *arg1;
        char temp0_1 = *(rdx + arg1);
        
        if (rax_1 != temp0_1)
            return (rax_1 - rax_1) | 1;
        
        arg1 = &arg1[1];
        int64_t temp1_1 = arg3;
        arg3 -= 1;
        
        if (temp1_1 == 1)
            return 0;
        
        if (!rax_1)
            return 0;
        
        if (arg1 & 7)
            break;
    }
}

uint64_t sub_14001d24d(int64_t* arg1)
{
    return _XcptFilter(**arg1, arg1);
}

uint64_t __scrt_is_nonwritable_in_current_image$filt$0(int64_t* arg1)
{
    int32_t rcx;
    rcx = **arg1 == 0xc0000005;
    return rcx;
}

uint64_t sub_14001d283(int64_t arg1, void* arg2)
{
    *(arg2 + 0x30) = arg1;
    
    if (*(arg2 + 0x58))
    {
        *(arg2 + 0x28) = **(arg2 + 0x30);
        
        if (**(arg2 + 0x28) == 0xe06d7363 && *(*(arg2 + 0x28) + 0x18) == 4 && (
            *(*(arg2 + 0x28) + 0x20) == 0x19930520 || *(*(arg2 + 0x28) + 0x20) == 0x19930521
            || *(*(arg2 + 0x28) + 0x20) == 0x19930522))
        {
            void* rax_7 = __vcrt_getptd();
            *(rax_7 + 0x20) = *(arg2 + 0x28);
            *(__vcrt_getptd() + 0x28) = *(*(arg2 + 0x30) + 8);
            sub_14000b220();
            /* no return */
        }
    }
    
    *(arg2 + 0x20) = 0;
    return *(arg2 + 0x20);
}

int64_t __crt_seh_guarded_call<class <lambda_33460c761a2fd0112426625c267a43ce>,class <lambda_64051b05716dd7c405450ad92739bf96>& __ptr64,class <lambda_86f04418403019f79950d0188666236b>,int32_t>::operator()<class <lambda_33460c761a2fd0112426625c267a43ce>,class <lambda_64051b05716dd7c405450ad92739bf96>& __ptr64,class <lambda_86f04418403019f79950d0188666236b> >::fin$0::fin$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_140002488(**(arg2 + 0x48));
}

int64_t sub_14001d330(int64_t arg1, void* arg2)
{
    /* tailcall */
    return __vcrt_lock(**(arg2 + 0x48));
}

uint64_t <lambda_6e4b09c48022b2350581041d5f6b0c4c>::operator()::filt$0::filt$0(int64_t* arg1, void* arg2)
{
    *(arg2 + 0x28) = arg1;
    int32_t rcx = **arg1;
    *(arg2 + 0x24) = rcx;
    int32_t rax_1;
    rax_1 = rcx == 0xe06d7363;
    *(arg2 + 0x20) = rax_1;
    return *(arg2 + 0x20);
}

int64_t sub_14001d377(int64_t arg1, void* arg2)
{
    /* tailcall */
    return __vcrt_lock(**(arg2 + 0x58));
}

uint64_t _heapwalk$filt$0(int64_t* arg1)
{
    int32_t rcx;
    rcx = **arg1 == 0xc0000005;
    return rcx;
}

int64_t sub_14001d3c0()
{
    /* tailcall */
    return __vcrt_lock(7);
}

int64_t sub_14001d3d9(int64_t arg1, void* arg2)
{
    /* tailcall */
    return __vcrt_lock(**(arg2 + 0x68));
}

int64_t _free_locale$fin$1()
{
    /* tailcall */
    return __vcrt_lock(5);
}

int64_t sub_14001d410()
{
    /* tailcall */
    return __vcrt_lock(0);
}

int64_t sub_14001d426()
{
    /* tailcall */
    return __vcrt_lock(0);
}

void raise$fin$0(int64_t arg1, void* arg2)
{
    if (*(arg2 + 0x70))
        __vcrt_lock(3);
}

int64_t sub_14001d45d(int64_t arg1, void* arg2)
{
    /* tailcall */
    return __vcrt_lock(**(arg2 + 0x98));
}

int64_t common_flush_all$fin$1()
{
    /* tailcall */
    return __vcrt_lock(8);
}

uint64_t sub_14001d493(int64_t arg1, void* arg2)
{
    *(arg2 + 0x48) = arg1;
    void* rax = __vcrt_getptd();
    *(rax + 0x70) = *(arg2 + 0x70);
    int64_t* rdi = *(arg2 + 0x88);
    *(__vcrt_getptd() + 0x60) = rdi[1];
    *(__vcrt_getptd() + 0x68) = *(**(arg2 + 0x48) + 0x38);
    j_sub_140016a48(**(arg2 + 0x48), *(arg2 + 0x78), *(arg2 + 0x80), rdi, *(arg2 + 0x90), 0, 0, 1);
    *(__vcrt_getptd() + 0x70) = 0;
    *(arg2 + 0x40) = 1;
    *(arg2 + 0x44) = 1;
    return *(arg2 + 0x44);
}

int64_t __acrt_uninitialize_locale$fin$0()
{
    /* tailcall */
    return __vcrt_lock(4);
}

int64_t sub_14001d553(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_140012bbc(**(arg2 + 0x48));
}

int64_t common_lseek<long>::fin$0::fin$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_140012bbc(*(arg2 + 0x60));
}

int64_t _fclose_internal::fin$0::fin$0(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_140002488(*(arg2 + 0x40));
}

int64_t sub_14001d59c(int64_t* arg1, void* arg2)
{
    return sub_140016464(arg1, *(arg2 + 0xb8), arg2 + 0x20);
}

void* sub_14001d5bd(int64_t arg1, void* arg2)
{
    _FindAndUnlinkFrame(*(arg2 + 0x38));
    
    if (!*(arg2 + 0x20))
    {
        int32_t* rbx_1 = *(arg2 + 0xb8);
        
        if (*rbx_1 == 0xe06d7363 && rbx_1[6] == 4
            && (rbx_1[8] == 0x19930520 || rbx_1[8] == 0x19930521 || rbx_1[8] == 0x19930522))
        {
            int32_t rax_1;
            int64_t rdx;
            rax_1 = _IsExceptionObjectToBeDestroyed(*(rbx_1 + 0x28));
            
            if (rax_1)
            {
                rdx = 1;
                sub_140002128(rbx_1);
            }
        }
    }
    
    void* rax_2 = __vcrt_getptd();
    *(rax_2 + 0x20) = *(arg2 + 0xc0);
    void* result = __vcrt_getptd();
    *(result + 0x28) = *(arg2 + 0x40);
    return result;
}

int64_t __FrameHandler3::FrameUnwindToState::filt$0::filt$0(int64_t* arg1)
{
    sub_140002228(arg1);
    return 0;
}

void* __FrameHandler3::FrameUnwindToState::fin$1::fin$1()
{
    void* result = __vcrt_getptd();
    
    if (*(result + 0x30) > 0)
    {
        result = __vcrt_getptd();
        *(result + 0x30) -= 1;
    }
    
    return result;
}

int64_t sub_14001d67c(int64_t arg1, void* arg2)
{
    /* tailcall */
    return sub_140012bbc(*(arg2 + 0x40));
}

int64_t sub_14001d6a0(int64_t* arg1)
{
    int32_t rcx = **arg1;
    
    if (rcx != 0xc0000005 && rcx != 0xc000001d)
        return 0;
    
    return 1;
}

int64_t sub_14001d6d0(int64_t* arg1, void* arg2)
{
    *(arg2 + 0x10) = arg1;
    int32_t rcx = **arg1;
    *(arg2 + 8) = rcx;
    
    if (rcx != 0xc0000005 && rcx != 0xc000001d)
        return 0;
    
    return 1;
}

